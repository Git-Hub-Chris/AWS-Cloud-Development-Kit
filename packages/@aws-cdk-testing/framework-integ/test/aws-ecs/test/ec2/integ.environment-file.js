"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const s3 = require("aws-cdk-lib/aws-s3");
const s3deployment = require("aws-cdk-lib/aws-s3-deployment");
const cdk = require("aws-cdk-lib");
const ecs = require("aws-cdk-lib/aws-ecs");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-ecs-integ');
// S3 bucket to host envfile without public access
const bucket = new s3.Bucket(stack, 'Bucket', {
    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    autoDeleteObjects: true,
});
const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });
// ECS cluster to host EC2 task
const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
cluster.addCapacity('DefaultAutoScalingGroup', {
    instanceType: new ec2.InstanceType('t2.micro'),
});
// permit EC2 task to read envfiles from S3
const s3PolicyStatement = new iam.PolicyStatement({
    actions: ['s3:GetBucketLocation', 's3:GetObject'],
});
s3PolicyStatement.addAllResources();
const executionRole = new iam.Role(stack, 'ExecutionRole', {
    assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
    inlinePolicies: {
        s3Policy: new iam.PolicyDocument({
            statements: [s3PolicyStatement],
        }),
    },
});
// define task to run the container with envfiles
const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDefinition', {
    executionRole,
    networkMode: ecs.NetworkMode.AWS_VPC,
});
// deploy an envfile to S3 and delete when the bucket is deleted
const envFileDeployment = new s3deployment.BucketDeployment(stack, 'EnvFileDeployment', {
    destinationBucket: bucket,
    sources: [s3deployment.Source.asset(path.join(__dirname, '../demo-envfiles'))],
});
// define container with envfiles - one from local disk and another from S3
const containerDefinition = new ecs.ContainerDefinition(stack, 'Container', {
    environmentFiles: [
        ecs.EnvironmentFile.fromAsset(path.join(__dirname, '../demo-envfiles/test-envfile.env')),
        ecs.EnvironmentFile.fromBucket(bucket, 'test-envfile.env'),
    ],
    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
    memoryLimitMiB: 256,
    taskDefinition,
});
containerDefinition.node.addDependency(envFileDeployment);
// define a service to run the task definition
new ecs.Ec2Service(stack, 'Service', {
    cluster,
    taskDefinition,
});
new integ_tests_alpha_1.IntegTest(app, 'Integ', { testCases: [stack] });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZW52aXJvbm1lbnQtZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmVudmlyb25tZW50LWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsOERBQThEO0FBQzlELG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0Msa0VBQXVEO0FBRXZELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFFbEQsa0RBQWtEO0FBQ2xELE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQzVDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTO0lBQ2pELGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87SUFDeEMsaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDLENBQUM7QUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXJELCtCQUErQjtBQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRTtJQUM3QyxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztDQUMvQyxDQUFDLENBQUM7QUFFSCwyQ0FBMkM7QUFDM0MsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDaEQsT0FBTyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsY0FBYyxDQUFDO0NBQ2xELENBQUMsQ0FBQztBQUVILGlCQUFpQixDQUFDLGVBQWUsRUFBRSxDQUFDO0FBRXBDLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQ3pELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQztJQUM5RCxjQUFjLEVBQUU7UUFDZCxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDO1lBQy9CLFVBQVUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1NBQ2hDLENBQUM7S0FDSDtDQUNGLENBQUMsQ0FBQztBQUVILGlEQUFpRDtBQUNqRCxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDeEUsYUFBYTtJQUNiLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU87Q0FDckMsQ0FBQyxDQUFDO0FBRUgsZ0VBQWdFO0FBQ2hFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFO0lBQ3RGLGlCQUFpQixFQUFFLE1BQU07SUFDekIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0NBQy9FLENBQUMsQ0FBQztBQUVILDJFQUEyRTtBQUMzRSxNQUFNLG1CQUFtQixHQUFHLElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDMUUsZ0JBQWdCLEVBQUU7UUFDaEIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztRQUN4RixHQUFHLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUM7S0FDM0Q7SUFDRCxLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUM7SUFDbEUsY0FBYyxFQUFFLEdBQUc7SUFDbkIsY0FBYztDQUNmLENBQUMsQ0FBQztBQUVILG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUUxRCw4Q0FBOEM7QUFDOUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDbkMsT0FBTztJQUNQLGNBQWM7Q0FDZixDQUFDLENBQUM7QUFFSCxJQUFJLDZCQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVwRCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCAqIGFzIHMzZGVwbG95bWVudCBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMtZGVwbG95bWVudCc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnO1xuaW1wb3J0IHsgSW50ZWdUZXN0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1lY3MtaW50ZWcnKTtcblxuLy8gUzMgYnVja2V0IHRvIGhvc3QgZW52ZmlsZSB3aXRob3V0IHB1YmxpYyBhY2Nlc3NcbmNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdCdWNrZXQnLCB7XG4gIGJsb2NrUHVibGljQWNjZXNzOiBzMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BTEwsXG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxufSk7XG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZwYycsIHsgbWF4QXpzOiAyIH0pO1xuXG4vLyBFQ1MgY2x1c3RlciB0byBob3N0IEVDMiB0YXNrXG5jb25zdCBjbHVzdGVyID0gbmV3IGVjcy5DbHVzdGVyKHN0YWNrLCAnRWNzQ2x1c3RlcicsIHsgdnBjIH0pO1xuY2x1c3Rlci5hZGRDYXBhY2l0eSgnRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXAnLCB7XG4gIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QyLm1pY3JvJyksXG59KTtcblxuLy8gcGVybWl0IEVDMiB0YXNrIHRvIHJlYWQgZW52ZmlsZXMgZnJvbSBTM1xuY29uc3QgczNQb2xpY3lTdGF0ZW1lbnQgPSBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gIGFjdGlvbnM6IFsnczM6R2V0QnVja2V0TG9jYXRpb24nLCAnczM6R2V0T2JqZWN0J10sXG59KTtcblxuczNQb2xpY3lTdGF0ZW1lbnQuYWRkQWxsUmVzb3VyY2VzKCk7XG5cbmNvbnN0IGV4ZWN1dGlvblJvbGUgPSBuZXcgaWFtLlJvbGUoc3RhY2ssICdFeGVjdXRpb25Sb2xlJywge1xuICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnZWNzLXRhc2tzLmFtYXpvbmF3cy5jb20nKSxcbiAgaW5saW5lUG9saWNpZXM6IHtcbiAgICBzM1BvbGljeTogbmV3IGlhbS5Qb2xpY3lEb2N1bWVudCh7XG4gICAgICBzdGF0ZW1lbnRzOiBbczNQb2xpY3lTdGF0ZW1lbnRdLFxuICAgIH0pLFxuICB9LFxufSk7XG5cbi8vIGRlZmluZSB0YXNrIHRvIHJ1biB0aGUgY29udGFpbmVyIHdpdGggZW52ZmlsZXNcbmNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IGVjcy5FYzJUYXNrRGVmaW5pdGlvbihzdGFjaywgJ1Rhc2tEZWZpbml0aW9uJywge1xuICBleGVjdXRpb25Sb2xlLFxuICBuZXR3b3JrTW9kZTogZWNzLk5ldHdvcmtNb2RlLkFXU19WUEMsXG59KTtcblxuLy8gZGVwbG95IGFuIGVudmZpbGUgdG8gUzMgYW5kIGRlbGV0ZSB3aGVuIHRoZSBidWNrZXQgaXMgZGVsZXRlZFxuY29uc3QgZW52RmlsZURlcGxveW1lbnQgPSBuZXcgczNkZXBsb3ltZW50LkJ1Y2tldERlcGxveW1lbnQoc3RhY2ssICdFbnZGaWxlRGVwbG95bWVudCcsIHtcbiAgZGVzdGluYXRpb25CdWNrZXQ6IGJ1Y2tldCxcbiAgc291cmNlczogW3MzZGVwbG95bWVudC5Tb3VyY2UuYXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2RlbW8tZW52ZmlsZXMnKSldLFxufSk7XG5cbi8vIGRlZmluZSBjb250YWluZXIgd2l0aCBlbnZmaWxlcyAtIG9uZSBmcm9tIGxvY2FsIGRpc2sgYW5kIGFub3RoZXIgZnJvbSBTM1xuY29uc3QgY29udGFpbmVyRGVmaW5pdGlvbiA9IG5ldyBlY3MuQ29udGFpbmVyRGVmaW5pdGlvbihzdGFjaywgJ0NvbnRhaW5lcicsIHtcbiAgZW52aXJvbm1lbnRGaWxlczogW1xuICAgIGVjcy5FbnZpcm9ubWVudEZpbGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9kZW1vLWVudmZpbGVzL3Rlc3QtZW52ZmlsZS5lbnYnKSksXG4gICAgZWNzLkVudmlyb25tZW50RmlsZS5mcm9tQnVja2V0KGJ1Y2tldCwgJ3Rlc3QtZW52ZmlsZS5lbnYnKSxcbiAgXSxcbiAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FtYXpvbi9hbWF6b24tZWNzLXNhbXBsZScpLFxuICBtZW1vcnlMaW1pdE1pQjogMjU2LFxuICB0YXNrRGVmaW5pdGlvbixcbn0pO1xuXG5jb250YWluZXJEZWZpbml0aW9uLm5vZGUuYWRkRGVwZW5kZW5jeShlbnZGaWxlRGVwbG95bWVudCk7XG5cbi8vIGRlZmluZSBhIHNlcnZpY2UgdG8gcnVuIHRoZSB0YXNrIGRlZmluaXRpb25cbm5ldyBlY3MuRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gIGNsdXN0ZXIsXG4gIHRhc2tEZWZpbml0aW9uLFxufSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnSW50ZWcnLCB7IHRlc3RDYXNlczogW3N0YWNrXSB9KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=