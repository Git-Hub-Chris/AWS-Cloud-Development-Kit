"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const appsync = require("aws-cdk-lib/aws-appsync");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'AppSyncJsResolverTestStack');
const logConfig = {
    retention: logs.RetentionDays.ONE_WEEK,
};
const api = new appsync.GraphqlApi(stack, 'JsResolverApi', {
    name: 'JsResolverApi',
    schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.js-resolver.graphql')),
    logConfig,
});
const db = new dynamodb.Table(stack, 'DynamoTable', {
    partitionKey: {
        name: 'id',
        type: dynamodb.AttributeType.STRING,
    },
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const dataSource = api.addDynamoDbDataSource('DynamoDataSource', db);
const addTestFunc = dataSource.createFunction('AddTestFunction', {
    name: 'addTestFunc',
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-resolver', 'index.js')),
});
new appsync.Resolver(stack, 'AddTestResolver', {
    api,
    typeName: 'Mutation',
    fieldName: 'addTest',
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-pipeline', 'index.js')),
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    pipelineConfig: [addTestFunc],
});
const integ = new integ_tests_alpha_1.IntegTest(app, 'JsResolverIntegTest', { testCases: [stack] });
/**
 * Handler that calls our api with an `addTest` Mutation
 */
const invoke = new lambda.Function(stack, 'InvokeApi', {
    code: lambda.Code.fromAsset(path.join(__dirname, 'integ-assets/js-resolver-assertion')),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_18_X,
});
const addTestInvoke = integ.assertions.invokeFunction({
    functionName: invoke.functionName,
    payload: JSON.stringify({
        hostname: api.graphqlUrl,
        apiKey: api.apiKey,
    }),
});
/**
 * Assert result returned on API has a generated ID and the passed name.
 */
addTestInvoke.assertAtPath('Payload.data.addTest.name', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('123'));
addTestInvoke.assertAtPath('Payload.data.addTest.id', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('.+'));
/**
 * Generated ID of the item added in the previous handler
 */
const addTestResultId = addTestInvoke.getAttString('Payload.data.addTest.id');
/**
 * Try to find the item added in the DynamoDB data source.
 */
const getItemCall = integ.assertions.awsApiCall('DynamoDB', 'getItem', {
    TableName: db.tableName,
    Key: {
        id: {
            S: addTestResultId,
        },
    },
});
getItemCall.expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    Item: {
        name: {
            S: '123',
        },
        id: {
            S: addTestResultId,
        },
    },
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuanMtcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5qcy1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixxREFBcUQ7QUFDckQsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3QyxtQ0FBbUM7QUFDbkMsa0VBQXVFO0FBQ3ZFLG1EQUFtRDtBQUVuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFFL0QsTUFBTSxTQUFTLEdBQXNCO0lBQ25DLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVE7Q0FDdkMsQ0FBQztBQUVGLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQ3pELElBQUksRUFBRSxlQUFlO0lBQ3JCLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQ3pGLFNBQVM7Q0FDVixDQUFDLENBQUM7QUFFSCxNQUFNLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtJQUNsRCxZQUFZLEVBQUU7UUFDWixJQUFJLEVBQUUsSUFBSTtRQUNWLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU07S0FDcEM7SUFDRCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRSxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFO0lBQy9ELElBQUksRUFBRSxhQUFhO0lBQ25CLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVE7SUFDekMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BDLFNBQVMsRUFDVCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLFVBQVUsQ0FDWCxDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUM3QyxHQUFHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFDcEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BDLFNBQVMsRUFDVCxjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLFVBQVUsQ0FDWCxDQUFDO0lBQ0YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsUUFBUTtJQUN6QyxjQUFjLEVBQUUsQ0FBQyxXQUFXLENBQUM7Q0FDOUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSw2QkFBUyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVoRjs7R0FFRztBQUNILE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ3JELElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7SUFDcEQsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZO0lBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3RCLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTtRQUN4QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07S0FDbkIsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsYUFBYSxDQUFDLFlBQVksQ0FDeEIsMkJBQTJCLEVBQzNCLGtDQUFjLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQ3ZDLENBQUM7QUFFRixhQUFhLENBQUMsWUFBWSxDQUN4Qix5QkFBeUIsRUFDekIsa0NBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FDdEMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBRTlFOztHQUVHO0FBQ0gsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNyRSxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVM7SUFDdkIsR0FBRyxFQUFFO1FBQ0gsRUFBRSxFQUFFO1lBQ0YsQ0FBQyxFQUFFLGVBQWU7U0FDbkI7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxNQUFNLENBQUMsa0NBQWMsQ0FBQyxVQUFVLENBQUM7SUFDM0MsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFO1lBQ0osQ0FBQyxFQUFFLEtBQUs7U0FDVDtRQUNELEVBQUUsRUFBRTtZQUNGLENBQUMsRUFBRSxlQUFlO1NBQ25CO0tBQ0Y7Q0FDRixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGInO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgbG9ncyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbG9ncyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSW50ZWdUZXN0LCBFeHBlY3RlZFJlc3VsdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIGFwcHN5bmMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwcHN5bmMnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ0FwcFN5bmNKc1Jlc29sdmVyVGVzdFN0YWNrJyk7XG5cbmNvbnN0IGxvZ0NvbmZpZzogYXBwc3luYy5Mb2dDb25maWcgPSB7XG4gIHJldGVudGlvbjogbG9ncy5SZXRlbnRpb25EYXlzLk9ORV9XRUVLLFxufTtcblxuY29uc3QgYXBpID0gbmV3IGFwcHN5bmMuR3JhcGhxbEFwaShzdGFjaywgJ0pzUmVzb2x2ZXJBcGknLCB7XG4gIG5hbWU6ICdKc1Jlc29sdmVyQXBpJyxcbiAgc2NoZW1hOiBhcHBzeW5jLlNjaGVtYUZpbGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICdhcHBzeW5jLmpzLXJlc29sdmVyLmdyYXBocWwnKSksXG4gIGxvZ0NvbmZpZyxcbn0pO1xuXG5jb25zdCBkYiA9IG5ldyBkeW5hbW9kYi5UYWJsZShzdGFjaywgJ0R5bmFtb1RhYmxlJywge1xuICBwYXJ0aXRpb25LZXk6IHtcbiAgICBuYW1lOiAnaWQnLFxuICAgIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HLFxuICB9LFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5cbmNvbnN0IGRhdGFTb3VyY2UgPSBhcGkuYWRkRHluYW1vRGJEYXRhU291cmNlKCdEeW5hbW9EYXRhU291cmNlJywgZGIpO1xuXG5jb25zdCBhZGRUZXN0RnVuYyA9IGRhdGFTb3VyY2UuY3JlYXRlRnVuY3Rpb24oJ0FkZFRlc3RGdW5jdGlvbicsIHtcbiAgbmFtZTogJ2FkZFRlc3RGdW5jJyxcbiAgcnVudGltZTogYXBwc3luYy5GdW5jdGlvblJ1bnRpbWUuSlNfMV8wXzAsXG4gIGNvZGU6IGFwcHN5bmMuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKFxuICAgIF9fZGlybmFtZSxcbiAgICAnaW50ZWctYXNzZXRzJyxcbiAgICAnYXBwc3luYy1qcy1yZXNvbHZlcicsXG4gICAgJ2luZGV4LmpzJyxcbiAgKSksXG59KTtcblxubmV3IGFwcHN5bmMuUmVzb2x2ZXIoc3RhY2ssICdBZGRUZXN0UmVzb2x2ZXInLCB7XG4gIGFwaSxcbiAgdHlwZU5hbWU6ICdNdXRhdGlvbicsXG4gIGZpZWxkTmFtZTogJ2FkZFRlc3QnLFxuICBjb2RlOiBhcHBzeW5jLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihcbiAgICBfX2Rpcm5hbWUsXG4gICAgJ2ludGVnLWFzc2V0cycsXG4gICAgJ2FwcHN5bmMtanMtcGlwZWxpbmUnLFxuICAgICdpbmRleC5qcycsXG4gICkpLFxuICBydW50aW1lOiBhcHBzeW5jLkZ1bmN0aW9uUnVudGltZS5KU18xXzBfMCxcbiAgcGlwZWxpbmVDb25maWc6IFthZGRUZXN0RnVuY10sXG59KTtcblxuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ0pzUmVzb2x2ZXJJbnRlZ1Rlc3QnLCB7IHRlc3RDYXNlczogW3N0YWNrXSB9KTtcblxuLyoqXG4gKiBIYW5kbGVyIHRoYXQgY2FsbHMgb3VyIGFwaSB3aXRoIGFuIGBhZGRUZXN0YCBNdXRhdGlvblxuICovXG5jb25zdCBpbnZva2UgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnSW52b2tlQXBpJywge1xuICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2ludGVnLWFzc2V0cy9qcy1yZXNvbHZlci1hc3NlcnRpb24nKSksXG4gIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE4X1gsXG59KTtcblxuY29uc3QgYWRkVGVzdEludm9rZSA9IGludGVnLmFzc2VydGlvbnMuaW52b2tlRnVuY3Rpb24oe1xuICBmdW5jdGlvbk5hbWU6IGludm9rZS5mdW5jdGlvbk5hbWUsXG4gIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICBob3N0bmFtZTogYXBpLmdyYXBocWxVcmwsXG4gICAgYXBpS2V5OiBhcGkuYXBpS2V5LFxuICB9KSxcbn0pO1xuXG4vKipcbiAqIEFzc2VydCByZXN1bHQgcmV0dXJuZWQgb24gQVBJIGhhcyBhIGdlbmVyYXRlZCBJRCBhbmQgdGhlIHBhc3NlZCBuYW1lLlxuICovXG5hZGRUZXN0SW52b2tlLmFzc2VydEF0UGF0aChcbiAgJ1BheWxvYWQuZGF0YS5hZGRUZXN0Lm5hbWUnLFxuICBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCcxMjMnKSxcbik7XG5cbmFkZFRlc3RJbnZva2UuYXNzZXJ0QXRQYXRoKFxuICAnUGF5bG9hZC5kYXRhLmFkZFRlc3QuaWQnLFxuICBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCcuKycpLFxuKTtcblxuLyoqXG4gKiBHZW5lcmF0ZWQgSUQgb2YgdGhlIGl0ZW0gYWRkZWQgaW4gdGhlIHByZXZpb3VzIGhhbmRsZXJcbiAqL1xuY29uc3QgYWRkVGVzdFJlc3VsdElkID0gYWRkVGVzdEludm9rZS5nZXRBdHRTdHJpbmcoJ1BheWxvYWQuZGF0YS5hZGRUZXN0LmlkJyk7XG5cbi8qKlxuICogVHJ5IHRvIGZpbmQgdGhlIGl0ZW0gYWRkZWQgaW4gdGhlIER5bmFtb0RCIGRhdGEgc291cmNlLlxuICovXG5jb25zdCBnZXRJdGVtQ2FsbCA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnRHluYW1vREInLCAnZ2V0SXRlbScsIHtcbiAgVGFibGVOYW1lOiBkYi50YWJsZU5hbWUsXG4gIEtleToge1xuICAgIGlkOiB7XG4gICAgICBTOiBhZGRUZXN0UmVzdWx0SWQsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5nZXRJdGVtQ2FsbC5leHBlY3QoRXhwZWN0ZWRSZXN1bHQub2JqZWN0TGlrZSh7XG4gIEl0ZW06IHtcbiAgICBuYW1lOiB7XG4gICAgICBTOiAnMTIzJyxcbiAgICB9LFxuICAgIGlkOiB7XG4gICAgICBTOiBhZGRUZXN0UmVzdWx0SWQsXG4gICAgfSxcbiAgfSxcbn0pKTtcbiJdfQ==