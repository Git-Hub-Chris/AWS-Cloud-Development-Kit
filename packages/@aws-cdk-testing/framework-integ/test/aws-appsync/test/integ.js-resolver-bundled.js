"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const cdk = require("aws-cdk-lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const appsync = require("aws-cdk-lib/aws-appsync");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'AppSyncJsResolverTestStack');
const logConfig = {
    retention: logs.RetentionDays.ONE_WEEK,
};
const api = new appsync.GraphqlApi(stack, 'JsResolverApi', {
    name: 'JsResolverApi',
    schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.js-resolver.graphql')),
    logConfig,
});
const db = new dynamodb.Table(stack, 'DynamoTable', {
    partitionKey: {
        name: 'id',
        type: dynamodb.AttributeType.STRING,
    },
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const dataSource = api.addDynamoDbDataSource('DynamoDataSource', db);
const addTestFunc = dataSource.createFunction('AddTestFunction', {
    name: 'addTestFunc',
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-resolver'), {
        bundling: {
            image: lambda.Runtime.NODEJS_18_X.bundlingImage,
            command: ['cp', '-a', '/asset-input/.', '/asset-output/'],
            outputType: cdk.BundlingOutput.FILE,
        },
    }),
});
new appsync.Resolver(stack, 'AddTestResolver', {
    api,
    typeName: 'Mutation',
    fieldName: 'addTest',
    code: appsync.Code.fromAsset(path.join(__dirname, 'integ-assets', 'appsync-js-pipeline'), {
        bundling: {
            image: lambda.Runtime.NODEJS_18_X.bundlingImage,
            command: ['cp', '-a', '/asset-input/.', '/asset-output/'],
            outputType: cdk.BundlingOutput.FILE,
        },
    }),
    runtime: appsync.FunctionRuntime.JS_1_0_0,
    pipelineConfig: [addTestFunc],
});
const integ = new integ_tests_alpha_1.IntegTest(app, 'JsResolverIntegTest', { testCases: [stack] });
/**
 * Handler that calls our api with an `addTest` Mutation
 */
const invoke = new lambda.Function(stack, 'InvokeApi', {
    code: lambda.Code.fromAsset(path.join(__dirname, 'integ-assets/js-resolver-assertion')),
    handler: 'index.handler',
    runtime: lambda.Runtime.NODEJS_18_X,
});
const addTestInvoke = integ.assertions.invokeFunction({
    functionName: invoke.functionName,
    payload: JSON.stringify({
        hostname: api.graphqlUrl,
        apiKey: api.apiKey,
    }),
});
/**
 * Assert result returned on API has a generated ID and the passed name.
 */
addTestInvoke.assertAtPath('Payload.data.addTest.name', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('123'));
addTestInvoke.assertAtPath('Payload.data.addTest.id', integ_tests_alpha_1.ExpectedResult.stringLikeRegexp('.+'));
/**
 * Generated ID of the item added in the previous handler
 */
const addTestResultId = addTestInvoke.getAttString('Payload.data.addTest.id');
/**
 * Try to find the item added in the DynamoDB data source.
 */
const getItemCall = integ.assertions.awsApiCall('DynamoDB', 'getItem', {
    TableName: db.tableName,
    Key: {
        id: {
            S: addTestResultId,
        },
    },
});
getItemCall.expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    Item: {
        name: {
            S: '123',
        },
        id: {
            S: addTestResultId,
        },
    },
}));
//# sourceMappingURL=data:application/json;base64,