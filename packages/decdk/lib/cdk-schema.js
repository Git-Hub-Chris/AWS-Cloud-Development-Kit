"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaForResource = exports.renderFullSchema = void 0;
const chalk = require("chalk");
const jsii2schema_1 = require("../lib/jsii2schema");
function renderFullSchema(typeSystem, options = {}) {
    if (!process.stdin.isTTY || options.colors === false) {
        // Disable chalk color highlighting
        process.env.FORCE_COLOR = '0';
    }
    // Find all constructs for which the props interface
    // (transitively) only consists of JSON primitives or interfaces
    // that consist of JSON primitives
    const constructType = typeSystem.findClass('constructs.Construct');
    const constructs = typeSystem.classes.filter(c => c.extends(constructType));
    const deconstructs = constructs
        .map(unpackConstruct)
        .filter(c => c && !isCfnResource(c.constructClass));
    const output = require('../cloudformation.schema.json');
    output.definitions = output.definitions || {};
    const ctx = jsii2schema_1.SchemaContext.root(output.definitions);
    for (const deco of deconstructs) {
        const resource = schemaForResource(deco, ctx);
        if (resource) {
            output.properties.Resources.patternProperties["^[a-zA-Z0-9]+$"].anyOf.push(resource);
        }
    }
    output.properties.$schema = {
        type: 'string'
    };
    if (options.warnings) {
        printWarnings(ctx);
    }
    return output;
}
exports.renderFullSchema = renderFullSchema;
function printWarnings(node, indent = '') {
    if (!node.hasWarningsOrErrors) {
        return;
    }
    console.error(indent + node.name);
    for (const warning of node.warnings) {
        console.error(chalk.yellow(indent + '  ' + warning));
    }
    for (const error of node.errors) {
        console.error(chalk.red(indent + '  ' + error));
    }
    if (!node.root) {
        indent += '  ';
    }
    for (const child of node.children) {
        printWarnings(child, indent);
    }
}
function schemaForResource(construct, ctx) {
    ctx = ctx.child('resource', construct.constructClass.fqn);
    const propsSchema = jsii2schema_1.schemaForTypeReference(construct.propsTypeRef, ctx);
    if (!propsSchema) {
        return undefined;
    }
    return ctx.define(construct.constructClass.fqn, () => {
        return {
            additionalProperties: false,
            properties: {
                Properties: propsSchema,
                Type: {
                    enum: [construct.constructClass.fqn],
                    type: "string"
                }
            }
        };
    });
}
exports.schemaForResource = schemaForResource;
function isCfnResource(klass) {
    const resource = klass.system.findClass('@aws-cdk/core.CfnResource');
    return klass.extends(resource);
}
function unpackConstruct(klass) {
    if (!klass.initializer || klass.abstract) {
        return undefined;
    }
    if (klass.initializer.parameters.length < 3) {
        return undefined;
    }
    const propsParam = klass.initializer.parameters[2];
    if (propsParam.type.fqn === undefined) {
        return undefined;
    }
    return {
        constructClass: klass,
        propsTypeRef: klass.initializer.parameters[2].type
    };
}
//# sourceMappingURL=data:application/json;base64,