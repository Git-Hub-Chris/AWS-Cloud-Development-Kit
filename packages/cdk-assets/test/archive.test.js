"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const crypto = require("crypto");
const fs_1 = require("fs");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const jszip = require("jszip");
const archive_1 = require("../lib/private/archive");
const fs_extra_1 = require("../lib/private/fs-extra");
const exec = (0, util_1.promisify)(child_process_1.exec);
const pathExists = (0, util_1.promisify)(fs_1.exists);
function logger(x) {
    // eslint-disable-next-line no-console
    console.log(x);
}
test('zipDirectory can take a directory and produce a zip from it', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const extractDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive.extract'));
    try {
        const zipFile = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        await (0, archive_1.zipDirectory)(originalDir, zipFile, logger);
        // unzip and verify that the resulting tree is the same
        await exec(`unzip ${zipFile}`, { cwd: extractDir });
        await expect(exec(`diff -bur ${originalDir} ${extractDir}`)).resolves.toBeTruthy();
        // inspect the zip file to check that dates are reset
        const zip = await fs_1.promises.readFile(zipFile);
        const zipData = await jszip.loadAsync(zip);
        const dates = Object.values(zipData.files).map(file => file.date.toISOString());
        expect(dates[0]).toBe('1980-01-01T00:00:00.000Z');
        expect(new Set(dates).size).toBe(1);
        // check that mode is preserved
        const stat = await fs_1.promises.stat(path.join(extractDir, 'executable.txt'));
        // eslint-disable-next-line no-bitwise
        const isExec = (stat.mode & fs_1.constants.S_IXUSR) || (stat.mode & fs_1.constants.S_IXGRP) || (stat.mode & fs_1.constants.S_IXOTH);
        expect(isExec).toBeTruthy();
    }
    finally {
        (0, fs_extra_1.rmRfSync)(stagingDir);
        (0, fs_extra_1.rmRfSync)(extractDir);
    }
});
test('md5 hash of a zip stays consistent across invocations', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const zipFile1 = path.join(stagingDir, 'output.zip');
    const zipFile2 = path.join(stagingDir, 'output.zip');
    const originalDir = path.join(__dirname, 'test-archive');
    await (0, archive_1.zipDirectory)(originalDir, zipFile1, logger);
    await new Promise(ok => setTimeout(ok, 2000)); // wait 2s
    await (0, archive_1.zipDirectory)(originalDir, zipFile2, logger);
    const hash1 = contentHash(await fs_1.promises.readFile(zipFile1));
    const hash2 = contentHash(await fs_1.promises.readFile(zipFile2));
    expect(hash1).toEqual(hash2);
});
test('zipDirectory follows symlinks', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const extractDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive.follow'));
    try {
        // First MAKE the symlink we're going to follow. We can't check it into git, because
        // CodeBuild/CodePipeline (I forget which) is going to replace symlinks with a textual
        // representation of its target upon checkout, for security reasons. So, to make sure
        // the symlink exists, we need to create it at build time.
        const symlinkPath = path.join(__dirname, 'test-archive-follow', 'data', 'linked');
        const symlinkTarget = '../linked';
        if (await pathExists(symlinkPath)) {
            await fs_1.promises.unlink(symlinkPath);
        }
        await fs_1.promises.symlink(symlinkTarget, symlinkPath, 'dir');
        const originalDir = path.join(__dirname, 'test-archive-follow', 'data');
        const zipFile = path.join(stagingDir, 'output.zip');
        await expect((0, archive_1.zipDirectory)(originalDir, zipFile, logger)).resolves.toBeUndefined();
        await expect(exec(`unzip ${zipFile}`, { cwd: extractDir })).resolves.toBeDefined();
        await expect(exec(`diff -bur ${originalDir} ${extractDir}`)).resolves.toBeDefined();
    }
    finally {
        (0, fs_extra_1.rmRfSync)(stagingDir);
        (0, fs_extra_1.rmRfSync)(extractDir);
    }
});
function contentHash(data) {
    return crypto.createHash('sha256').update(data).digest('hex');
}
//# sourceMappingURL=data:application/json;base64,