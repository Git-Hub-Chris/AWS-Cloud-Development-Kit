"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockUpload = exports.mockedApiFailure = exports.mockedApiResult = exports.errorWithCode = exports.mockAws = void 0;
jest.mock('aws-sdk');
const AWS = require("aws-sdk");
function mockAws() {
    const mockEcr = new AWS.ECR();
    const mockS3 = new AWS.S3();
    const mockSecretsManager = new AWS.SecretsManager();
    // Sane defaults which can be overridden
    mockS3.getBucketLocation = mockedApiResult({});
    mockS3.getBucketEncryption = mockedApiResult({});
    mockEcr.describeRepositories = mockedApiResult({
        repositories: [
            {
                repositoryUri: '12345.amazonaws.com/repo',
            },
        ],
    });
    mockSecretsManager.getSecretValue = mockedApiFailure('NotImplemented', 'You need to supply an implementation for getSecretValue');
    return {
        mockEcr,
        mockS3,
        mockSecretsManager,
        discoverPartition: jest.fn(() => Promise.resolve('swa')),
        discoverCurrentAccount: jest.fn(() => Promise.resolve({ accountId: 'current_account', partition: 'swa' })),
        discoverDefaultRegion: jest.fn(() => Promise.resolve('current_region')),
        discoverTargetAccount: jest.fn(() => Promise.resolve({ accountId: 'target_account', partition: 'swa' })),
        ecrClient: jest.fn(() => Promise.resolve(mockEcr)),
        s3Client: jest.fn(() => Promise.resolve(mockS3)),
        secretsManagerClient: jest.fn(() => Promise.resolve(mockSecretsManager)),
    };
}
exports.mockAws = mockAws;
function errorWithCode(code, message) {
    const ret = new Error(message);
    ret.code = code;
    return ret;
}
exports.errorWithCode = errorWithCode;
function mockedApiResult(returnValue) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue(returnValue),
    });
}
exports.mockedApiResult = mockedApiResult;
function mockedApiFailure(code, message) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockRejectedValue(errorWithCode(code, message)),
    });
}
exports.mockedApiFailure = mockedApiFailure;
/**
 * Mock upload, draining the stream that we get before returning
 * so no race conditions happen with the uninstallation of mock-fs.
 */
function mockUpload(expectContent) {
    return jest.fn().mockImplementation(request => ({
        promise: () => new Promise((ok, ko) => {
            const didRead = new Array();
            const bodyStream = request.Body;
            bodyStream.on('data', (chunk) => { didRead.push(chunk.toString()); }); // This listener must exist
            bodyStream.on('error', ko);
            bodyStream.on('close', () => {
                const actualContent = didRead.join('');
                if (expectContent !== undefined && expectContent !== actualContent) {
                    throw new Error(`Expected to read '${expectContent}' but read: '${actualContent}'`);
                }
                ok();
            });
        }),
    }));
}
exports.mockUpload = mockUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hd3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2NrLWF3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JCLCtCQUErQjtBQUUvQixTQUFnQixPQUFPO0lBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzVCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7SUFFcEQsd0NBQXdDO0lBQ3hDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0MsTUFBTSxDQUFDLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLENBQUMsb0JBQW9CLEdBQUcsZUFBZSxDQUFDO1FBQzdDLFlBQVksRUFBRTtZQUNaO2dCQUNFLGFBQWEsRUFBRSwwQkFBMEI7YUFDMUM7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUNILGtCQUFrQixDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSx5REFBeUQsQ0FBQyxDQUFDO0lBRWxJLE9BQU87UUFDTCxPQUFPO1FBQ1AsTUFBTTtRQUNOLGtCQUFrQjtRQUNsQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEQsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFHLHFCQUFxQixFQUFF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Q0FBQztLQUNILENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQWpCRCxnQ0FpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ2F3cy1zZGsnKTtcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tBd3MoKSB7XG4gIGNvbnN0IG1vY2tFY3IgPSBuZXcgQVdTLkVDUigpO1xuICBjb25zdCBtb2NrUzMgPSBuZXcgQVdTLlMzKCk7XG4gIGNvbnN0IG1vY2tTZWNyZXRzTWFuYWdlciA9IG5ldyBBV1MuU2VjcmV0c01hbmFnZXIoKTtcblxuICAvLyBTYW5lIGRlZmF1bHRzIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuXG4gIG1vY2tTMy5nZXRCdWNrZXRMb2NhdGlvbiA9IG1vY2tlZEFwaVJlc3VsdCh7fSk7XG4gIG1vY2tTMy5nZXRCdWNrZXRFbmNyeXB0aW9uID0gbW9ja2VkQXBpUmVzdWx0KHt9KTtcbiAgbW9ja0Vjci5kZXNjcmliZVJlcG9zaXRvcmllcyA9IG1vY2tlZEFwaVJlc3VsdCh7XG4gICAgcmVwb3NpdG9yaWVzOiBbXG4gICAgICB7XG4gICAgICAgIHJlcG9zaXRvcnlVcmk6ICcxMjM0NS5hbWF6b25hd3MuY29tL3JlcG8nLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbiAgbW9ja1NlY3JldHNNYW5hZ2VyLmdldFNlY3JldFZhbHVlID0gbW9ja2VkQXBpRmFpbHVyZSgnTm90SW1wbGVtZW50ZWQnLCAnWW91IG5lZWQgdG8gc3VwcGx5IGFuIGltcGxlbWVudGF0aW9uIGZvciBnZXRTZWNyZXRWYWx1ZScpO1xuXG4gIHJldHVybiB7XG4gICAgbW9ja0VjcixcbiAgICBtb2NrUzMsXG4gICAgbW9ja1NlY3JldHNNYW5hZ2VyLFxuICAgIGRpc2NvdmVyUGFydGl0aW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnc3dhJykpLFxuICAgIGRpc2NvdmVyQ3VycmVudEFjY291bnQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgYWNjb3VudElkOiAnY3VycmVudF9hY2NvdW50JywgcGFydGl0aW9uOiAnc3dhJyB9KSksXG4gICAgZGlzY292ZXJEZWZhdWx0UmVnaW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnY3VycmVudF9yZWdpb24nKSksXG4gICAgZGlzY292ZXJUYXJnZXRBY2NvdW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGFjY291bnRJZDogJ3RhcmdldF9hY2NvdW50JywgcGFydGl0aW9uOiAnc3dhJyB9KSksXG4gICAgZWNyQ2xpZW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrRWNyKSksXG4gICAgczNDbGllbnQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG1vY2tTMykpLFxuICAgIHNlY3JldHNNYW5hZ2VyQ2xpZW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrU2VjcmV0c01hbmFnZXIpKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yV2l0aENvZGUoY29kZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgY29uc3QgcmV0ID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAocmV0IGFzIGFueSkuY29kZSA9IGNvZGU7XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrZWRBcGlSZXN1bHQocmV0dXJuVmFsdWU6IGFueSkge1xuICByZXR1cm4gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgcHJvbWlzZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHJldHVyblZhbHVlKSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrZWRBcGlGYWlsdXJlKGNvZGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICBwcm9taXNlOiBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUoZXJyb3JXaXRoQ29kZShjb2RlLCBtZXNzYWdlKSksXG4gIH0pO1xufVxuXG4vKipcbiAqIE1vY2sgdXBsb2FkLCBkcmFpbmluZyB0aGUgc3RyZWFtIHRoYXQgd2UgZ2V0IGJlZm9yZSByZXR1cm5pbmdcbiAqIHNvIG5vIHJhY2UgY29uZGl0aW9ucyBoYXBwZW4gd2l0aCB0aGUgdW5pbnN0YWxsYXRpb24gb2YgbW9jay1mcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vY2tVcGxvYWQoZXhwZWN0Q29udGVudD86IHN0cmluZykge1xuICByZXR1cm4gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihyZXF1ZXN0ID0+ICh7XG4gICAgcHJvbWlzZTogKCkgPT4gbmV3IFByb21pc2U8dm9pZD4oKG9rLCBrbykgPT4ge1xuICAgICAgY29uc3QgZGlkUmVhZCA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XG5cbiAgICAgIGNvbnN0IGJvZHlTdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSA9IHJlcXVlc3QuQm9keTtcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmspID0+IHsgZGlkUmVhZC5wdXNoKGNodW5rLnRvU3RyaW5nKCkpOyB9KTsgLy8gVGhpcyBsaXN0ZW5lciBtdXN0IGV4aXN0XG4gICAgICBib2R5U3RyZWFtLm9uKCdlcnJvcicsIGtvKTtcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxDb250ZW50ID0gZGlkUmVhZC5qb2luKCcnKTtcbiAgICAgICAgaWYgKGV4cGVjdENvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiBleHBlY3RDb250ZW50ICE9PSBhY3R1YWxDb250ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB0byByZWFkICcke2V4cGVjdENvbnRlbnR9JyBidXQgcmVhZDogJyR7YWN0dWFsQ29udGVudH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgb2soKTtcbiAgICAgIH0pO1xuICAgIH0pLFxuICB9KSk7XG59XG4iXX0=