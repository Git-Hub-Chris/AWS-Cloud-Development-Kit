#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const aws_elasticloadbalancingv2_1 = require("@aws-cdk/aws-elasticloadbalancingv2");
const cdk = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const autoscaling = require("../lib");
class ElbV2AsgStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new ec2.Vpc(this, 'VPC', {
            maxAzs: 2,
        });
        const asg = new autoscaling.AutoScalingGroup(this, 'Fleet', {
            vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),
            machineImage: new ec2.AmazonLinuxImage(),
        });
        const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {
            vpc,
            internetFacing: true,
        });
        const listener = lb.addListener('Listener', {
            port: 80,
        });
        listener.addTargets('Target', {
            port: 80,
            targets: [asg],
        });
        listener.connections.allowDefaultPortFromAnyIpv4('Open to the world');
        asg.scaleOnRequestCount('AModestLoad', {
            targetRequestsPerSecond: 1,
        });
    }
}
class ElbV2AsgAtgStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new ec2.Vpc(this, 'VPC', {
            maxAzs: 2,
        });
        const alb = new elbv2.ApplicationLoadBalancer(this, 'alb', {
            vpc,
            internetFacing: true,
        });
        const listener = alb.addListener('Listener', {
            port: 80,
            open: true,
        });
        const asg = new autoscaling.AutoScalingGroup(this, 'Asg', {
            vpc,
            instanceType: new ec2.InstanceType('t3.micro'),
            machineImage: new ec2.AmazonLinuxImage(),
        });
        const atg1 = new elbv2.ApplicationTargetGroup(this, 'ATG1', {
            port: 443,
            vpc,
        });
        const atg2 = new elbv2.ApplicationTargetGroup(this, 'ATG2', {
            port: 443,
            vpc,
        });
        listener.addAction('tgs', {
            action: aws_elasticloadbalancingv2_1.ListenerAction.weightedForward([
                { targetGroup: atg1, weight: 1 },
                { targetGroup: atg2, weight: 1 },
            ]),
        });
        asg.attachToApplicationTargetGroup(atg1);
        asg.attachToApplicationTargetGroup(atg2);
    }
}
const app = new cdk.App();
new integ.IntegTest(app, 'LambdaTest', {
    testCases: [
        new ElbV2AsgStack(app, 'aws-cdk-asg-integ'),
        new ElbV2AsgAtgStack(app, 'aws-cdk-asg-atg-integ'),
    ],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXNnLXctZWxidjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5hc2ctdy1lbGJ2Mi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFDeEMsNkRBQTZEO0FBQzdELG9GQUFxRTtBQUNyRSxxQ0FBcUM7QUFDckMsOENBQThDO0FBRTlDLHNDQUFzQztBQUV0QyxNQUFNLGFBQWMsU0FBUSxHQUFHLENBQUMsS0FBSztJQUNuQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ25DLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUMxRCxHQUFHO1lBQ0gsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUMvQixHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFDNUIsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQ3ZCO1lBQ0QsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixFQUFFO1NBQ3pDLENBQUMsQ0FBQztRQUVILE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7WUFDdkQsR0FBRztZQUNILGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFO1lBQzFDLElBQUksRUFBRSxFQUFFO1NBQ1QsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxFQUFFLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUM7U0FDZixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFdEUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRTtZQUNyQyx1QkFBdUIsRUFBRSxDQUFDO1NBQzNCLENBQUMsQ0FBQztLQUNKO0NBQ0Y7QUFFRCxNQUFNLGdCQUFpQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ3RDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFDbkMsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ3pELEdBQUc7WUFDSCxjQUFjLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtZQUMzQyxJQUFJLEVBQUUsRUFBRTtZQUNSLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUN4RCxHQUFHO1lBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7WUFDOUMsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixFQUFFO1NBQ3pDLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7WUFDMUQsSUFBSSxFQUFFLEdBQUc7WUFDVCxHQUFHO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUMxRCxJQUFJLEVBQUUsR0FBRztZQUNULEdBQUc7U0FDSixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRTtZQUN4QixNQUFNLEVBQUUsMkNBQWMsQ0FBQyxlQUFlLENBQUM7Z0JBQ3JDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUNoQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTthQUNqQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsR0FBRyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQztDQUNGO0FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUU7SUFDckMsU0FBUyxFQUFFO1FBQ1QsSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDO1FBQzNDLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDO0tBQ25EO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnQGF3cy1jZGsvYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgTGlzdGVuZXJBY3Rpb24gfSBmcm9tICdAYXdzLWNkay9hd3MtZWxhc3RpY2xvYWRiYWxhbmNpbmd2Mic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGF1dG9zY2FsaW5nIGZyb20gJy4uL2xpYic7XG5cbmNsYXNzIEVsYlYyQXNnU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyh0aGlzLCAnVlBDJywge1xuICAgICAgbWF4QXpzOiAyLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYXNnID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAodGhpcywgJ0ZsZWV0Jywge1xuICAgICAgdnBjLFxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKFxuICAgICAgICBlYzIuSW5zdGFuY2VDbGFzcy5CVVJTVEFCTEUyLFxuICAgICAgICBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPLFxuICAgICAgKSxcbiAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgfSk7XG5cbiAgICBjb25zdCBsYiA9IG5ldyBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcih0aGlzLCAnTEInLCB7XG4gICAgICB2cGMsXG4gICAgICBpbnRlcm5ldEZhY2luZzogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3RlbmVyID0gbGIuYWRkTGlzdGVuZXIoJ0xpc3RlbmVyJywge1xuICAgICAgcG9ydDogODAsXG4gICAgfSk7XG5cbiAgICBsaXN0ZW5lci5hZGRUYXJnZXRzKCdUYXJnZXQnLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIHRhcmdldHM6IFthc2ddLFxuICAgIH0pO1xuXG4gICAgbGlzdGVuZXIuY29ubmVjdGlvbnMuYWxsb3dEZWZhdWx0UG9ydEZyb21BbnlJcHY0KCdPcGVuIHRvIHRoZSB3b3JsZCcpO1xuXG4gICAgYXNnLnNjYWxlT25SZXF1ZXN0Q291bnQoJ0FNb2Rlc3RMb2FkJywge1xuICAgICAgdGFyZ2V0UmVxdWVzdHNQZXJTZWNvbmQ6IDEsXG4gICAgfSk7XG4gIH1cbn1cblxuY2xhc3MgRWxiVjJBc2dBdGdTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyh0aGlzLCAnVlBDJywge1xuICAgICAgbWF4QXpzOiAyLFxuICAgIH0pO1xuICAgIGNvbnN0IGFsYiA9IG5ldyBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcih0aGlzLCAnYWxiJywge1xuICAgICAgdnBjLFxuICAgICAgaW50ZXJuZXRGYWNpbmc6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBhbGIuYWRkTGlzdGVuZXIoJ0xpc3RlbmVyJywge1xuICAgICAgcG9ydDogODAsXG4gICAgICBvcGVuOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYXNnID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAodGhpcywgJ0FzZycsIHtcbiAgICAgIHZwYyxcbiAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGUoJ3QzLm1pY3JvJyksXG4gICAgICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYXRnMSA9IG5ldyBlbGJ2Mi5BcHBsaWNhdGlvblRhcmdldEdyb3VwKHRoaXMsICdBVEcxJywge1xuICAgICAgcG9ydDogNDQzLFxuICAgICAgdnBjLFxuICAgIH0pO1xuICAgIGNvbnN0IGF0ZzIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25UYXJnZXRHcm91cCh0aGlzLCAnQVRHMicsIHtcbiAgICAgIHBvcnQ6IDQ0MyxcbiAgICAgIHZwYyxcbiAgICB9KTtcblxuICAgIGxpc3RlbmVyLmFkZEFjdGlvbigndGdzJywge1xuICAgICAgYWN0aW9uOiBMaXN0ZW5lckFjdGlvbi53ZWlnaHRlZEZvcndhcmQoW1xuICAgICAgICB7IHRhcmdldEdyb3VwOiBhdGcxLCB3ZWlnaHQ6IDEgfSxcbiAgICAgICAgeyB0YXJnZXRHcm91cDogYXRnMiwgd2VpZ2h0OiAxIH0sXG4gICAgICBdKSxcbiAgICB9KTtcblxuICAgIGFzZy5hdHRhY2hUb0FwcGxpY2F0aW9uVGFyZ2V0R3JvdXAoYXRnMSk7XG4gICAgYXNnLmF0dGFjaFRvQXBwbGljYXRpb25UYXJnZXRHcm91cChhdGcyKTtcbiAgfVxufVxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdMYW1iZGFUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtcbiAgICBuZXcgRWxiVjJBc2dTdGFjayhhcHAsICdhd3MtY2RrLWFzZy1pbnRlZycpLFxuICAgIG5ldyBFbGJWMkFzZ0F0Z1N0YWNrKGFwcCwgJ2F3cy1jZGstYXNnLWF0Zy1pbnRlZycpLFxuICBdLFxufSk7XG4iXX0=