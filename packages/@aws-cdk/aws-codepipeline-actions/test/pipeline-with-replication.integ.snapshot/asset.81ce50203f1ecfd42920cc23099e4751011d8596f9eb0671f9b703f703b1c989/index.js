"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
/*eslint-disable no-console*/
/* eslint-disable import/no-extraneous-dependencies */
const aws_sdk_1 = require("aws-sdk");
const SSM_EXPORT_PATH = '/cdk/exports/';
async function handler(event) {
    const props = event.ResourceProperties;
    const exports = props.Exports;
    const ssm = new aws_sdk_1.SSM({ region: props.Region });
    try {
        switch (event.RequestType) {
            case 'Create':
                console.info(`Creating new SSM Parameter exports in region ${props.Region}`);
                await putParameters(ssm, exports);
                return;
            case 'Update':
                console.info(`Reading existing SSM Parameter exports in region ${props.Region}`);
                const existing = await getExistingParameters(ssm);
                const paramsToDelete = returnMissing(existing, exports);
                console.info(`Deleting unused SSM Parameter exports in region ${props.Region}`);
                if (paramsToDelete.length > 0) {
                    await ssm.deleteParameters({
                        Names: paramsToDelete,
                    }).promise();
                }
                console.info(`Creating new SSM Parameter exports in region ${props.Region}`);
                await putParameters(ssm, exports);
                return;
            case 'Delete':
                console.info(`Reading existing SSM Parameter exports in region ${props.Region}`);
                const existingParams = await getExistingParameters(ssm);
                console.info(`Deleting all SSM Parameter exports in region ${props.Region}`);
                await ssm.deleteParameters({
                    Names: Array.from(Object.keys(existingParams)),
                }).promise();
                return;
            default:
                return;
        }
    }
    catch (e) {
        console.error('Error processing event: ', e);
        throw e;
    }
}
exports.handler = handler;
;
/**
 * Create parameters for existing exports
 */
async function putParameters(ssm, parameters) {
    await Promise.all(Array.from(Object.entries(parameters), ([name, value]) => {
        return ssm.putParameter({
            Name: `${SSM_EXPORT_PATH}${name}`,
            Value: value,
            Type: 'String',
        }).promise();
    }));
}
function returnMissing(a, b) {
    const missing = [];
    for (const name of Object.keys(a)) {
        if (!b.hasOwnProperty(name)) {
            missing.push(name);
        }
    }
    return missing;
}
/**
 * Get existing exports from SSM parameters
 */
async function getExistingParameters(ssm) {
    const existingExports = {};
    function recordParameters(parameters) {
        parameters.forEach(param => {
            if (param.Name && param.Value) {
                existingExports[param.Name] = param.Value;
            }
        });
    }
    const res = await ssm.getParametersByPath({
        Path: `${SSM_EXPORT_PATH}`,
    }).promise();
    recordParameters(res.Parameters ?? []);
    while (res.NextToken) {
        const nextRes = await ssm.getParametersByPath({
            Path: `${SSM_EXPORT_PATH}`,
            NextToken: res.NextToken,
        }).promise();
        recordParameters(nextRes.Parameters ?? []);
        res.NextToken = nextRes.NextToken;
    }
    return existingExports;
}
//# sourceMappingURL=data:application/json;base64,