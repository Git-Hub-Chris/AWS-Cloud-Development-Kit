"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const synthetics = require("../lib");
test('.metricXxx() methods can be used to obtain Metrics for the canary', () => {
    // GIVEN
    const stack = new aws_cdk_lib_1.Stack(new aws_cdk_lib_1.App(), 'canaries');
    const canary = new synthetics.Canary(stack, 'mycanary', {
        test: synthetics.Test.custom({
            handler: 'index.handler',
            code: synthetics.Code.fromInline('foo'),
        }),
        runtime: synthetics.Runtime.SYNTHETICS_NODEJS_PUPPETEER_3_8,
    });
    // WHEN
    const metricSuccess = canary.metricSuccessPercent();
    const metricFailed = canary.metricFailed();
    const metricDuration = canary.metricDuration();
    // THEN
    expect(metricSuccess).toEqual(expect.objectContaining({
        dimensions: { CanaryName: canary.canaryName },
        namespace: 'CloudWatchSynthetics',
        metricName: 'SuccessPercent',
        statistic: 'Average',
    }));
    expect(metricFailed).toEqual(expect.objectContaining({
        dimensions: { CanaryName: canary.canaryName },
        namespace: 'CloudWatchSynthetics',
        metricName: 'Failed',
        statistic: 'Sum',
    }));
    expect(metricDuration).toEqual(expect.objectContaining({
        dimensions: { CanaryName: canary.canaryName },
        namespace: 'CloudWatchSynthetics',
        metricName: 'Duration',
        statistic: 'Average',
    }));
});
test('Metric can specify statistic', () => {
    // GIVEN
    const stack = new aws_cdk_lib_1.Stack(new aws_cdk_lib_1.App(), 'canaries');
    const canary = new synthetics.Canary(stack, 'mycanary', {
        test: synthetics.Test.custom({
            handler: 'index.handler',
            code: synthetics.Code.fromInline('foo'),
        }),
        runtime: synthetics.Runtime.SYNTHETICS_NODEJS_PUPPETEER_3_8,
    });
    // WHEN
    const metric = canary.metricFailed({ statistic: 'Sum' });
    // THEN
    expect(metric).toEqual(expect.objectContaining({
        dimensions: { CanaryName: canary.canaryName },
        namespace: 'CloudWatchSynthetics',
        metricName: 'Failed',
        statistic: 'Sum',
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXRyaWMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF5QztBQUN6QyxxQ0FBcUM7QUFFckMsSUFBSSxDQUFDLG1FQUFtRSxFQUFFLEdBQUcsRUFBRTtJQUM3RSxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxDQUFDLElBQUksaUJBQUcsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRS9DLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ3RELElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMzQixPQUFPLEVBQUUsZUFBZTtZQUN4QixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1NBQ3hDLENBQUM7UUFDRixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQywrQkFBK0I7S0FDNUQsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3BELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQyxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7SUFFL0MsT0FBTztJQUNQLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQ3BELFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzdDLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsVUFBVSxFQUFFLGdCQUFnQjtRQUM1QixTQUFTLEVBQUUsU0FBUztLQUNyQixDQUFDLENBQUMsQ0FBQztJQUVKLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQ25ELFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQzdDLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsVUFBVSxFQUFFLFFBQVE7UUFDcEIsU0FBUyxFQUFFLEtBQUs7S0FDakIsQ0FBQyxDQUFDLENBQUM7SUFFSixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNyRCxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUM3QyxTQUFTLEVBQUUsc0JBQXNCO1FBQ2pDLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFNBQVMsRUFBRSxTQUFTO0tBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLFFBQVE7SUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLG1CQUFLLENBQUMsSUFBSSxpQkFBRyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7UUFDdEQsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNCLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7U0FDeEMsQ0FBQztRQUNGLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLCtCQUErQjtLQUM1RCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXpELE9BQU87SUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QyxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUM3QyxTQUFTLEVBQUUsc0JBQXNCO1FBQ2pDLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFNBQVMsRUFBRSxLQUFLO0tBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgc3ludGhldGljcyBmcm9tICcuLi9saWInO1xuXG50ZXN0KCcubWV0cmljWHh4KCkgbWV0aG9kcyBjYW4gYmUgdXNlZCB0byBvYnRhaW4gTWV0cmljcyBmb3IgdGhlIGNhbmFyeScsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2sobmV3IEFwcCgpLCAnY2FuYXJpZXMnKTtcblxuICBjb25zdCBjYW5hcnkgPSBuZXcgc3ludGhldGljcy5DYW5hcnkoc3RhY2ssICdteWNhbmFyeScsIHtcbiAgICB0ZXN0OiBzeW50aGV0aWNzLlRlc3QuY3VzdG9tKHtcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIGNvZGU6IHN5bnRoZXRpY3MuQ29kZS5mcm9tSW5saW5lKCdmb28nKSxcbiAgICB9KSxcbiAgICBydW50aW1lOiBzeW50aGV0aWNzLlJ1bnRpbWUuU1lOVEhFVElDU19OT0RFSlNfUFVQUEVURUVSXzNfOCxcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBtZXRyaWNTdWNjZXNzID0gY2FuYXJ5Lm1ldHJpY1N1Y2Nlc3NQZXJjZW50KCk7XG4gIGNvbnN0IG1ldHJpY0ZhaWxlZCA9IGNhbmFyeS5tZXRyaWNGYWlsZWQoKTtcbiAgY29uc3QgbWV0cmljRHVyYXRpb24gPSBjYW5hcnkubWV0cmljRHVyYXRpb24oKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChtZXRyaWNTdWNjZXNzKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBkaW1lbnNpb25zOiB7IENhbmFyeU5hbWU6IGNhbmFyeS5jYW5hcnlOYW1lIH0sXG4gICAgbmFtZXNwYWNlOiAnQ2xvdWRXYXRjaFN5bnRoZXRpY3MnLFxuICAgIG1ldHJpY05hbWU6ICdTdWNjZXNzUGVyY2VudCcsXG4gICAgc3RhdGlzdGljOiAnQXZlcmFnZScsXG4gIH0pKTtcblxuICBleHBlY3QobWV0cmljRmFpbGVkKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBkaW1lbnNpb25zOiB7IENhbmFyeU5hbWU6IGNhbmFyeS5jYW5hcnlOYW1lIH0sXG4gICAgbmFtZXNwYWNlOiAnQ2xvdWRXYXRjaFN5bnRoZXRpY3MnLFxuICAgIG1ldHJpY05hbWU6ICdGYWlsZWQnLFxuICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gIH0pKTtcblxuICBleHBlY3QobWV0cmljRHVyYXRpb24pLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIGRpbWVuc2lvbnM6IHsgQ2FuYXJ5TmFtZTogY2FuYXJ5LmNhbmFyeU5hbWUgfSxcbiAgICBuYW1lc3BhY2U6ICdDbG91ZFdhdGNoU3ludGhldGljcycsXG4gICAgbWV0cmljTmFtZTogJ0R1cmF0aW9uJyxcbiAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJyxcbiAgfSkpO1xufSk7XG5cbnRlc3QoJ01ldHJpYyBjYW4gc3BlY2lmeSBzdGF0aXN0aWMnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKG5ldyBBcHAoKSwgJ2NhbmFyaWVzJyk7XG5cbiAgY29uc3QgY2FuYXJ5ID0gbmV3IHN5bnRoZXRpY3MuQ2FuYXJ5KHN0YWNrLCAnbXljYW5hcnknLCB7XG4gICAgdGVzdDogc3ludGhldGljcy5UZXN0LmN1c3RvbSh7XG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICBjb2RlOiBzeW50aGV0aWNzLkNvZGUuZnJvbUlubGluZSgnZm9vJyksXG4gICAgfSksXG4gICAgcnVudGltZTogc3ludGhldGljcy5SdW50aW1lLlNZTlRIRVRJQ1NfTk9ERUpTX1BVUFBFVEVFUl8zXzgsXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgbWV0cmljID0gY2FuYXJ5Lm1ldHJpY0ZhaWxlZCh7IHN0YXRpc3RpYzogJ1N1bScgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QobWV0cmljKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBkaW1lbnNpb25zOiB7IENhbmFyeU5hbWU6IGNhbmFyeS5jYW5hcnlOYW1lIH0sXG4gICAgbmFtZXNwYWNlOiAnQ2xvdWRXYXRjaFN5bnRoZXRpY3MnLFxuICAgIG1ldHJpY05hbWU6ICdGYWlsZWQnLFxuICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gIH0pKTtcbn0pO1xuIl19