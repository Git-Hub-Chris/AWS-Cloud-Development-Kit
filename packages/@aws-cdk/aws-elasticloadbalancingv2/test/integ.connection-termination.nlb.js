#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/core");
const core_1 = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const elbv2 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-elbv2-integ');
const vpc = new ec2.Vpc(stack, 'VPC', {
    maxAzs: 2,
});
const lb = new elbv2.NetworkLoadBalancer(stack, 'LB', {
    vpc,
    internetFacing: true,
});
const targetGroup = new elbv2.NetworkTargetGroup(stack, 'TG', {
    vpc,
    port: 443,
    deregistrationDelay: core_1.Duration.seconds(5),
    connectionTermination: true,
});
lb.addListener('listener', {
    port: 443,
    defaultTargetGroups: [targetGroup],
});
targetGroup.node.addDependency(vpc.internetConnectivityEstablished);
// The target's security group must allow being routed by the LB and the clients.
new integ.IntegTest(app, 'targetGroupTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY29ubmVjdGlvbi10ZXJtaW5hdGlvbi5ubGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5jb25uZWN0aW9uLXRlcm1pbmF0aW9uLm5sYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLHdDQUF5QztBQUN6Qyw4Q0FBOEM7QUFDOUMsZ0NBQWdDO0FBR2hDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUV4RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtJQUNwQyxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUMsQ0FBQztBQUVILE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7SUFDcEQsR0FBRztJQUNILGNBQWMsRUFBRSxJQUFJO0NBRXJCLENBQUMsQ0FBQztBQUVILE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7SUFDNUQsR0FBRztJQUNILElBQUksRUFBRSxHQUFHO0lBQ1QsbUJBQW1CLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDeEMscUJBQXFCLEVBQUUsSUFBSTtDQUM1QixDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtJQUN6QixJQUFJLEVBQUUsR0FBRztJQUNULG1CQUFtQixFQUFFLENBQUMsV0FBVyxDQUFDO0NBQ25DLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBRXBFLGlGQUFpRjtBQUNqRixJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFO0lBQzFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMnO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnLi4vbGliJztcblxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstZWxidjItaW50ZWcnKTtcblxuY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWUEMnLCB7XG4gIG1heEF6czogMixcbn0pO1xuXG5jb25zdCBsYiA9IG5ldyBlbGJ2Mi5OZXR3b3JrTG9hZEJhbGFuY2VyKHN0YWNrLCAnTEInLCB7XG4gIHZwYyxcbiAgaW50ZXJuZXRGYWNpbmc6IHRydWUsXG5cbn0pO1xuXG5jb25zdCB0YXJnZXRHcm91cCA9IG5ldyBlbGJ2Mi5OZXR3b3JrVGFyZ2V0R3JvdXAoc3RhY2ssICdURycsIHtcbiAgdnBjLFxuICBwb3J0OiA0NDMsXG4gIGRlcmVnaXN0cmF0aW9uRGVsYXk6IER1cmF0aW9uLnNlY29uZHMoNSksXG4gIGNvbm5lY3Rpb25UZXJtaW5hdGlvbjogdHJ1ZSxcbn0pO1xuXG5sYi5hZGRMaXN0ZW5lcignbGlzdGVuZXInLCB7XG4gIHBvcnQ6IDQ0MyxcbiAgZGVmYXVsdFRhcmdldEdyb3VwczogW3RhcmdldEdyb3VwXSxcbn0pO1xuXG50YXJnZXRHcm91cC5ub2RlLmFkZERlcGVuZGVuY3kodnBjLmludGVybmV0Q29ubmVjdGl2aXR5RXN0YWJsaXNoZWQpO1xuXG4vLyBUaGUgdGFyZ2V0J3Mgc2VjdXJpdHkgZ3JvdXAgbXVzdCBhbGxvdyBiZWluZyByb3V0ZWQgYnkgdGhlIExCIGFuZCB0aGUgY2xpZW50cy5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAndGFyZ2V0R3JvdXBUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=