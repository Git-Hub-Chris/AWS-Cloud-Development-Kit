"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const aws_sdk_1 = require("aws-sdk");
const AUTO_DELETE_IMAGES_TAG = 'aws-cdk:auto-delete-images';
const ecr = new aws_sdk_1.ECR();
async function handler(event) {
    switch (event.RequestType) {
        case 'Create':
        case 'Update':
            return onUpdate(event);
        case 'Delete':
            return onDelete(event.ResourceProperties?.RepositoryName);
    }
}
exports.handler = handler;
async function onUpdate(event) {
    const updateEvent = event;
    const oldRepositoryName = updateEvent.OldResourceProperties?.RepositoryName;
    const newRepositoryName = updateEvent.ResourceProperties?.RepositoryName;
    const repositoryNameHasChanged = newRepositoryName != null && oldRepositoryName != null && newRepositoryName !== oldRepositoryName;
    /* If the name of the repository has changed, CloudFormation will try to delete the repository
       and create a new one with the new name. So we have to delete the images in the
       repository so that this operation does not fail. */
    if (repositoryNameHasChanged) {
        return onDelete(oldRepositoryName);
    }
}
/**
 * Recursively delete all images in the repository
 *
 * @param ECR.ListImagesRequest the repositoryName & nextToken if presented
 */
async function emptyRepository(params) {
    const listedImages = await ecr.listImages(params).promise();
    const imageIds = listedImages?.imageIds ?? [];
    const nextToken = listedImages.nextToken ?? null;
    if (imageIds.length === 0) {
        return;
    }
    await ecr.batchDeleteImage({
        repositoryName: params.repositoryName,
        imageIds,
    }).promise();
    if (nextToken) {
        await emptyRepository({
            ...params,
            nextToken,
        });
    }
}
async function onDelete(repositoryName) {
    if (!repositoryName) {
        throw new Error('No RepositoryName was provided.');
    }
    const response = await ecr.describeRepositories({ repositoryNames: [repositoryName] }).promise();
    const repository = response.repositories?.find(repo => repo.repositoryName === repositoryName);
    if (!await isRepositoryTaggedForDeletion(repository?.repositoryArn)) {
        process.stdout.write(`Repository does not have '${AUTO_DELETE_IMAGES_TAG}' tag, skipping cleaning.\n`);
        return;
    }
    try {
        await emptyRepository({ repositoryName });
    }
    catch (e) {
        if (e.name !== 'RepositoryNotFoundException') {
            throw e;
        }
        // Repository doesn't exist. Ignoring
    }
}
/**
 * The repository will only be tagged for deletion if it's being deleted in the same
 * deployment as this Custom Resource.
 *
 * If the Custom Resource is ever deleted before the repository, it must be because
 * `autoDeleteImages` has been switched to false, in which case the tag would have
 * been removed before we get to this Delete event.
 */
async function isRepositoryTaggedForDeletion(repositoryArn) {
    const response = await ecr.listTagsForResource({ resourceArn: repositoryArn }).promise();
    return response.tags?.some(tag => tag.Key === AUTO_DELETE_IMAGES_TAG && tag.Value === 'true');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0QscUNBQThCO0FBRTlCLE1BQU0sc0JBQXNCLEdBQUcsNEJBQTRCLENBQUM7QUFFNUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLEVBQUUsQ0FBQztBQUVmLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBa0Q7SUFDOUUsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFO1FBQ3pCLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0tBQzdEO0FBQ0gsQ0FBQztBQVJELDBCQVFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFrRDtJQUN4RSxNQUFNLFdBQVcsR0FBRyxLQUEwRCxDQUFDO0lBQy9FLE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLHFCQUFxQixFQUFFLGNBQWMsQ0FBQztJQUM1RSxNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLENBQUM7SUFDekUsTUFBTSx3QkFBd0IsR0FBRyxpQkFBaUIsSUFBSSxJQUFJLElBQUksaUJBQWlCLElBQUksSUFBSSxJQUFJLGlCQUFpQixLQUFLLGlCQUFpQixDQUFDO0lBRW5JOzswREFFc0Q7SUFDdEQsSUFBSSx3QkFBd0IsRUFBRTtRQUM1QixPQUFPLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3BDO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxLQUFLLFVBQVUsZUFBZSxDQUFDLE1BQTZCO0lBQzFELE1BQU0sWUFBWSxHQUFHLE1BQU0sR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUU1RCxNQUFNLFFBQVEsR0FBRyxZQUFZLEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztJQUM5QyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQztJQUNqRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE9BQU87S0FDUjtJQUVELE1BQU0sR0FBRyxDQUFDLGdCQUFnQixDQUFDO1FBQ3pCLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYztRQUNyQyxRQUFRO0tBQ1QsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRWIsSUFBSSxTQUFTLEVBQUU7UUFDYixNQUFNLGVBQWUsQ0FBQztZQUNwQixHQUFHLE1BQU07WUFDVCxTQUFTO1NBQ1YsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxjQUFzQjtJQUM1QyxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pHLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxjQUFjLENBQUMsQ0FBQztJQUUvRixJQUFJLENBQUMsTUFBTSw2QkFBNkIsQ0FBQyxVQUFVLEVBQUUsYUFBYyxDQUFDLEVBQUU7UUFDcEUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLHNCQUFzQiw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3ZHLE9BQU87S0FDUjtJQUNELElBQUk7UUFDRixNQUFNLGVBQWUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7S0FDM0M7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyw2QkFBNkIsRUFBRTtZQUM1QyxNQUFNLENBQUMsQ0FBQztTQUNUO1FBQ0QscUNBQXFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxLQUFLLFVBQVUsNkJBQTZCLENBQUMsYUFBcUI7SUFDaEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN6RixPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxzQkFBc0IsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQ2hHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBFQ1IgfSBmcm9tICdhd3Mtc2RrJztcblxuY29uc3QgQVVUT19ERUxFVEVfSU1BR0VTX1RBRyA9ICdhd3MtY2RrOmF1dG8tZGVsZXRlLWltYWdlcyc7XG5cbmNvbnN0IGVjciA9IG5ldyBFQ1IoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQpIHtcbiAgc3dpdGNoIChldmVudC5SZXF1ZXN0VHlwZSkge1xuICAgIGNhc2UgJ0NyZWF0ZSc6XG4gICAgY2FzZSAnVXBkYXRlJzpcbiAgICAgIHJldHVybiBvblVwZGF0ZShldmVudCk7XG4gICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgIHJldHVybiBvbkRlbGV0ZShldmVudC5SZXNvdXJjZVByb3BlcnRpZXM/LlJlcG9zaXRvcnlOYW1lKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBvblVwZGF0ZShldmVudDogQVdTTGFtYmRhLkNsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCkge1xuICBjb25zdCB1cGRhdGVFdmVudCA9IGV2ZW50IGFzIEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlVXBkYXRlRXZlbnQ7XG4gIGNvbnN0IG9sZFJlcG9zaXRvcnlOYW1lID0gdXBkYXRlRXZlbnQuT2xkUmVzb3VyY2VQcm9wZXJ0aWVzPy5SZXBvc2l0b3J5TmFtZTtcbiAgY29uc3QgbmV3UmVwb3NpdG9yeU5hbWUgPSB1cGRhdGVFdmVudC5SZXNvdXJjZVByb3BlcnRpZXM/LlJlcG9zaXRvcnlOYW1lO1xuICBjb25zdCByZXBvc2l0b3J5TmFtZUhhc0NoYW5nZWQgPSBuZXdSZXBvc2l0b3J5TmFtZSAhPSBudWxsICYmIG9sZFJlcG9zaXRvcnlOYW1lICE9IG51bGwgJiYgbmV3UmVwb3NpdG9yeU5hbWUgIT09IG9sZFJlcG9zaXRvcnlOYW1lO1xuXG4gIC8qIElmIHRoZSBuYW1lIG9mIHRoZSByZXBvc2l0b3J5IGhhcyBjaGFuZ2VkLCBDbG91ZEZvcm1hdGlvbiB3aWxsIHRyeSB0byBkZWxldGUgdGhlIHJlcG9zaXRvcnlcbiAgICAgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgd2l0aCB0aGUgbmV3IG5hbWUuIFNvIHdlIGhhdmUgdG8gZGVsZXRlIHRoZSBpbWFnZXMgaW4gdGhlXG4gICAgIHJlcG9zaXRvcnkgc28gdGhhdCB0aGlzIG9wZXJhdGlvbiBkb2VzIG5vdCBmYWlsLiAqL1xuICBpZiAocmVwb3NpdG9yeU5hbWVIYXNDaGFuZ2VkKSB7XG4gICAgcmV0dXJuIG9uRGVsZXRlKG9sZFJlcG9zaXRvcnlOYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGRlbGV0ZSBhbGwgaW1hZ2VzIGluIHRoZSByZXBvc2l0b3J5XG4gKlxuICogQHBhcmFtIEVDUi5MaXN0SW1hZ2VzUmVxdWVzdCB0aGUgcmVwb3NpdG9yeU5hbWUgJiBuZXh0VG9rZW4gaWYgcHJlc2VudGVkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVtcHR5UmVwb3NpdG9yeShwYXJhbXM6IEVDUi5MaXN0SW1hZ2VzUmVxdWVzdCkge1xuICBjb25zdCBsaXN0ZWRJbWFnZXMgPSBhd2FpdCBlY3IubGlzdEltYWdlcyhwYXJhbXMpLnByb21pc2UoKTtcblxuICBjb25zdCBpbWFnZUlkcyA9IGxpc3RlZEltYWdlcz8uaW1hZ2VJZHMgPz8gW107XG4gIGNvbnN0IG5leHRUb2tlbiA9IGxpc3RlZEltYWdlcy5uZXh0VG9rZW4gPz8gbnVsbDtcbiAgaWYgKGltYWdlSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGF3YWl0IGVjci5iYXRjaERlbGV0ZUltYWdlKHtcbiAgICByZXBvc2l0b3J5TmFtZTogcGFyYW1zLnJlcG9zaXRvcnlOYW1lLFxuICAgIGltYWdlSWRzLFxuICB9KS5wcm9taXNlKCk7XG5cbiAgaWYgKG5leHRUb2tlbikge1xuICAgIGF3YWl0IGVtcHR5UmVwb3NpdG9yeSh7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBuZXh0VG9rZW4sXG4gICAgfSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gb25EZWxldGUocmVwb3NpdG9yeU5hbWU6IHN0cmluZykge1xuICBpZiAoIXJlcG9zaXRvcnlOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBSZXBvc2l0b3J5TmFtZSB3YXMgcHJvdmlkZWQuJyk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGVjci5kZXNjcmliZVJlcG9zaXRvcmllcyh7IHJlcG9zaXRvcnlOYW1lczogW3JlcG9zaXRvcnlOYW1lXSB9KS5wcm9taXNlKCk7XG4gIGNvbnN0IHJlcG9zaXRvcnkgPSByZXNwb25zZS5yZXBvc2l0b3JpZXM/LmZpbmQocmVwbyA9PiByZXBvLnJlcG9zaXRvcnlOYW1lID09PSByZXBvc2l0b3J5TmFtZSk7XG5cbiAgaWYgKCFhd2FpdCBpc1JlcG9zaXRvcnlUYWdnZWRGb3JEZWxldGlvbihyZXBvc2l0b3J5Py5yZXBvc2l0b3J5QXJuISkpIHtcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShgUmVwb3NpdG9yeSBkb2VzIG5vdCBoYXZlICcke0FVVE9fREVMRVRFX0lNQUdFU19UQUd9JyB0YWcsIHNraXBwaW5nIGNsZWFuaW5nLlxcbmApO1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGVtcHR5UmVwb3NpdG9yeSh7IHJlcG9zaXRvcnlOYW1lIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUubmFtZSAhPT0gJ1JlcG9zaXRvcnlOb3RGb3VuZEV4Y2VwdGlvbicpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIC8vIFJlcG9zaXRvcnkgZG9lc24ndCBleGlzdC4gSWdub3JpbmdcbiAgfVxufVxuXG4vKipcbiAqIFRoZSByZXBvc2l0b3J5IHdpbGwgb25seSBiZSB0YWdnZWQgZm9yIGRlbGV0aW9uIGlmIGl0J3MgYmVpbmcgZGVsZXRlZCBpbiB0aGUgc2FtZVxuICogZGVwbG95bWVudCBhcyB0aGlzIEN1c3RvbSBSZXNvdXJjZS5cbiAqXG4gKiBJZiB0aGUgQ3VzdG9tIFJlc291cmNlIGlzIGV2ZXIgZGVsZXRlZCBiZWZvcmUgdGhlIHJlcG9zaXRvcnksIGl0IG11c3QgYmUgYmVjYXVzZVxuICogYGF1dG9EZWxldGVJbWFnZXNgIGhhcyBiZWVuIHN3aXRjaGVkIHRvIGZhbHNlLCBpbiB3aGljaCBjYXNlIHRoZSB0YWcgd291bGQgaGF2ZVxuICogYmVlbiByZW1vdmVkIGJlZm9yZSB3ZSBnZXQgdG8gdGhpcyBEZWxldGUgZXZlbnQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGlzUmVwb3NpdG9yeVRhZ2dlZEZvckRlbGV0aW9uKHJlcG9zaXRvcnlBcm46IHN0cmluZykge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGVjci5saXN0VGFnc0ZvclJlc291cmNlKHsgcmVzb3VyY2VBcm46IHJlcG9zaXRvcnlBcm4gfSkucHJvbWlzZSgpO1xuICByZXR1cm4gcmVzcG9uc2UudGFncz8uc29tZSh0YWcgPT4gdGFnLktleSA9PT0gQVVUT19ERUxFVEVfSU1BR0VTX1RBRyAmJiB0YWcuVmFsdWUgPT09ICd0cnVlJyk7XG59Il19