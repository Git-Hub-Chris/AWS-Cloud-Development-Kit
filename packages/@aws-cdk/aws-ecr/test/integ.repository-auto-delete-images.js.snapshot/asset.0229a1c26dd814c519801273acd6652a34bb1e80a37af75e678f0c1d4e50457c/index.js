"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const aws_sdk_1 = require("aws-sdk");
const AUTO_DELETE_IMAGES_TAG = 'aws-cdk:auto-delete-images';
const ecr = new aws_sdk_1.ECR();
async function handler(event) {
    switch (event.RequestType) {
        case 'Create':
        case 'Update':
            return onUpdate(event);
        case 'Delete':
            return onDelete(event.ResourceProperties?.RepositoryName, event.ResourceProperties?.RepositoryArn);
    }
}
exports.handler = handler;
async function onUpdate(event) {
    const updateEvent = event;
    const oldRepositoryName = updateEvent.OldResourceProperties?.RepositoryName;
    const newRepositoryName = updateEvent.ResourceProperties?.RepositoryName;
    const repositoryNameHasChanged = newRepositoryName != null && oldRepositoryName != null && newRepositoryName !== oldRepositoryName;
    /* If the name of the repository has changed, CloudFormation will try to delete the repository
       and create a new one with the new name. So we have to delete the images in the
       repository so that this operation does not fail. */
    if (repositoryNameHasChanged) {
        return onDelete(oldRepositoryName, updateEvent.OldResourceProperties?.RepositoryArn);
    }
}
/**
 * Recursively delete all images in the repository
 *
 * @param ECR.ListImagesRequest the repositoryName & nextToken if presented
 */
async function emptyRepository(params) {
    const listedImages = await ecr.listImages(params).promise();
    const imageIds = listedImages?.imageIds ?? [];
    const nextToken = listedImages.nextToken ?? null;
    if (imageIds.length === 0) {
        return;
    }
    await ecr.batchDeleteImage({
        repositoryName: params.repositoryName,
        imageIds,
    }).promise();
    if (nextToken) {
        await emptyRepository({
            ...params,
            nextToken,
        });
    }
}
async function onDelete(repositoryName, repositoryArn) {
    if (!repositoryName) {
        throw new Error('No RepositoryName was provided.');
    }
    if (!await isRepositoryTaggedForDeletion(repositoryArn)) {
        process.stdout.write(`Repository does not have '${AUTO_DELETE_IMAGES_TAG}' tag, skipping cleaning.\n`);
        return;
    }
    try {
        await emptyRepository({ repositoryName });
    }
    catch (e) {
        if (e.name !== 'RepositoryNotFoundException') {
            throw e;
        }
        // Repository doesn't exist. Ignoring
    }
}
/**
 * The repository will only be tagged for deletion if it's being deleted in the same
 * deployment as this Custom Resource.
 *
 * If the Custom Resource is ever deleted before the repository, it must be because
 * `autoDeleteImages` has been switched to false, in which case the tag would have
 * been removed before we get to this Delete event.
 */
async function isRepositoryTaggedForDeletion(repositoryArn) {
    const response = await ecr.listTagsForResource({ resourceArn: repositoryArn }).promise();
    return response.tags?.some(tag => tag.Key === AUTO_DELETE_IMAGES_TAG && tag.Value === 'true');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0QscUNBQThCO0FBRTlCLE1BQU0sc0JBQXNCLEdBQUcsNEJBQTRCLENBQUM7QUFFNUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLEVBQUUsQ0FBQztBQUVmLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBa0Q7SUFDOUUsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFO1FBQ3pCLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDdEc7QUFDSCxDQUFDO0FBUkQsMEJBUUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEtBQWtEO0lBQ3hFLE1BQU0sV0FBVyxHQUFHLEtBQTBELENBQUM7SUFDL0UsTUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDO0lBQzVFLE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQztJQUN6RSxNQUFNLHdCQUF3QixHQUFHLGlCQUFpQixJQUFJLElBQUksSUFBSSxpQkFBaUIsSUFBSSxJQUFJLElBQUksaUJBQWlCLEtBQUssaUJBQWlCLENBQUM7SUFFbkk7OzBEQUVzRDtJQUN0RCxJQUFJLHdCQUF3QixFQUFFO1FBQzVCLE9BQU8sUUFBUSxDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxhQUFhLENBQUMsQ0FBQztLQUN0RjtBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsS0FBSyxVQUFVLGVBQWUsQ0FBQyxNQUE2QjtJQUMxRCxNQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFNUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUM7SUFDOUMsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUM7SUFDakQsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixPQUFPO0tBQ1I7SUFFRCxNQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUN6QixjQUFjLEVBQUUsTUFBTSxDQUFDLGNBQWM7UUFDckMsUUFBUTtLQUNULENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUViLElBQUksU0FBUyxFQUFFO1FBQ2IsTUFBTSxlQUFlLENBQUM7WUFDcEIsR0FBRyxNQUFNO1lBQ1QsU0FBUztTQUNWLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxRQUFRLENBQUMsY0FBc0IsRUFBRSxhQUFxQjtJQUNuRSxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtJQUVELElBQUksQ0FBQyxNQUFNLDZCQUE2QixDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixzQkFBc0IsNkJBQTZCLENBQUMsQ0FBQztRQUN2RyxPQUFPO0tBQ1I7SUFDRCxJQUFJO1FBQ0YsTUFBTSxlQUFlLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0tBQzNDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssNkJBQTZCLEVBQUU7WUFDNUMsTUFBTSxDQUFDLENBQUM7U0FDVDtRQUNELHFDQUFxQztLQUN0QztBQUNILENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsS0FBSyxVQUFVLDZCQUE2QixDQUFDLGFBQXFCO0lBQ2hFLE1BQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekYsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssc0JBQXNCLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQztBQUNoRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgRUNSIH0gZnJvbSAnYXdzLXNkayc7XG5cbmNvbnN0IEFVVE9fREVMRVRFX0lNQUdFU19UQUcgPSAnYXdzLWNkazphdXRvLWRlbGV0ZS1pbWFnZXMnO1xuXG5jb25zdCBlY3IgPSBuZXcgRUNSKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50KSB7XG4gIHN3aXRjaCAoZXZlbnQuUmVxdWVzdFR5cGUpIHtcbiAgICBjYXNlICdDcmVhdGUnOlxuICAgIGNhc2UgJ1VwZGF0ZSc6XG4gICAgICByZXR1cm4gb25VcGRhdGUoZXZlbnQpO1xuICAgIGNhc2UgJ0RlbGV0ZSc6XG4gICAgICByZXR1cm4gb25EZWxldGUoZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzPy5SZXBvc2l0b3J5TmFtZSwgZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzPy5SZXBvc2l0b3J5QXJuKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBvblVwZGF0ZShldmVudDogQVdTTGFtYmRhLkNsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCkge1xuICBjb25zdCB1cGRhdGVFdmVudCA9IGV2ZW50IGFzIEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlVXBkYXRlRXZlbnQ7XG4gIGNvbnN0IG9sZFJlcG9zaXRvcnlOYW1lID0gdXBkYXRlRXZlbnQuT2xkUmVzb3VyY2VQcm9wZXJ0aWVzPy5SZXBvc2l0b3J5TmFtZTtcbiAgY29uc3QgbmV3UmVwb3NpdG9yeU5hbWUgPSB1cGRhdGVFdmVudC5SZXNvdXJjZVByb3BlcnRpZXM/LlJlcG9zaXRvcnlOYW1lO1xuICBjb25zdCByZXBvc2l0b3J5TmFtZUhhc0NoYW5nZWQgPSBuZXdSZXBvc2l0b3J5TmFtZSAhPSBudWxsICYmIG9sZFJlcG9zaXRvcnlOYW1lICE9IG51bGwgJiYgbmV3UmVwb3NpdG9yeU5hbWUgIT09IG9sZFJlcG9zaXRvcnlOYW1lO1xuXG4gIC8qIElmIHRoZSBuYW1lIG9mIHRoZSByZXBvc2l0b3J5IGhhcyBjaGFuZ2VkLCBDbG91ZEZvcm1hdGlvbiB3aWxsIHRyeSB0byBkZWxldGUgdGhlIHJlcG9zaXRvcnlcbiAgICAgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgd2l0aCB0aGUgbmV3IG5hbWUuIFNvIHdlIGhhdmUgdG8gZGVsZXRlIHRoZSBpbWFnZXMgaW4gdGhlXG4gICAgIHJlcG9zaXRvcnkgc28gdGhhdCB0aGlzIG9wZXJhdGlvbiBkb2VzIG5vdCBmYWlsLiAqL1xuICBpZiAocmVwb3NpdG9yeU5hbWVIYXNDaGFuZ2VkKSB7XG4gICAgcmV0dXJuIG9uRGVsZXRlKG9sZFJlcG9zaXRvcnlOYW1lLCB1cGRhdGVFdmVudC5PbGRSZXNvdXJjZVByb3BlcnRpZXM/LlJlcG9zaXRvcnlBcm4pO1xuICB9XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgZGVsZXRlIGFsbCBpbWFnZXMgaW4gdGhlIHJlcG9zaXRvcnlcbiAqXG4gKiBAcGFyYW0gRUNSLkxpc3RJbWFnZXNSZXF1ZXN0IHRoZSByZXBvc2l0b3J5TmFtZSAmIG5leHRUb2tlbiBpZiBwcmVzZW50ZWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW1wdHlSZXBvc2l0b3J5KHBhcmFtczogRUNSLkxpc3RJbWFnZXNSZXF1ZXN0KSB7XG4gIGNvbnN0IGxpc3RlZEltYWdlcyA9IGF3YWl0IGVjci5saXN0SW1hZ2VzKHBhcmFtcykucHJvbWlzZSgpO1xuXG4gIGNvbnN0IGltYWdlSWRzID0gbGlzdGVkSW1hZ2VzPy5pbWFnZUlkcyA/PyBbXTtcbiAgY29uc3QgbmV4dFRva2VuID0gbGlzdGVkSW1hZ2VzLm5leHRUb2tlbiA/PyBudWxsO1xuICBpZiAoaW1hZ2VJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXdhaXQgZWNyLmJhdGNoRGVsZXRlSW1hZ2Uoe1xuICAgIHJlcG9zaXRvcnlOYW1lOiBwYXJhbXMucmVwb3NpdG9yeU5hbWUsXG4gICAgaW1hZ2VJZHMsXG4gIH0pLnByb21pc2UoKTtcblxuICBpZiAobmV4dFRva2VuKSB7XG4gICAgYXdhaXQgZW1wdHlSZXBvc2l0b3J5KHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIG5leHRUb2tlbixcbiAgICB9KTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBvbkRlbGV0ZShyZXBvc2l0b3J5TmFtZTogc3RyaW5nLCByZXBvc2l0b3J5QXJuOiBzdHJpbmcpIHtcbiAgaWYgKCFyZXBvc2l0b3J5TmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gUmVwb3NpdG9yeU5hbWUgd2FzIHByb3ZpZGVkLicpO1xuICB9XG5cbiAgaWYgKCFhd2FpdCBpc1JlcG9zaXRvcnlUYWdnZWRGb3JEZWxldGlvbihyZXBvc2l0b3J5QXJuKSkge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGBSZXBvc2l0b3J5IGRvZXMgbm90IGhhdmUgJyR7QVVUT19ERUxFVEVfSU1BR0VTX1RBR30nIHRhZywgc2tpcHBpbmcgY2xlYW5pbmcuXFxuYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgYXdhaXQgZW1wdHlSZXBvc2l0b3J5KHsgcmVwb3NpdG9yeU5hbWUgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5uYW1lICE9PSAnUmVwb3NpdG9yeU5vdEZvdW5kRXhjZXB0aW9uJykge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgLy8gUmVwb3NpdG9yeSBkb2Vzbid0IGV4aXN0LiBJZ25vcmluZ1xuICB9XG59XG5cbi8qKlxuICogVGhlIHJlcG9zaXRvcnkgd2lsbCBvbmx5IGJlIHRhZ2dlZCBmb3IgZGVsZXRpb24gaWYgaXQncyBiZWluZyBkZWxldGVkIGluIHRoZSBzYW1lXG4gKiBkZXBsb3ltZW50IGFzIHRoaXMgQ3VzdG9tIFJlc291cmNlLlxuICpcbiAqIElmIHRoZSBDdXN0b20gUmVzb3VyY2UgaXMgZXZlciBkZWxldGVkIGJlZm9yZSB0aGUgcmVwb3NpdG9yeSwgaXQgbXVzdCBiZSBiZWNhdXNlXG4gKiBgYXV0b0RlbGV0ZUltYWdlc2AgaGFzIGJlZW4gc3dpdGNoZWQgdG8gZmFsc2UsIGluIHdoaWNoIGNhc2UgdGhlIHRhZyB3b3VsZCBoYXZlXG4gKiBiZWVuIHJlbW92ZWQgYmVmb3JlIHdlIGdldCB0byB0aGlzIERlbGV0ZSBldmVudC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaXNSZXBvc2l0b3J5VGFnZ2VkRm9yRGVsZXRpb24ocmVwb3NpdG9yeUFybjogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWNyLmxpc3RUYWdzRm9yUmVzb3VyY2UoeyByZXNvdXJjZUFybjogcmVwb3NpdG9yeUFybiB9KS5wcm9taXNlKCk7XG4gIHJldHVybiByZXNwb25zZS50YWdzPy5zb21lKHRhZyA9PiB0YWcuS2V5ID09PSBBVVRPX0RFTEVURV9JTUFHRVNfVEFHICYmIHRhZy5WYWx1ZSA9PT0gJ3RydWUnKTtcbn0iXX0=