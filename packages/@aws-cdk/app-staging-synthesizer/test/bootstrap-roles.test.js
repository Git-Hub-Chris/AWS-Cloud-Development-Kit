"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const util_1 = require("./util");
const lib_1 = require("../lib");
const CLOUDFORMATION_EXECUTION_ROLE = 'cloudformation-execution-role';
const DEPLOY_ACTION_ROLE = 'deploy-action-role';
const LOOKUP_ROLE = 'lookup-role';
describe('Boostrap Roles', () => {
    test('default bootstrap role name is always under 64 characters', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: 'super long app id that needs to be cut',
            }),
        });
        const stack = new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const manifestArtifact = asm.artifacts.filter(util_1.isAssetManifest)[0];
        expect(manifestArtifact).toBeDefined();
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        const firstFile = (manifest.files ? manifest.files[Object.keys(manifest.files)[0]] : undefined) ?? {};
        expect(firstFile.destinations['000000000000-us-east-1'].assumeRoleArn).toEqual('arn:${AWS::Partition}:iam::000000000000:role/cdk-super-long-app-id-th-file-role-us-east-1');
    });
    test('can supply existing arns for bootstrapped roles', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
                deploymentRoles: {
                    cloudFormationExecutionRole: lib_1.BootstrapRole.fromRoleArn(CLOUDFORMATION_EXECUTION_ROLE),
                    lookupRole: lib_1.BootstrapRole.fromRoleArn(LOOKUP_ROLE),
                    deploymentRole: lib_1.BootstrapRole.fromRoleArn(DEPLOY_ACTION_ROLE),
                },
            }),
        });
        const stack = new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const stackArtifact = asm.getStackArtifact('Stack');
        // Bootstrapped roles are as advertised
        expect(stackArtifact.cloudFormationExecutionRoleArn).toEqual(CLOUDFORMATION_EXECUTION_ROLE);
        expect(stackArtifact.lookupRole).toEqual({ arn: LOOKUP_ROLE });
        expect(stackArtifact.assumeRoleArn).toEqual(DEPLOY_ACTION_ROLE);
    });
    test('can supply existing arn for bucket staging role', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
                fileAssetPublishingRole: lib_1.BootstrapRole.fromRoleArn('arn:aws:iam::123456789012:role/S3Access'),
            }),
        });
        const stack = new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN
        // Staging role is as advertised
        const manifestArtifact = asm.artifacts.filter(util_1.isAssetManifest)[0];
        expect(manifestArtifact).toBeDefined();
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        const firstFile = (manifest.files ? manifest.files[Object.keys(manifest.files)[0]] : undefined) ?? {};
        expect(firstFile.destinations['000000000000-us-east-1'].assumeRoleArn).toEqual('arn:aws:iam::123456789012:role/S3Access');
    });
    test('can provide existing arn for image staging role', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
                imageAssetPublishingRole: lib_1.BootstrapRole.fromRoleArn('arn:aws:iam::123456789012:role/ECRAccess'),
            }),
        });
        const stack = new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        stack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'abcdef',
            assetName: 'myDockerAsset',
        });
        // WHEN
        const asm = app.synth();
        // THEN
        // Image role is as advertised
        const manifestArtifact = asm.artifacts.filter(util_1.isAssetManifest)[0];
        expect(manifestArtifact).toBeDefined();
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        const firstFile = (manifest.dockerImages ? manifest.dockerImages[Object.keys(manifest.dockerImages)[0]] : undefined) ?? {};
        expect(firstFile.destinations['000000000000-us-east-1'].assumeRoleArn).toEqual('arn:aws:iam::123456789012:role/ECRAccess');
    });
    test('bootstrap roles can be specified as current cli credentials instead', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
                deploymentRoles: {
                    cloudFormationExecutionRole: lib_1.BootstrapRole.cliCredentials(),
                    lookupRole: lib_1.BootstrapRole.cliCredentials(),
                    deploymentRole: lib_1.BootstrapRole.cliCredentials(),
                },
            }),
        });
        const stack = new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const stackArtifact = asm.getStackArtifact('Stack');
        // Bootstrapped roles are undefined, which means current credentials are used
        expect(stackArtifact.cloudFormationExecutionRoleArn).toBeUndefined();
        expect(stackArtifact.lookupRole).toBeUndefined();
        expect(stackArtifact.assumeRoleArn).toBeUndefined();
    });
    test('qualifier is resolved in the synthesizer', () => {
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                bootstrapQualifier: 'abcdef',
                appId: util_1.APP_ID,
            }),
        });
        new aws_cdk_lib_1.Stack(app, 'Stack', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        // WHEN
        const asm = app.synth();
        // THEN
        const stackArtifact = asm.getStackArtifact('Stack');
        // Bootstrapped role's asset manifest tokens are resolved, where possible
        expect(stackArtifact.cloudFormationExecutionRoleArn).toEqual('arn:${AWS::Partition}:iam::000000000000:role/cdk-abcdef-cfn-exec-role-000000000000-us-east-1');
    });
});
//# sourceMappingURL=data:application/json;base64,