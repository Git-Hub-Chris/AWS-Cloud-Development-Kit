"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const integ = require("@aws-cdk/integ-tests-alpha");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const lib_1 = require("../lib");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'synthesize-default-resources', {
    synthesizer: lib_1.AppStagingSynthesizer.defaultResources({
        appId: 'default-resources',
    }),
});
new lambda.Function(stack, 'lambda-s3', {
    code: lambda.AssetCode.fromAsset(path.join(__dirname, 'assets')),
    handler: 'index.handler',
    runtime: lambda.Runtime.PYTHON_3_10,
});
new lambda.Function(stack, 'lambda-ecr-1', {
    code: lambda.EcrImageCode.fromAssetImage(path.join(__dirname, 'assets'), {
        assetName: 'ecr-asset',
    }),
    handler: lambda.Handler.FROM_IMAGE,
    runtime: lambda.Runtime.FROM_IMAGE,
});
// This lambda will share the same published asset as lambda-ecr-1
new lambda.Function(stack, 'lambda-ecr-1-copy', {
    code: lambda.EcrImageCode.fromAssetImage(path.join(__dirname, 'assets'), {
        assetName: 'ecr-asset',
    }),
    handler: lambda.Handler.FROM_IMAGE,
    runtime: lambda.Runtime.FROM_IMAGE,
});
// This lambda will use a different published asset as lambda-ecr-1
new lambda.Function(stack, 'lambda-ecr-2', {
    code: lambda.EcrImageCode.fromAssetImage(path.join(__dirname, 'assets'), {
        assetName: 'ecr-asset-2',
    }),
    handler: lambda.Handler.FROM_IMAGE,
    runtime: lambda.Runtime.FROM_IMAGE,
});
new integ.IntegTest(app, 'integ-tests', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3ludGgtZGVmYXVsdC1yZXNvdXJjZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5zeW50aC1kZWZhdWx0LXJlc291cmNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixvREFBb0Q7QUFDcEQsNkNBQXlDO0FBQ3pDLGlEQUFpRDtBQUNqRCxnQ0FBK0M7QUFFL0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxFQUFFLENBQUM7QUFFdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRTtJQUMzRCxXQUFXLEVBQUUsMkJBQXFCLENBQUMsZ0JBQWdCLENBQUM7UUFDbEQsS0FBSyxFQUFFLG1CQUFtQjtLQUMzQixDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDdEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDekMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZFLFNBQVMsRUFBRSxXQUFXO0tBQ3ZCLENBQUM7SUFDRixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO0lBQ2xDLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7Q0FDbkMsQ0FBQyxDQUFDO0FBRUgsa0VBQWtFO0FBQ2xFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLEVBQUU7SUFDOUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZFLFNBQVMsRUFBRSxXQUFXO0tBQ3ZCLENBQUM7SUFDRixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO0lBQ2xDLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7Q0FDbkMsQ0FBQyxDQUFDO0FBRUgsbUVBQW1FO0FBQ25FLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ3pDLElBQUksRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRTtRQUN2RSxTQUFTLEVBQUUsYUFBYTtLQUN6QixDQUFDO0lBQ0YsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVTtJQUNsQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO0NBQ25DLENBQUMsQ0FBQztBQUVILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFO0lBQ3RDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0IHsgQXBwLCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IEFwcFN0YWdpbmdTeW50aGVzaXplciB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnc3ludGhlc2l6ZS1kZWZhdWx0LXJlc291cmNlcycsIHtcbiAgc3ludGhlc2l6ZXI6IEFwcFN0YWdpbmdTeW50aGVzaXplci5kZWZhdWx0UmVzb3VyY2VzKHtcbiAgICBhcHBJZDogJ2RlZmF1bHQtcmVzb3VyY2VzJyxcbiAgfSksXG59KTtcblxubmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ2xhbWJkYS1zMycsIHtcbiAgY29kZTogbGFtYmRhLkFzc2V0Q29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Fzc2V0cycpKSxcbiAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5QWVRIT05fM18xMCxcbn0pO1xuXG5uZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnbGFtYmRhLWVjci0xJywge1xuICBjb2RlOiBsYW1iZGEuRWNySW1hZ2VDb2RlLmZyb21Bc3NldEltYWdlKHBhdGguam9pbihfX2Rpcm5hbWUsICdhc3NldHMnKSwge1xuICAgIGFzc2V0TmFtZTogJ2Vjci1hc3NldCcsXG4gIH0pLFxuICBoYW5kbGVyOiBsYW1iZGEuSGFuZGxlci5GUk9NX0lNQUdFLFxuICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5GUk9NX0lNQUdFLFxufSk7XG5cbi8vIFRoaXMgbGFtYmRhIHdpbGwgc2hhcmUgdGhlIHNhbWUgcHVibGlzaGVkIGFzc2V0IGFzIGxhbWJkYS1lY3ItMVxubmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ2xhbWJkYS1lY3ItMS1jb3B5Jywge1xuICBjb2RlOiBsYW1iZGEuRWNySW1hZ2VDb2RlLmZyb21Bc3NldEltYWdlKHBhdGguam9pbihfX2Rpcm5hbWUsICdhc3NldHMnKSwge1xuICAgIGFzc2V0TmFtZTogJ2Vjci1hc3NldCcsXG4gIH0pLFxuICBoYW5kbGVyOiBsYW1iZGEuSGFuZGxlci5GUk9NX0lNQUdFLFxuICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5GUk9NX0lNQUdFLFxufSk7XG5cbi8vIFRoaXMgbGFtYmRhIHdpbGwgdXNlIGEgZGlmZmVyZW50IHB1Ymxpc2hlZCBhc3NldCBhcyBsYW1iZGEtZWNyLTFcbm5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdsYW1iZGEtZWNyLTInLCB7XG4gIGNvZGU6IGxhbWJkYS5FY3JJbWFnZUNvZGUuZnJvbUFzc2V0SW1hZ2UocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Fzc2V0cycpLCB7XG4gICAgYXNzZXROYW1lOiAnZWNyLWFzc2V0LTInLFxuICB9KSxcbiAgaGFuZGxlcjogbGFtYmRhLkhhbmRsZXIuRlJPTV9JTUFHRSxcbiAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuRlJPTV9JTUFHRSxcbn0pO1xuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ2ludGVnLXRlc3RzJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=