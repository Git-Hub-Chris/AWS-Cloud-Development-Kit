"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const util_1 = require("./util");
const lib_1 = require("../lib");
describe('per environment cache', () => {
    test('same app, same env', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
            }),
        });
        new aws_cdk_lib_1.Stack(app, 'Stack1', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.Stack(app, 'Stack2', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        // THEN
        // stacks share the same staging resources
        const asm = app.synth();
        expect(asm.stacks.length).toEqual(3);
        const stagingResources = asm.stacks.filter((s) => s.displayName.startsWith('StagingStack'));
        expect(stagingResources.length).toEqual(1);
    });
    test('same app, different envs', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
            }),
        });
        new aws_cdk_lib_1.Stack(app, 'Stack1', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        new aws_cdk_lib_1.Stack(app, 'Stack2', {
            env: {
                account: '000000000000',
                region: 'us-west-2',
            },
        });
        // THEN
        // separate stacks for staging resources
        const asm = app.synth();
        expect(asm.stacks.length).toEqual(4);
        const stagingResources = asm.stacks.filter((s) => s.displayName.startsWith('StagingStack'));
        expect(stagingResources.length).toEqual(2);
    });
    test('apps must be gnostic', () => {
        // GIVEN
        const app = new aws_cdk_lib_1.App({
            defaultStackSynthesizer: lib_1.AppStagingSynthesizer.defaultResources({
                appId: util_1.APP_ID,
            }),
        });
        new aws_cdk_lib_1.Stack(app, 'Stack1', {
            env: {
                account: '000000000000',
                region: 'us-east-1',
            },
        });
        // THEN
        expect(() => new aws_cdk_lib_1.Stack(app, 'Stack2')).toThrowError(/It is not safe to use AppStagingSynthesizer for both environment-agnostic and environment-aware stacks at the same time./);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyLWVudi1zdGFnaW5nLWZhY3RvcnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBlci1lbnYtc3RhZ2luZy1mYWN0b3J5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBeUM7QUFDekMsaUNBQWdDO0FBQ2hDLGdDQUErQztBQUUvQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsUUFBUTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsQ0FBQztZQUNsQix1QkFBdUIsRUFBRSwyQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDOUQsS0FBSyxFQUFFLGFBQU07YUFDZCxDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7WUFDdkIsR0FBRyxFQUFFO2dCQUNILE9BQU8sRUFBRSxjQUFjO2dCQUN2QixNQUFNLEVBQUUsV0FBVzthQUNwQjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFO1lBQ3ZCLEdBQUcsRUFBRTtnQkFDSCxPQUFPLEVBQUUsY0FBYztnQkFDdkIsTUFBTSxFQUFFLFdBQVc7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsMENBQTBDO1FBQzFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUM1RixNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNwQyxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxDQUFDO1lBQ2xCLHVCQUF1QixFQUFFLDJCQUFxQixDQUFDLGdCQUFnQixDQUFDO2dCQUM5RCxLQUFLLEVBQUUsYUFBTTthQUNkLENBQUM7U0FDSCxDQUFDLENBQUM7UUFDSCxJQUFJLG1CQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRTtZQUN2QixHQUFHLEVBQUU7Z0JBQ0gsT0FBTyxFQUFFLGNBQWM7Z0JBQ3ZCLE1BQU0sRUFBRSxXQUFXO2FBQ3BCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7WUFDdkIsR0FBRyxFQUFFO2dCQUNILE9BQU8sRUFBRSxjQUFjO2dCQUN2QixNQUFNLEVBQUUsV0FBVzthQUNwQjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCx3Q0FBd0M7UUFDeEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQzVGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLENBQUM7WUFDbEIsdUJBQXVCLEVBQUUsMkJBQXFCLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzlELEtBQUssRUFBRSxhQUFNO2FBQ2QsQ0FBQztTQUNILENBQUMsQ0FBQztRQUNILElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFO1lBQ3ZCLEdBQUcsRUFBRTtnQkFDSCxPQUFPLEVBQUUsY0FBYztnQkFDdkIsTUFBTSxFQUFFLFdBQVc7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsMEhBQTBILENBQUMsQ0FBQztJQUNsTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEFQUF9JRCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBBcHBTdGFnaW5nU3ludGhlc2l6ZXIgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgncGVyIGVudmlyb25tZW50IGNhY2hlJywgKCkgPT4ge1xuICB0ZXN0KCdzYW1lIGFwcCwgc2FtZSBlbnYnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKHtcbiAgICAgIGRlZmF1bHRTdGFja1N5bnRoZXNpemVyOiBBcHBTdGFnaW5nU3ludGhlc2l6ZXIuZGVmYXVsdFJlc291cmNlcyh7XG4gICAgICAgIGFwcElkOiBBUFBfSUQsXG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBuZXcgU3RhY2soYXBwLCAnU3RhY2sxJywge1xuICAgICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6ICcwMDAwMDAwMDAwMDAnLFxuICAgICAgICByZWdpb246ICd1cy1lYXN0LTEnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBuZXcgU3RhY2soYXBwLCAnU3RhY2syJywge1xuICAgICAgZW52OiB7XG4gICAgICAgIGFjY291bnQ6ICcwMDAwMDAwMDAwMDAnLFxuICAgICAgICByZWdpb246ICd1cy1lYXN0LTEnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICAvLyBzdGFja3Mgc2hhcmUgdGhlIHNhbWUgc3RhZ2luZyByZXNvdXJjZXNcbiAgICBjb25zdCBhc20gPSBhcHAuc3ludGgoKTtcbiAgICBleHBlY3QoYXNtLnN0YWNrcy5sZW5ndGgpLnRvRXF1YWwoMyk7XG4gICAgY29uc3Qgc3RhZ2luZ1Jlc291cmNlcyA9IGFzbS5zdGFja3MuZmlsdGVyKChzKSA9PiBzLmRpc3BsYXlOYW1lLnN0YXJ0c1dpdGgoJ1N0YWdpbmdTdGFjaycpKTtcbiAgICBleHBlY3Qoc3RhZ2luZ1Jlc291cmNlcy5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NhbWUgYXBwLCBkaWZmZXJlbnQgZW52cycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoe1xuICAgICAgZGVmYXVsdFN0YWNrU3ludGhlc2l6ZXI6IEFwcFN0YWdpbmdTeW50aGVzaXplci5kZWZhdWx0UmVzb3VyY2VzKHtcbiAgICAgICAgYXBwSWQ6IEFQUF9JRCxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIG5ldyBTdGFjayhhcHAsICdTdGFjazEnLCB7XG4gICAgICBlbnY6IHtcbiAgICAgICAgYWNjb3VudDogJzAwMDAwMDAwMDAwMCcsXG4gICAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIG5ldyBTdGFjayhhcHAsICdTdGFjazInLCB7XG4gICAgICBlbnY6IHtcbiAgICAgICAgYWNjb3VudDogJzAwMDAwMDAwMDAwMCcsXG4gICAgICAgIHJlZ2lvbjogJ3VzLXdlc3QtMicsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIC8vIHNlcGFyYXRlIHN0YWNrcyBmb3Igc3RhZ2luZyByZXNvdXJjZXNcbiAgICBjb25zdCBhc20gPSBhcHAuc3ludGgoKTtcbiAgICBleHBlY3QoYXNtLnN0YWNrcy5sZW5ndGgpLnRvRXF1YWwoNCk7XG4gICAgY29uc3Qgc3RhZ2luZ1Jlc291cmNlcyA9IGFzbS5zdGFja3MuZmlsdGVyKChzKSA9PiBzLmRpc3BsYXlOYW1lLnN0YXJ0c1dpdGgoJ1N0YWdpbmdTdGFjaycpKTtcbiAgICBleHBlY3Qoc3RhZ2luZ1Jlc291cmNlcy5sZW5ndGgpLnRvRXF1YWwoMik7XG4gIH0pO1xuXG4gIHRlc3QoJ2FwcHMgbXVzdCBiZSBnbm9zdGljJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCh7XG4gICAgICBkZWZhdWx0U3RhY2tTeW50aGVzaXplcjogQXBwU3RhZ2luZ1N5bnRoZXNpemVyLmRlZmF1bHRSZXNvdXJjZXMoe1xuICAgICAgICBhcHBJZDogQVBQX0lELFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgbmV3IFN0YWNrKGFwcCwgJ1N0YWNrMScsIHtcbiAgICAgIGVudjoge1xuICAgICAgICBhY2NvdW50OiAnMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IG5ldyBTdGFjayhhcHAsICdTdGFjazInKSkudG9UaHJvd0Vycm9yKC9JdCBpcyBub3Qgc2FmZSB0byB1c2UgQXBwU3RhZ2luZ1N5bnRoZXNpemVyIGZvciBib3RoIGVudmlyb25tZW50LWFnbm9zdGljIGFuZCBlbnZpcm9ubWVudC1hd2FyZSBzdGFja3MgYXQgdGhlIHNhbWUgdGltZS4vKTtcbiAgfSk7XG59KTtcbiJdfQ==