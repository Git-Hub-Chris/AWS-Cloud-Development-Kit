"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStagingSynthesizer = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
const bootstrap_roles_1 = require("./bootstrap-roles");
const default_staging_stack_1 = require("./default-staging-stack");
const per_env_staging_factory_1 = require("./per-env-staging-factory");
const app_global_1 = require("./private/app-global");
const no_tokens_1 = require("./private/no-tokens");
const AGNOSTIC_STACKS = new app_global_1.AppScopedGlobal(() => new Set());
const ENV_AWARE_STACKS = new app_global_1.AppScopedGlobal(() => new Set());
/**
 * App Staging Synthesizer
 */
class AppStagingSynthesizer extends aws_cdk_lib_1.StackSynthesizer {
    /**
     * Use the Default Staging Resources, creating a single stack per environment this app is deployed in
     */
    static defaultResources(options) {
        (0, no_tokens_1.validateNoTokens)(options, 'AppStagingSynthesizer');
        return AppStagingSynthesizer.customFactory({
            factory: default_staging_stack_1.DefaultStagingStack.factory(options),
            deploymentRoles: options.deploymentRoles,
            bootstrapQualifier: options.bootstrapQualifier,
            oncePerEnv: true,
        });
    }
    /**
     * Use these exact staging resources for every stack that this synthesizer is used for
     */
    static customResources(options) {
        return AppStagingSynthesizer.customFactory({
            deploymentRoles: options.deploymentRoles,
            bootstrapQualifier: options.bootstrapQualifier,
            oncePerEnv: false,
            factory: {
                obtainStagingResources() {
                    return options.resources;
                },
            },
        });
    }
    /**
     * Supply your own stagingStackFactory method for creating an IStagingStack when
     * a stack is bound to the synthesizer.
     *
     * By default, `oncePerEnv = true`, which means that a new instance of the IStagingStack
     * will be created in new environments. Set `oncePerEnv = false` to turn off that behavior.
     */
    static customFactory(options) {
        const oncePerEnv = options.oncePerEnv ?? true;
        const factory = oncePerEnv ? new per_env_staging_factory_1.PerEnvironmentStagingFactory(options.factory) : options.factory;
        return new AppStagingSynthesizer({
            factory,
            bootstrapQualifier: options.bootstrapQualifier,
            deploymentRoles: options.deploymentRoles,
        });
    }
    constructor(props) {
        super();
        this.props = props;
        this.roles = {
            deploymentRole: props.deploymentRoles?.deploymentRole ??
                bootstrap_roles_1.BootstrapRole.fromRoleArn(AppStagingSynthesizer.DEFAULT_DEPLOY_ROLE_ARN),
            cloudFormationExecutionRole: props.deploymentRoles?.cloudFormationExecutionRole ??
                bootstrap_roles_1.BootstrapRole.fromRoleArn(AppStagingSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN),
            lookupRole: this.props.deploymentRoles?.lookupRole ??
                bootstrap_roles_1.BootstrapRole.fromRoleArn(AppStagingSynthesizer.DEFAULT_LOOKUP_ROLE_ARN),
        };
    }
    /**
     * Returns a version of the synthesizer bound to a stack.
     */
    reusableBind(stack) {
        this.checkEnvironmentGnosticism(stack);
        const qualifier = this.props.bootstrapQualifier ??
            stack.node.tryGetContext(aws_cdk_lib_1.BOOTSTRAP_QUALIFIER_CONTEXT) ??
            AppStagingSynthesizer.DEFAULT_QUALIFIER;
        const spec = new helpers_internal_1.StringSpecializer(stack, qualifier);
        const deployRole = this.roles.deploymentRole._specialize(spec);
        const context = {
            environmentString: [
                aws_cdk_lib_1.Token.isUnresolved(stack.account) ? 'ACCOUNT' : stack.account,
                aws_cdk_lib_1.Token.isUnresolved(stack.region) ? 'REGION' : stack.region,
            ].join('-'),
            deployRoleArn: deployRole._arnForCloudFormation(),
            qualifier,
        };
        return new BoundAppStagingSynthesizer(stack, {
            stagingResources: this.props.factory.obtainStagingResources(stack, context),
            deployRole,
            cloudFormationExecutionRole: this.roles.cloudFormationExecutionRole._specialize(spec),
            lookupRole: this.roles.lookupRole._specialize(spec),
            qualifier,
        });
    }
    /**
     * Implemented for legacy purposes; this will never be called.
     */
    bind(_stack) {
        throw new Error('This is a legacy API, call reusableBind instead');
    }
    /**
     * Implemented for legacy purposes; this will never be called.
     */
    synthesize(_session) {
        throw new Error('This is a legacy API, call reusableBind instead');
    }
    /**
     * Implemented for legacy purposes; this will never be called.
     */
    addFileAsset(_asset) {
        throw new Error('This is a legacy API, call reusableBind instead');
    }
    /**
     * Implemented for legacy purposes; this will never be called.
     */
    addDockerImageAsset(_asset) {
        throw new Error('This is a legacy API, call reusableBind instead');
    }
    /**
     * Check that we're only being used for exclusively gnostic or agnostic stacks.
     *
     * We can think about whether to loosen this requirement later.
     */
    checkEnvironmentGnosticism(stack) {
        const isAgnostic = aws_cdk_lib_1.Token.isUnresolved(stack.account) || aws_cdk_lib_1.Token.isUnresolved(stack.region);
        const agnosticStacks = AGNOSTIC_STACKS.for(stack);
        const envAwareStacks = ENV_AWARE_STACKS.for(stack);
        (isAgnostic ? agnosticStacks : envAwareStacks).add(stack);
        if (agnosticStacks.size > 0 && envAwareStacks.size > 0) {
            const describeStacks = (xs) => Array.from(xs).map(s => s.node.path).join(', ');
            throw new Error([
                'It is not safe to use AppStagingSynthesizer for both environment-agnostic and environment-aware stacks at the same time.',
                'Please either specify environments for all stacks or no stacks in the CDK App.',
                `Stacks with environment: ${describeStacks(agnosticStacks)}.`,
                `Stacks without environment: ${describeStacks(envAwareStacks)}.`,
            ].join(' '));
        }
    }
}
/**
 * Default ARN qualifier
 */
AppStagingSynthesizer.DEFAULT_QUALIFIER = 'hnb659fds';
/**
 * Default CloudFormation role ARN.
 */
AppStagingSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}';
/**
 * Default deploy role ARN.
 */
AppStagingSynthesizer.DEFAULT_DEPLOY_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}';
/**
 * Default lookup role ARN for missing values.
 */
AppStagingSynthesizer.DEFAULT_LOOKUP_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}';
exports.AppStagingSynthesizer = AppStagingSynthesizer;
class BoundAppStagingSynthesizer extends aws_cdk_lib_1.StackSynthesizer {
    constructor(stack, props) {
        super();
        this.props = props;
        this.assetManifest = new aws_cdk_lib_1.AssetManifestBuilder();
        super.bind(stack);
        this.qualifier = props.qualifier;
        this.stagingStack = props.stagingResources;
    }
    /**
     * The qualifier used to bootstrap this stack
     */
    get bootstrapQualifier() {
        // Not sure why we need this.
        return this.qualifier;
    }
    synthesize(session) {
        const templateAssetSource = this.synthesizeTemplate(session, this.props.lookupRole?._arnForCloudAssembly());
        const templateAsset = this.addFileAsset(templateAssetSource);
        const assetManifestId = this.assetManifest.emitManifest(this.boundStack, session);
        const lookupRoleArn = this.props.lookupRole?._arnForCloudAssembly();
        this.emitArtifact(session, {
            assumeRoleArn: this.props.deployRole?._arnForCloudAssembly(),
            additionalDependencies: [assetManifestId],
            stackTemplateAssetObjectUrl: templateAsset.s3ObjectUrlWithPlaceholders,
            cloudFormationExecutionRoleArn: this.props.cloudFormationExecutionRole?._arnForCloudAssembly(),
            lookupRole: lookupRoleArn ? { arn: lookupRoleArn } : undefined,
        });
    }
    /**
     * Add a file asset to the manifest.
     */
    addFileAsset(asset) {
        const { bucketName, assumeRoleArn, prefix, dependencyStack } = this.stagingStack.addFile(asset);
        const location = this.assetManifest.defaultAddFileAsset(this.boundStack, asset, {
            bucketName: (0, helpers_internal_1.translateCfnTokenToAssetToken)(bucketName),
            bucketPrefix: prefix,
            role: assumeRoleArn ? { assumeRoleArn: (0, helpers_internal_1.translateCfnTokenToAssetToken)(assumeRoleArn) } : undefined, // TODO: check if this is necessary
        });
        if (dependencyStack) {
            this.boundStack.addDependency(dependencyStack, 'stack depends on the staging stack for staging resources');
        }
        return this.cloudFormationLocationFromFileAsset(location);
    }
    /**
     * Add a docker image asset to the manifest.
     */
    addDockerImageAsset(asset) {
        const { repoName, assumeRoleArn, dependencyStack } = this.stagingStack.addDockerImage(asset);
        const location = this.assetManifest.defaultAddDockerImageAsset(this.boundStack, asset, {
            repositoryName: (0, helpers_internal_1.translateCfnTokenToAssetToken)(repoName),
            role: assumeRoleArn ? { assumeRoleArn: (0, helpers_internal_1.translateCfnTokenToAssetToken)(assumeRoleArn) } : undefined, // TODO: check if this is necessary
            // TODO: more props
        });
        if (dependencyStack) {
            this.boundStack.addDependency(dependencyStack, 'stack depends on the staging stack for staging resources');
        }
        return this.cloudFormationLocationFromDockerImageAsset(location);
    }
}
//# sourceMappingURL=data:application/json;base64,