{
  "Resources": {
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc"
          }
        ]
      }
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1a",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        }
      }
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ]
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.32.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1b",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        }
      }
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ]
    },
    "VpcPublicSubnet3SubnetBE12F0B6": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1c",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet3"
          }
        ]
      }
    },
    "VpcPublicSubnet3RouteTable93458DBB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PublicSubnet3"
          }
        ]
      }
    },
    "VpcPublicSubnet3RouteTableAssociation1F1EDF02": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet3RouteTable93458DBB"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet3SubnetBE12F0B6"
        }
      }
    },
    "VpcPublicSubnet3DefaultRoute4697774F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet3RouteTable93458DBB"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ]
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.96.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1a",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A"
        }
      }
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1b",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
        }
      }
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcPrivateSubnet3SubnetF258B56E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.160.0/19",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "test-region-1c",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet3"
          }
        ]
      }
    },
    "VpcPrivateSubnet3RouteTableD98824C7": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc/PrivateSubnet3"
          }
        ]
      }
    },
    "VpcPrivateSubnet3RouteTableAssociation16BDDC43": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet3RouteTableD98824C7"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet3SubnetF258B56E"
        }
      }
    },
    "VpcPrivateSubnet3DefaultRoute94B74F0D": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet3RouteTableD98824C7"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Vpc"
          }
        ]
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      }
    },
    "ClusterEB0386A7": {
      "Type": "AWS::ECS::Cluster"
    },
    "ClusterCPcapacityInstanceSecurityGroup889A3E94": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "integ-capacity-provider/Cluster/CP-capacity/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "ClusterCPcapacityInstanceRoleC796FD4F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ]
      }
    },
    "ClusterCPcapacityInstanceRoleDefaultPolicy66D01565": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPcapacityInstanceRoleDefaultPolicy66D01565",
        "Roles": [
          {
            "Ref": "ClusterCPcapacityInstanceRoleC796FD4F"
          }
        ]
      }
    },
    "ClusterCPcapacityInstanceProfile05915E2A": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ClusterCPcapacityInstanceRoleC796FD4F"
          }
        ]
      }
    },
    "ClusterCPcapacityLaunchConfig75C18BF8": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t3.large",
        "IamInstanceProfile": {
          "Ref": "ClusterCPcapacityInstanceProfile05915E2A"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ClusterCPcapacityInstanceSecurityGroup889A3E94",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho ECS_CLUSTER=",
                {
                  "Ref": "ClusterEB0386A7"
                },
                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "ClusterCPcapacityInstanceRoleDefaultPolicy66D01565",
        "ClusterCPcapacityInstanceRoleC796FD4F"
      ]
    },
    "ClusterCPcapacityASGCFF02D37": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "ClusterCPcapacityLaunchConfig75C18BF8"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A"
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
          },
          {
            "Ref": "VpcPrivateSubnet3SubnetF258B56E"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "ClusterCPcapacityDrainECSHookFunctionServiceRole5BAE57A1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ]
      }
    },
    "ClusterCPcapacityDrainECSHookFunctionServiceRoleDefaultPolicyF81F6887": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ClusterCPcapacityASGCFF02D37"
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterEB0386A7",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks"
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ClusterEB0386A7",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPcapacityDrainECSHookFunctionServiceRoleDefaultPolicyF81F6887",
        "Roles": [
          {
            "Ref": "ClusterCPcapacityDrainECSHookFunctionServiceRole5BAE57A1"
          }
        ]
      }
    },
    "ClusterCPcapacityDrainECSHookFunction27411CE9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPcapacityDrainECSHookFunctionServiceRole5BAE57A1",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "ClusterEB0386A7"
            }
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ],
        "Timeout": 310
      },
      "DependsOn": [
        "ClusterCPcapacityDrainECSHookFunctionServiceRoleDefaultPolicyF81F6887",
        "ClusterCPcapacityDrainECSHookFunctionServiceRole5BAE57A1"
      ]
    },
    "ClusterCPcapacityDrainECSHookFunctionAllowInvokeintegcapacityproviderClusterCPcapacityLifecycleHookDrainHookTopic7933E3CB89E779BD": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClusterCPcapacityDrainECSHookFunction27411CE9",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF"
        }
      }
    },
    "ClusterCPcapacityDrainECSHookFunctionTopic9FEB2CFB": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF"
        },
        "Endpoint": {
          "Fn::GetAtt": [
            "ClusterCPcapacityDrainECSHookFunction27411CE9",
            "Arn"
          ]
        }
      }
    },
    "ClusterCPcapacityLifecycleHookDrainHookRole00739066": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "autoscaling.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ]
      }
    },
    "ClusterCPcapacityLifecycleHookDrainHookRoleDefaultPolicyAF90580E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPcapacityLifecycleHookDrainHookRoleDefaultPolicyAF90580E",
        "Roles": [
          {
            "Ref": "ClusterCPcapacityLifecycleHookDrainHookRole00739066"
          }
        ]
      }
    },
    "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CP-capacity"
          }
        ]
      }
    },
    "ClusterCPcapacityLifecycleHookDrainHook271A2215": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ClusterCPcapacityASGCFF02D37"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "NotificationTargetARN": {
          "Ref": "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF"
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ClusterCPcapacityLifecycleHookDrainHookRole00739066",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ClusterCPcapacityLifecycleHookDrainHookRoleDefaultPolicyAF90580E",
        "ClusterCPcapacityLifecycleHookDrainHookRole00739066"
      ]
    },
    "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRole86EEEEC7": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicy77BD59EF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SetInstanceProtection"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ClusterCPcapacityASGCFF02D37"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "autoscaling:DescribeAutoScalingGroups",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicy77BD59EF",
        "Roles": [
          {
            "Ref": "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRole86EEEEC7"
          }
        ]
      }
    },
    "ClusterCPcapacityProviderInstanceProtectionHandler2A4E4D11": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3Bucket70A1D3C6"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3VersionKey71ED71C6"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3VersionKey71ED71C6"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.on_event",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRole86EEEEC7",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Environment": {
          "Variables": {
            "autoscaling_group_name": {
              "Ref": "ClusterCPcapacityASGCFF02D37"
            }
          }
        },
        "Timeout": 60
      },
      "DependsOn": [
        "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicy77BD59EF",
        "ClusterCPcapacityProviderInstanceProtectionHandlerServiceRole86EEEEC7"
      ]
    },
    "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleEA9328DE": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy3950D5E7": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterCPcapacityProviderInstanceProtectionHandler2A4E4D11",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy3950D5E7",
        "Roles": [
          {
            "Ref": "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleEA9328DE"
          }
        ]
      }
    },
    "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEvent6DB775C1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3BucketF1BD2256"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3VersionKeyF47FA401"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3VersionKeyF47FA401"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleEA9328DE",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (integ-capacity-provider/Cluster/CP-capacityProvider/InstanceProtectionProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ClusterCPcapacityProviderInstanceProtectionHandler2A4E4D11",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy3950D5E7",
        "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleEA9328DE"
      ]
    },
    "ClusterCPcapacityProviderEnforcedInstanceProtection6A4BEFDC": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClusterCPcapacityProviderInstanceProtectionProviderframeworkonEvent6DB775C1",
            "Arn"
          ]
        },
        "ManagedTerminationProtection": true
      },
      "DependsOn": [
        "ClusterCPcapacityASGCFF02D37",
        "ClusterCPcapacityDrainECSHookFunctionAllowInvokeintegcapacityproviderClusterCPcapacityLifecycleHookDrainHookTopic7933E3CB89E779BD",
        "ClusterCPcapacityDrainECSHookFunction27411CE9",
        "ClusterCPcapacityDrainECSHookFunctionServiceRoleDefaultPolicyF81F6887",
        "ClusterCPcapacityDrainECSHookFunctionServiceRole5BAE57A1",
        "ClusterCPcapacityDrainECSHookFunctionTopic9FEB2CFB",
        "ClusterCPcapacityInstanceProfile05915E2A",
        "ClusterCPcapacityInstanceRoleDefaultPolicy66D01565",
        "ClusterCPcapacityInstanceRoleC796FD4F",
        "ClusterCPcapacityInstanceSecurityGroup889A3E94",
        "ClusterCPcapacityLaunchConfig75C18BF8",
        "ClusterCPcapacityLifecycleHookDrainHook271A2215",
        "ClusterCPcapacityLifecycleHookDrainHookRoleDefaultPolicyAF90580E",
        "ClusterCPcapacityLifecycleHookDrainHookRole00739066",
        "ClusterCPcapacityLifecycleHookDrainHookTopicDDF75EBF"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClusterCPcapacityProviderDB735893": {
      "Type": "AWS::ECS::CapacityProvider",
      "Properties": {
        "AutoScalingGroupProvider": {
          "AutoScalingGroupArn": {
            "Ref": "ClusterCPcapacityASGCFF02D37"
          },
          "ManagedScaling": {
            "MaximumScalingStepSize": 10000,
            "MinimumScalingStepSize": 1,
            "Status": "ENABLED",
            "TargetCapacity": 100
          },
          "ManagedTerminationProtection": "ENABLED"
        }
      },
      "DependsOn": [
        "ClusterCPcapacityProviderEnforcedInstanceProtection6A4BEFDC"
      ]
    },
    "ClusterCPSpotcapacityInstanceSecurityGroup0D259464": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "integ-capacity-provider/Cluster/CPSpot-capacity/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "ClusterCPSpotcapacityInstanceRole95D96EAF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityInstanceRoleDefaultPolicy9C7138F6": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPSpotcapacityInstanceRoleDefaultPolicy9C7138F6",
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityInstanceRole95D96EAF"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityInstanceProfileED5020E6": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityInstanceRole95D96EAF"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityLaunchConfig66766B90": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t3.large",
        "IamInstanceProfile": {
          "Ref": "ClusterCPSpotcapacityInstanceProfileED5020E6"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ClusterCPSpotcapacityInstanceSecurityGroup0D259464",
              "GroupId"
            ]
          }
        ],
        "SpotPrice": "0.1",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho ECS_CLUSTER=",
                {
                  "Ref": "ClusterEB0386A7"
                },
                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "ClusterCPSpotcapacityInstanceRoleDefaultPolicy9C7138F6",
        "ClusterCPSpotcapacityInstanceRole95D96EAF"
      ]
    },
    "ClusterCPSpotcapacityASG2BEE5548": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "ClusterCPSpotcapacityLaunchConfig66766B90"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A"
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
          },
          {
            "Ref": "VpcPrivateSubnet3SubnetF258B56E"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "ClusterCPSpotcapacityDrainECSHookFunctionServiceRole0B7B14E8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityDrainECSHookFunctionServiceRoleDefaultPolicy68311E86": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ClusterCPSpotcapacityASG2BEE5548"
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterEB0386A7",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks"
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ClusterEB0386A7",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPSpotcapacityDrainECSHookFunctionServiceRoleDefaultPolicy68311E86",
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityDrainECSHookFunctionServiceRole0B7B14E8"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityDrainECSHookFunctionB29A2C49": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityDrainECSHookFunctionServiceRole0B7B14E8",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "ClusterEB0386A7"
            }
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ],
        "Timeout": 310
      },
      "DependsOn": [
        "ClusterCPSpotcapacityDrainECSHookFunctionServiceRoleDefaultPolicy68311E86",
        "ClusterCPSpotcapacityDrainECSHookFunctionServiceRole0B7B14E8"
      ]
    },
    "ClusterCPSpotcapacityDrainECSHookFunctionAllowInvokeintegcapacityproviderClusterCPSpotcapacityLifecycleHookDrainHookTopic926F8D08722711FD": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityDrainECSHookFunctionB29A2C49",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917"
        }
      }
    },
    "ClusterCPSpotcapacityDrainECSHookFunctionTopicEA687A51": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917"
        },
        "Endpoint": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityDrainECSHookFunctionB29A2C49",
            "Arn"
          ]
        }
      }
    },
    "ClusterCPSpotcapacityLifecycleHookDrainHookRole4398A264": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "autoscaling.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityLifecycleHookDrainHookRoleDefaultPolicy1632A24A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPSpotcapacityLifecycleHookDrainHookRoleDefaultPolicy1632A24A",
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityLifecycleHookDrainHookRole4398A264"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "integ-capacity-provider/Cluster/CPSpot-capacity"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityLifecycleHookDrainHookC2989242": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ClusterCPSpotcapacityASG2BEE5548"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "NotificationTargetARN": {
          "Ref": "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917"
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityLifecycleHookDrainHookRole4398A264",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ClusterCPSpotcapacityLifecycleHookDrainHookRoleDefaultPolicy1632A24A",
        "ClusterCPSpotcapacityLifecycleHookDrainHookRole4398A264"
      ]
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRole381EC3DD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicyA7583666": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SetInstanceProtection"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ClusterCPSpotcapacityASG2BEE5548"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "autoscaling:DescribeAutoScalingGroups",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicyA7583666",
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRole381EC3DD"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionHandlerAD01734B": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3Bucket70A1D3C6"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3VersionKey71ED71C6"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3VersionKey71ED71C6"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.on_event",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRole381EC3DD",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Environment": {
          "Variables": {
            "autoscaling_group_name": {
              "Ref": "ClusterCPSpotcapacityASG2BEE5548"
            }
          }
        },
        "Timeout": 60
      },
      "DependsOn": [
        "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRoleDefaultPolicyA7583666",
        "ClusterCPSpotcapacityProviderInstanceProtectionHandlerServiceRole381EC3DD"
      ]
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleB49A4570": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy423E2556": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterCPSpotcapacityProviderInstanceProtectionHandlerAD01734B",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy423E2556",
        "Roles": [
          {
            "Ref": "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleB49A4570"
          }
        ]
      }
    },
    "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventB40621A5": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3BucketF1BD2256"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3VersionKeyF47FA401"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3VersionKeyF47FA401"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleB49A4570",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Description": "AWS CDK resource provider framework - onEvent (integ-capacity-provider/Cluster/CPSpot-capacityProvider/InstanceProtectionProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ClusterCPSpotcapacityProviderInstanceProtectionHandlerAD01734B",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleDefaultPolicy423E2556",
        "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventServiceRoleB49A4570"
      ]
    },
    "ClusterCPSpotcapacityProviderEnforcedInstanceProtectionC63AF6D3": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClusterCPSpotcapacityProviderInstanceProtectionProviderframeworkonEventB40621A5",
            "Arn"
          ]
        },
        "ManagedTerminationProtection": true
      },
      "DependsOn": [
        "ClusterCPSpotcapacityASG2BEE5548",
        "ClusterCPSpotcapacityDrainECSHookFunctionAllowInvokeintegcapacityproviderClusterCPSpotcapacityLifecycleHookDrainHookTopic926F8D08722711FD",
        "ClusterCPSpotcapacityDrainECSHookFunctionB29A2C49",
        "ClusterCPSpotcapacityDrainECSHookFunctionServiceRoleDefaultPolicy68311E86",
        "ClusterCPSpotcapacityDrainECSHookFunctionServiceRole0B7B14E8",
        "ClusterCPSpotcapacityDrainECSHookFunctionTopicEA687A51",
        "ClusterCPSpotcapacityInstanceProfileED5020E6",
        "ClusterCPSpotcapacityInstanceRoleDefaultPolicy9C7138F6",
        "ClusterCPSpotcapacityInstanceRole95D96EAF",
        "ClusterCPSpotcapacityInstanceSecurityGroup0D259464",
        "ClusterCPSpotcapacityLaunchConfig66766B90",
        "ClusterCPSpotcapacityLifecycleHookDrainHookC2989242",
        "ClusterCPSpotcapacityLifecycleHookDrainHookRoleDefaultPolicy1632A24A",
        "ClusterCPSpotcapacityLifecycleHookDrainHookRole4398A264",
        "ClusterCPSpotcapacityLifecycleHookDrainHookTopic43717917"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClusterCPSpotcapacityProviderBA316E26": {
      "Type": "AWS::ECS::CapacityProvider",
      "Properties": {
        "AutoScalingGroupProvider": {
          "AutoScalingGroupArn": {
            "Ref": "ClusterCPSpotcapacityASG2BEE5548"
          },
          "ManagedScaling": {
            "MaximumScalingStepSize": 10000,
            "MinimumScalingStepSize": 1,
            "Status": "ENABLED",
            "TargetCapacity": 100
          },
          "ManagedTerminationProtection": "ENABLED"
        }
      },
      "DependsOn": [
        "ClusterCPSpotcapacityProviderEnforcedInstanceProtectionC63AF6D3"
      ]
    },
    "CapacityProviderConfigurationB0200508": {
      "Type": "Custom::AWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn"
          ]
        },
        "Create": {
          "service": "ECS",
          "action": "putClusterCapacityProviders",
          "parameters": {
            "cluster": {
              "Ref": "ClusterEB0386A7"
            },
            "capacityProviders": [
              {
                "Ref": "ClusterCPcapacityProviderDB735893"
              },
              {
                "Ref": "ClusterCPSpotcapacityProviderBA316E26"
              }
            ],
            "defaultCapacityProviderStrategy": [
              {
                "capacityProvider": {
                  "Ref": "ClusterCPcapacityProviderDB735893"
                },
                "weight": 1
              },
              {
                "capacityProvider": {
                  "Ref": "ClusterCPSpotcapacityProviderBA316E26"
                },
                "base": 1,
                "weight": 3
              }
            ]
          },
          "physicalResourceId": {
            "id": "CapacityProviderConfiguration"
          }
        },
        "Update": {
          "service": "ECS",
          "action": "putClusterCapacityProviders",
          "parameters": {
            "cluster": {
              "Ref": "ClusterEB0386A7"
            },
            "capacityProviders": [
              {
                "Ref": "ClusterCPcapacityProviderDB735893"
              },
              {
                "Ref": "ClusterCPSpotcapacityProviderBA316E26"
              }
            ],
            "defaultCapacityProviderStrategy": [
              {
                "capacityProvider": {
                  "Ref": "ClusterCPcapacityProviderDB735893"
                },
                "weight": 1
              },
              {
                "capacityProvider": {
                  "Ref": "ClusterCPSpotcapacityProviderBA316E26"
                },
                "base": 1,
                "weight": 3
              }
            ]
          },
          "physicalResourceId": {
            "id": "CapacityProviderConfiguration"
          }
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:PutClusterCapacityProviders",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
          }
        ]
      }
    },
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061S3Bucket67234880"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061S3VersionKey9802AE96"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061S3VersionKey9802AE96"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 120
      },
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleDefaultPolicyD28E1A5E",
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
      ]
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
    },
    "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3Bucket70A1D3C6": {
      "Type": "String",
      "Description": "S3 bucket for asset \"2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0a\""
    },
    "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aS3VersionKey71ED71C6": {
      "Type": "String",
      "Description": "S3 key for asset version \"2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0a\""
    },
    "AssetParameters2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0aArtifactHash27D68A52": {
      "Type": "String",
      "Description": "Artifact hash for asset \"2aea9e0efba76804a5ca6c92c5575cc71d16c8f92e2416e912279926a5acba0a\""
    },
    "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3BucketF1BD2256": {
      "Type": "String",
      "Description": "S3 bucket for asset \"974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74c\""
    },
    "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cS3VersionKeyF47FA401": {
      "Type": "String",
      "Description": "S3 key for asset version \"974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74c\""
    },
    "AssetParameters974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74cArtifactHash5C0B1EA0": {
      "Type": "String",
      "Description": "Artifact hash for asset \"974a6fb29abbd1d98fce56346da3743e79277f0f52e0e2cdf3f1867ac5b1e74c\""
    },
    "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061S3Bucket67234880": {
      "Type": "String",
      "Description": "S3 bucket for asset \"8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061\""
    },
    "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061S3VersionKey9802AE96": {
      "Type": "String",
      "Description": "S3 key for asset version \"8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061\""
    },
    "AssetParameters8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061ArtifactHash9212BF97": {
      "Type": "String",
      "Description": "Artifact hash for asset \"8ae75ec4aaae0510b0918d3a69fac5c978d780ae0d60bb94c65c7f5b4c498061\""
    }
  }
}