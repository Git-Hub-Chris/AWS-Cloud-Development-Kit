"use strict";
/**
 * This file asserts that it is possible to write a custom stacksynthesizer that will synthesize
 * ONE thing to the asset manifest, while returning another thing (including tokens) to the
 * CloudFormation template -- without reaching into the library internals
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("@aws-cdk/assertions");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
test('use custom synthesizer', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Stack', {
        synthesizer: new CustomSynthesizer(),
    });
    // WHEN
    const asset = new lib_1.DockerImageAsset(stack, 'MyAsset', {
        directory: path.join(__dirname, 'demo-image'),
    });
    new core_1.CfnResource(stack, 'TestResource', {
        type: 'CDK::TestResource',
        properties: {
            ImageUri: asset.imageUri,
            ImageTag: asset.imageTag,
        },
    });
    // THEN
    const assembly = app.synth();
    const stackArtifact = assembly.getStackArtifact(stack.artifactId);
    const assetArtifact = stackArtifact.dependencies[0];
    const stackTemplate = assertions_1.Template.fromJSON(stackArtifact.template);
    stackTemplate.hasResourceProperties('CDK::TestResource', {
        ImageUri: { 'Fn::Sub': '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${RepositoryName}:0a3355be12051c9984bf2b0b2bba4e6ea535968e5b6e7396449701732fe5ed14' },
        ImageTag: '0a3355be12051c9984bf2b0b2bba4e6ea535968e5b6e7396449701732fe5ed14',
    });
    expect(assetArtifact.contents).toEqual(expect.objectContaining({
        dockerImages: expect.objectContaining({
            '0a3355be12051c9984bf2b0b2bba4e6ea535968e5b6e7396449701732fe5ed14': {
                destinations: {
                    'current_account-current_region': {
                        repositoryName: 'write-repo',
                        imageTag: '0a3355be12051c9984bf2b0b2bba4e6ea535968e5b6e7396449701732fe5ed14',
                    },
                },
                source: {
                    directory: 'asset.0a3355be12051c9984bf2b0b2bba4e6ea535968e5b6e7396449701732fe5ed14',
                },
            },
        }),
    }));
});
class CustomSynthesizer extends core_1.StackSynthesizer {
    constructor() {
        super(...arguments);
        this.manifest = new core_1.AssetManifestBuilder();
    }
    bind(stack) {
        super.bind(stack);
        this.parameter = new core_1.CfnParameter(stack, 'RepositoryName');
    }
    addFileAsset(asset) {
        void (asset);
        throw new Error('file assets not supported here');
    }
    addDockerImageAsset(asset) {
        const dest = this.manifest.defaultAddDockerImageAsset(this.boundStack, asset, {
            repositoryName: 'write-repo',
        });
        return this.cloudFormationLocationFromDockerImageAsset({
            ...dest,
            repositoryName: ['${', this.parameter.logicalId, '}'].join(''),
        });
    }
    synthesize(session) {
        // NOTE: Explicitly not adding template to asset manifest
        this.synthesizeTemplate(session);
        const assetManifestId = this.manifest.emitManifest(this.boundStack, session);
        this.emitArtifact(session, {
            additionalDependencies: [assetManifestId],
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXN5bnRoZXNpcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3VzdG9tLXN5bnRoZXNpcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQUVILDZCQUE2QjtBQUM3QixvREFBK0M7QUFDL0Msd0NBQXVOO0FBRXZOLGdDQUEwQztBQUUxQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLFFBQVE7SUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0lBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7UUFDcEMsV0FBVyxFQUFFLElBQUksaUJBQWlCLEVBQUU7S0FDckMsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksc0JBQWdCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtRQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDO0tBQzlDLENBQUMsQ0FBQztJQUNILElBQUksa0JBQVcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1FBQ3JDLElBQUksRUFBRSxtQkFBbUI7UUFDekIsVUFBVSxFQUFFO1lBQ1YsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QjtLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRSxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBMEIsQ0FBQztJQUU3RSxNQUFNLGFBQWEsR0FBRyxxQkFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsYUFBYSxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixFQUFFO1FBQ3ZELFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSwrSUFBK0ksRUFBRTtRQUN4SyxRQUFRLEVBQUUsa0VBQWtFO0tBQzdFLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3RCxZQUFZLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ3BDLGtFQUFrRSxFQUFFO2dCQUNsRSxZQUFZLEVBQUU7b0JBQ1osZ0NBQWdDLEVBQUU7d0JBQ2hDLGNBQWMsRUFBRSxZQUFZO3dCQUM1QixRQUFRLEVBQUUsa0VBQWtFO3FCQUM3RTtpQkFDRjtnQkFDRCxNQUFNLEVBQUU7b0JBQ04sU0FBUyxFQUFFLHdFQUF3RTtpQkFDcEY7YUFDRjtTQUNGLENBQUM7S0FDSCxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBa0IsU0FBUSx1QkFBZ0I7SUFBaEQ7O1FBQ21CLGFBQVEsR0FBRyxJQUFJLDJCQUFvQixFQUFFLENBQUM7SUFpQ3pELENBQUM7SUE5QkMsSUFBSSxDQUFDLEtBQVk7UUFDZixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQkFBWSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzVEO0lBRUQsWUFBWSxDQUFDLEtBQXNCO1FBQ2pDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztLQUNuRDtJQUVELG1CQUFtQixDQUFDLEtBQTZCO1FBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUU7WUFDNUUsY0FBYyxFQUFFLFlBQVk7U0FDN0IsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsMENBQTBDLENBQUM7WUFDckQsR0FBRyxJQUFJO1lBQ1AsY0FBYyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFVLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7U0FDaEUsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxVQUFVLENBQUMsT0FBMEI7UUFDbkMseURBQXlEO1FBQ3pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTdFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1lBQ3pCLHNCQUFzQixFQUFFLENBQUMsZUFBZSxDQUFDO1NBQzFDLENBQUMsQ0FBQztLQUNKO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZmlsZSBhc3NlcnRzIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gd3JpdGUgYSBjdXN0b20gc3RhY2tzeW50aGVzaXplciB0aGF0IHdpbGwgc3ludGhlc2l6ZVxuICogT05FIHRoaW5nIHRvIHRoZSBhc3NldCBtYW5pZmVzdCwgd2hpbGUgcmV0dXJuaW5nIGFub3RoZXIgdGhpbmcgKGluY2x1ZGluZyB0b2tlbnMpIHRvIHRoZVxuICogQ2xvdWRGb3JtYXRpb24gdGVtcGxhdGUgLS0gd2l0aG91dCByZWFjaGluZyBpbnRvIHRoZSBsaWJyYXJ5IGludGVybmFsc1xuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgU3RhY2tTeW50aGVzaXplciwgRmlsZUFzc2V0U291cmNlLCBGaWxlQXNzZXRMb2NhdGlvbiwgRG9ja2VySW1hZ2VBc3NldFNvdXJjZSwgRG9ja2VySW1hZ2VBc3NldExvY2F0aW9uLCBJU3ludGhlc2lzU2Vzc2lvbiwgQXBwLCBTdGFjaywgQXNzZXRNYW5pZmVzdEJ1aWxkZXIsIENmblBhcmFtZXRlciwgQ2ZuUmVzb3VyY2UgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEFzc2V0TWFuaWZlc3RBcnRpZmFjdCB9IGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgeyBEb2NrZXJJbWFnZUFzc2V0IH0gZnJvbSAnLi4vbGliJztcblxudGVzdCgndXNlIGN1c3RvbSBzeW50aGVzaXplcicsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdTdGFjaycsIHtcbiAgICBzeW50aGVzaXplcjogbmV3IEN1c3RvbVN5bnRoZXNpemVyKCksXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgYXNzZXQgPSBuZXcgRG9ja2VySW1hZ2VBc3NldChzdGFjaywgJ015QXNzZXQnLCB7XG4gICAgZGlyZWN0b3J5OiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZGVtby1pbWFnZScpLFxuICB9KTtcbiAgbmV3IENmblJlc291cmNlKHN0YWNrLCAnVGVzdFJlc291cmNlJywge1xuICAgIHR5cGU6ICdDREs6OlRlc3RSZXNvdXJjZScsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgSW1hZ2VVcmk6IGFzc2V0LmltYWdlVXJpLFxuICAgICAgSW1hZ2VUYWc6IGFzc2V0LmltYWdlVGFnLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgY29uc3QgYXNzZW1ibHkgPSBhcHAuc3ludGgoKTtcbiAgY29uc3Qgc3RhY2tBcnRpZmFjdCA9IGFzc2VtYmx5LmdldFN0YWNrQXJ0aWZhY3Qoc3RhY2suYXJ0aWZhY3RJZCk7XG4gIGNvbnN0IGFzc2V0QXJ0aWZhY3QgPSBzdGFja0FydGlmYWN0LmRlcGVuZGVuY2llc1swXSBhcyBBc3NldE1hbmlmZXN0QXJ0aWZhY3Q7XG5cbiAgY29uc3Qgc3RhY2tUZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21KU09OKHN0YWNrQXJ0aWZhY3QudGVtcGxhdGUpO1xuICBzdGFja1RlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQ0RLOjpUZXN0UmVzb3VyY2UnLCB7XG4gICAgSW1hZ2VVcmk6IHsgJ0ZuOjpTdWInOiAnJHtBV1M6OkFjY291bnRJZH0uZGtyLmVjci4ke0FXUzo6UmVnaW9ufS4ke0FXUzo6VVJMU3VmZml4fS8ke1JlcG9zaXRvcnlOYW1lfTowYTMzNTViZTEyMDUxYzk5ODRiZjJiMGIyYmJhNGU2ZWE1MzU5NjhlNWI2ZTczOTY0NDk3MDE3MzJmZTVlZDE0JyB9LFxuICAgIEltYWdlVGFnOiAnMGEzMzU1YmUxMjA1MWM5OTg0YmYyYjBiMmJiYTRlNmVhNTM1OTY4ZTViNmU3Mzk2NDQ5NzAxNzMyZmU1ZWQxNCcsXG4gIH0pO1xuXG4gIGV4cGVjdChhc3NldEFydGlmYWN0LmNvbnRlbnRzKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBkb2NrZXJJbWFnZXM6IGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICcwYTMzNTViZTEyMDUxYzk5ODRiZjJiMGIyYmJhNGU2ZWE1MzU5NjhlNWI2ZTczOTY0NDk3MDE3MzJmZTVlZDE0Jzoge1xuICAgICAgICBkZXN0aW5hdGlvbnM6IHtcbiAgICAgICAgICAnY3VycmVudF9hY2NvdW50LWN1cnJlbnRfcmVnaW9uJzoge1xuICAgICAgICAgICAgcmVwb3NpdG9yeU5hbWU6ICd3cml0ZS1yZXBvJyxcbiAgICAgICAgICAgIGltYWdlVGFnOiAnMGEzMzU1YmUxMjA1MWM5OTg0YmYyYjBiMmJiYTRlNmVhNTM1OTY4ZTViNmU3Mzk2NDQ5NzAxNzMyZmU1ZWQxNCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgZGlyZWN0b3J5OiAnYXNzZXQuMGEzMzU1YmUxMjA1MWM5OTg0YmYyYjBiMmJiYTRlNmVhNTM1OTY4ZTViNmU3Mzk2NDQ5NzAxNzMyZmU1ZWQxNCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KSk7XG59KTtcblxuY2xhc3MgQ3VzdG9tU3ludGhlc2l6ZXIgZXh0ZW5kcyBTdGFja1N5bnRoZXNpemVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtYW5pZmVzdCA9IG5ldyBBc3NldE1hbmlmZXN0QnVpbGRlcigpO1xuICBwcml2YXRlIHBhcmFtZXRlcj86IENmblBhcmFtZXRlcjtcblxuICBiaW5kKHN0YWNrOiBTdGFjaykge1xuICAgIHN1cGVyLmJpbmQoc3RhY2spO1xuXG4gICAgdGhpcy5wYXJhbWV0ZXIgPSBuZXcgQ2ZuUGFyYW1ldGVyKHN0YWNrLCAnUmVwb3NpdG9yeU5hbWUnKTtcbiAgfVxuXG4gIGFkZEZpbGVBc3NldChhc3NldDogRmlsZUFzc2V0U291cmNlKTogRmlsZUFzc2V0TG9jYXRpb24ge1xuICAgIHZvaWQoYXNzZXQpO1xuICAgIHRocm93IG5ldyBFcnJvcignZmlsZSBhc3NldHMgbm90IHN1cHBvcnRlZCBoZXJlJyk7XG4gIH1cblxuICBhZGREb2NrZXJJbWFnZUFzc2V0KGFzc2V0OiBEb2NrZXJJbWFnZUFzc2V0U291cmNlKTogRG9ja2VySW1hZ2VBc3NldExvY2F0aW9uIHtcbiAgICBjb25zdCBkZXN0ID0gdGhpcy5tYW5pZmVzdC5kZWZhdWx0QWRkRG9ja2VySW1hZ2VBc3NldCh0aGlzLmJvdW5kU3RhY2ssIGFzc2V0LCB7XG4gICAgICByZXBvc2l0b3J5TmFtZTogJ3dyaXRlLXJlcG8nLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmNsb3VkRm9ybWF0aW9uTG9jYXRpb25Gcm9tRG9ja2VySW1hZ2VBc3NldCh7XG4gICAgICAuLi5kZXN0LFxuICAgICAgcmVwb3NpdG9yeU5hbWU6IFsnJHsnLCB0aGlzLnBhcmFtZXRlciEubG9naWNhbElkLCAnfSddLmpvaW4oJycpLFxuICAgIH0pO1xuICB9XG5cbiAgc3ludGhlc2l6ZShzZXNzaW9uOiBJU3ludGhlc2lzU2Vzc2lvbik6IHZvaWQge1xuICAgIC8vIE5PVEU6IEV4cGxpY2l0bHkgbm90IGFkZGluZyB0ZW1wbGF0ZSB0byBhc3NldCBtYW5pZmVzdFxuICAgIHRoaXMuc3ludGhlc2l6ZVRlbXBsYXRlKHNlc3Npb24pO1xuICAgIGNvbnN0IGFzc2V0TWFuaWZlc3RJZCA9IHRoaXMubWFuaWZlc3QuZW1pdE1hbmlmZXN0KHRoaXMuYm91bmRTdGFjaywgc2Vzc2lvbik7XG5cbiAgICB0aGlzLmVtaXRBcnRpZmFjdChzZXNzaW9uLCB7XG4gICAgICBhZGRpdGlvbmFsRGVwZW5kZW5jaWVzOiBbYXNzZXRNYW5pZmVzdElkXSxcbiAgICB9KTtcbiAgfVxufVxuIl19