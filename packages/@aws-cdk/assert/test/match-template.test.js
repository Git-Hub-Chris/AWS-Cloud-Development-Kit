"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloud_artifact_1 = require("./cloud-artifact");
const lib_1 = require("../lib");
require("../jest");
describe('matchTemplate', () => {
    describe('exact match', () => {
        test('match on resources', () => {
            const stack = cloud_artifact_1.mkStack({
                Resources: {
                    FooResource: { Type: 'Foo::Bar' },
                },
            });
            expect(stack).toMatchTemplate({
                Resources: {
                    FooResource: { Type: 'Foo::Bar' },
                },
            }, lib_1.MatchStyle.EXACT);
            expect(stack).not.toMatchTemplate({
                Resources: {
                    FooResource: { Type: 'Foo::Baz' },
                },
            }, lib_1.MatchStyle.EXACT);
        });
        test('match on parameters', () => {
            const stack = cloud_artifact_1.mkStack({
                Parameters: {
                    FooParameter: { Type: 'String' },
                },
            });
            expect(stack).toMatchTemplate({
                Parameters: {
                    FooParameter: { Type: 'String' },
                },
            }, lib_1.MatchStyle.EXACT);
            expect(stack).not.toMatchTemplate({
                Parameters: {
                    BarParameter: { Type: 'String' },
                },
            }, lib_1.MatchStyle.EXACT);
        });
        test('match on outputs', () => {
            const stack = cloud_artifact_1.mkStack({
                Outputs: {
                    FooOutput: { Value: 'Foo' },
                },
            });
            expect(stack).toMatchTemplate({
                Outputs: {
                    FooOutput: { Value: 'Foo' },
                },
            }, lib_1.MatchStyle.EXACT);
            expect(stack).not.toMatchTemplate({
                Outputs: {
                    BarOutput: { Value: 'Bar' },
                },
            }, lib_1.MatchStyle.EXACT);
            expect(stack).not.toMatchTemplate({
                Outputs: {
                    FooOutput: { Value: 'Bar' },
                },
            }, lib_1.MatchStyle.EXACT);
        });
    });
    describe('superset match', () => {
        test('match on resources', () => {
            const stack = cloud_artifact_1.mkStack({
                Resources: {
                    FooResource: {
                        Type: 'Foo::Bar',
                    },
                    BazResource: {
                        Type: 'Foo::Baz',
                    },
                },
            });
            expect(stack).toMatchTemplate({
                Resources: {
                    FooResource: {
                        Type: 'Foo::Bar',
                    },
                },
            }, lib_1.MatchStyle.SUPERSET);
        });
        test('match on parameters', () => {
            const stack = cloud_artifact_1.mkStack({
                Parameters: {
                    FooParameter: { Type: 'String' },
                    BarParameter: { Type: 'String' },
                },
            });
            expect(stack).toMatchTemplate({
                Parameters: {
                    FooParameter: { Type: 'String' },
                },
            }, lib_1.MatchStyle.SUPERSET);
            expect(stack).not.toMatchTemplate({
                Parameters: {
                    FooParameter: { Type: 'String' },
                    BarParameter: { Type: 'Number' },
                },
            }, lib_1.MatchStyle.SUPERSET);
        });
        test('match on outputs', () => {
            const stack = cloud_artifact_1.mkStack({
                Outputs: {
                    FooOutput: { Value: 'Foo' },
                    BarOutput: { Value: 'Bar' },
                },
            });
            expect(stack).toMatchTemplate({
                Outputs: {
                    FooOutput: { Value: 'Foo' },
                },
            }, lib_1.MatchStyle.SUPERSET);
            expect(stack).not.toMatchTemplate({
                Outputs: {
                    FooOutput: { Value: 'Foo' },
                    BarOutput: { Value: 'Baz' },
                },
            }, lib_1.MatchStyle.SUPERSET);
            expect(stack).not.toMatchTemplate({
                Outputs: {
                    FooOutput: { Value: 'Bar' },
                    BazOutput: { Value: 'Bar' },
                },
            }, lib_1.MatchStyle.SUPERSET);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,