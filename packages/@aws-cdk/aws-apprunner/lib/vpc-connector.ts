import * as ec2 from '@aws-cdk/aws-ec2';
import * as cdk from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CfnVpcConnector } from './apprunner.generated';

/**
 * Properties of the AppRunner VPC Connector
 */
export interface VpcConnectorProps {
  /**
   * A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets.
   *
   * @default - the default security group of the VPC which allows all outbound traffic.
   */
  readonly securityGroups?: ec2.ISecurityGroup[];

  /**
    * A list of subnets that App Runner should use when it associates the service with a custom Amazon VPC.
    */
  readonly subnets: ec2.ISubnet[];

  /**
    * The name for the VpcConnector.
    *
    * @default - a name generated by CloudFormation
    */
  readonly vpcConnectorName?: string;
}

/**
 * Attributes for the App Runner VPC Connector
 */
export interface VpcConnectorAttributes {
  /**
   * The name of the VPC connector.
   */
  readonly vpcConnectorName: string;

  /**
   * The ARN of the VPC connector.
   */
  readonly vpcConnectorArn: string;

  /**
   * The revision of the VPC connector.
   */
  readonly vpcConnectorRevision: number;
}

/**
 * Represents the App Runner VPC Connector.
 */
export interface IVpcConnector extends cdk.IResource {
  /**
   * The Name of the VPC connector.
   */
  readonly vpcConnectorName: string;

  /**
   * The ARN of the VPC connector.
   */
  readonly vpcConnectorArn: string;
}

/**
 * The App Runner VPC Connector
 */
export class VpcConnector extends cdk.Resource {
  /**
   * Import from VPC connector name.
   */
  public static fromVpcConnectorName(scope: Construct, id: string, vpcConnectorName: string): IVpcConnector {
    class Import extends cdk.Resource {
      public vpcConnectorName = vpcConnectorName;
      public vpcConnectorArn = cdk.Stack.of(this).formatArn({
        resource: 'vpcconnector',
        service: 'apprunner',
        resourceName: vpcConnectorName,
      })
    }
    return new Import(scope, id);
  }

  /**
   * Import from VPC connector attributes.
   */
  public static fromServiceAttributes(scope: Construct, id: string, attrs: VpcConnectorAttributes): IVpcConnector {
    const vpcConnectorArn = attrs.vpcConnectorArn;
    const vpcConnectorName = attrs.vpcConnectorName;
    const vpcConnectorRevision = attrs.vpcConnectorRevision;

    class Import extends cdk.Resource {
      public readonly vpcConnectorArn = vpcConnectorArn
      public readonly vpcConnectorName = vpcConnectorName
      public readonly vpcConnectorRevision = vpcConnectorRevision
    }

    return new Import(scope, id);
  }
  private readonly props: VpcConnectorProps;

  /**
    * The ARN of the VPC connector.
    * @attribute
    */
  readonly vpcConnectorArn: string;

  /**
   * The revision of the VPC connector.
   * @attribute
   */
  readonly vpcConnectorRevision: number;

  /**
    * The name of the VPC connector.
    * @attribute
    */
  readonly vpcConnectorName: string;

  public constructor(scope: Construct, id: string, props: VpcConnectorProps) {
    super(scope, id);

    this.props = props;

    const resource = new CfnVpcConnector(this, 'VpcConnector', {
      subnets: this.props.subnets.map(subnet => subnet.subnetId),
      securityGroups: this.props.securityGroups?.map(securityGroup => securityGroup.securityGroupId),
      vpcConnectorName: this.props.vpcConnectorName,
    });

    this.vpcConnectorArn = resource.attrVpcConnectorArn;
    this.vpcConnectorRevision = resource.attrVpcConnectorRevision;
    this.vpcConnectorName = resource.ref;
  }
}