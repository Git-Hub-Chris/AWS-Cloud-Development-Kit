"use strict";var f=Object.create;var i=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var g=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of S(e))!C.call(t,s)&&s!==o&&i(t,s,{get:()=>e[s],enumerable:!(r=L(e,s))||r.enumerable});return t};var u=(t,e,o)=>(o=t!=null?f(w(t)):{},d(e||!t||!t.__esModule?i(o,"default",{value:t,enumerable:!0}):o,t)),D=t=>d(i({},"__esModule",{value:!0}),t);var k={};g(k,{handler:()=>N,managedDomainListHandler:()=>h,onCreateAndUpdate:()=>I});module.exports=D(k);var y=require("@aws-sdk/client-route53resolver");var m=u(require("https")),R=u(require("url")),n={sendHttpRequest:x,log:b,includeStackTraces:!0,userHandlerIndex:"./index"},l="AWSCDK::CustomResourceProviderFramework::CREATE_FAILED",P="AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";function p(t){return async(e,o)=>{let r={...e,ResponseURL:"..."};if(n.log(JSON.stringify(r,void 0,2)),e.RequestType==="Delete"&&e.PhysicalResourceId===l){n.log("ignoring DELETE event caused by a failed CREATE event"),await c("SUCCESS",e);return}try{let s=await t(r,o),a=A(e,s);await c("SUCCESS",a)}catch(s){let a={...e,Reason:n.includeStackTraces?s.stack:s.message};a.PhysicalResourceId||(e.RequestType==="Create"?(n.log("CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"),a.PhysicalResourceId=l):n.log(`ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(e)}`)),await c("FAILED",a)}}}function A(t,e={}){let o=e.PhysicalResourceId??t.PhysicalResourceId??t.RequestId;if(t.RequestType==="Delete"&&o!==t.PhysicalResourceId)throw new Error(`DELETE: cannot change the physical resource ID from "${t.PhysicalResourceId}" to "${e.PhysicalResourceId}" during deletion`);return{...t,...e,PhysicalResourceId:o}}async function c(t,e){let o={Status:t,Reason:e.Reason??t,StackId:e.StackId,RequestId:e.RequestId,PhysicalResourceId:e.PhysicalResourceId||P,LogicalResourceId:e.LogicalResourceId,NoEcho:e.NoEcho,Data:e.Data};n.log("submit response to cloudformation",o);let r=JSON.stringify(o),s=R.parse(e.ResponseURL),a={hostname:s.hostname,path:s.path,method:"PUT",headers:{"content-type":"","content-length":Buffer.byteLength(r,"utf8")}};await F({attempts:5,sleep:1e3},n.sendHttpRequest)(a,r)}async function x(t,e){return new Promise((o,r)=>{try{let s=m.request(t,a=>o());s.on("error",r),s.write(e),s.end()}catch(s){r(s)}})}function b(t,...e){console.log(t,...e)}function F(t,e){return async(...o)=>{let r=t.attempts,s=t.sleep;for(;;)try{return await e(...o)}catch(a){if(r--<=0)throw a;await H(Math.floor(Math.random()*s)),s*=2}}}async function H(t){return new Promise(e=>setTimeout(e,t))}var T=new y.Route53Resolver({}),N=p(h);async function h(t){switch(t.RequestType){case"Create":case"Update":let e=t.ResourceProperties?.DomainListName;return await I(e);case"Delete":return}}async function I(t){let o=(await E()).find(r=>r.ManagedOwnerName==="Route 53 Resolver DNS Firewall"&&r.Name===t)?.Id??void 0;if(!o)throw new Error(`Domain list with the name ${t} could not be found.`);return{Data:{DomainListId:o}}}async function E(t){let e=await T.listFirewallDomainLists({NextToken:t}),o=e.FirewallDomainLists??[];return e.NextToken?o.concat(await E(e.NextToken)):o}0&&(module.exports={handler,managedDomainListHandler,onCreateAndUpdate});
