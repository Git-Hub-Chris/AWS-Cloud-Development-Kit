"use strict";
/**
 * This file asserts that it is possible to write a custom stacksynthesizer that will synthesize
 * ONE thing to the asset manifest, while returning another thing (including tokens) to the
 * CloudFormation template -- without reaching into the library internals
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const assertions_1 = require("@aws-cdk/assertions");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
test('use custom synthesizer', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Stack', {
        synthesizer: new CustomSynthesizer(),
    });
    // WHEN
    const asset = new lib_1.Asset(stack, 'MyAsset', {
        path: path.join(__dirname, 'file-asset.txt'),
    });
    new core_1.CfnResource(stack, 'TestResource', {
        type: 'CDK::TestResource',
        properties: {
            Bucket: asset.s3BucketName,
            ObjectKey: asset.s3ObjectKey,
            S3Url: asset.s3ObjectUrl,
            HttpUrl: asset.httpUrl,
        },
    });
    // THEN
    const assembly = app.synth();
    const stackArtifact = assembly.getStackArtifact(stack.artifactId);
    const assetArtifact = stackArtifact.dependencies[0];
    const stackTemplate = assertions_1.Template.fromJSON(stackArtifact.template);
    stackTemplate.hasResourceProperties('CDK::TestResource', {
        Bucket: { 'Fn::Sub': '${BucketName}' },
        ObjectKey: '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
        S3Url: { 'Fn::Sub': 's3://${BucketName}/78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt' },
        HttpUrl: { 'Fn::Sub': 'https://s3.${AWS::Region}.${AWS::URLSuffix}/${BucketName}/78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt' },
    });
    expect(assetArtifact.contents).toEqual(expect.objectContaining({
        files: expect.objectContaining({
            '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197': {
                destinations: {
                    'current_account-current_region': {
                        bucketName: 'write-bucket',
                        objectKey: '78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
                    },
                },
                source: {
                    packaging: 'file',
                    path: 'asset.78add9eaf468dfa2191da44a7da92a21baba4c686cf6053d772556768ef21197.txt',
                },
            },
        }),
    }));
});
class CustomSynthesizer extends core_1.StackSynthesizer {
    constructor() {
        super(...arguments);
        this.manifest = new core_1.AssetManifestBuilder();
    }
    bind(stack) {
        super.bind(stack);
        this.parameter = new core_1.CfnParameter(stack, 'BucketName');
    }
    addFileAsset(asset) {
        const dest = this.manifest.defaultAddFileAsset(this.boundStack, asset, {
            bucketName: 'write-bucket',
        });
        return this.cloudFormationLocationFromFileAsset({
            ...dest,
            bucketName: ['${', this.parameter.logicalId, '}'].join(''),
        });
    }
    addDockerImageAsset(asset) {
        void (asset);
        throw new Error('Docker images are not supported here');
    }
    synthesize(session) {
        const templateAsset = this.addFileAsset(this.synthesizeTemplate(session));
        const assetManifestId = this.manifest.emitManifest(this.boundStack, session);
        this.emitArtifact(session, {
            stackTemplateAssetObjectUrl: templateAsset.s3ObjectUrlWithPlaceholders,
            additionalDependencies: [assetManifestId],
        });
    }
}
//# sourceMappingURL=data:application/json;base64,