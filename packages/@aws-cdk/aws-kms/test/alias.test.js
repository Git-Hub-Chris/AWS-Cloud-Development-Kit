"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("@aws-cdk/assertions");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const constructs_1 = require("constructs");
const alias_1 = require("../lib/alias");
const key_1 = require("../lib/key");
test('default alias', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    const key = new key_1.Key(stack, 'Key');
    new alias_1.Alias(stack, 'Alias', { targetKey: key, aliasName: 'alias/foo' });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::KMS::Alias', {
        AliasName: 'alias/foo',
        TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
    });
});
test('add "alias/" prefix if not given.', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    const key = new key_1.Key(stack, 'Key', {
        enableKeyRotation: true,
        enabled: false,
    });
    new alias_1.Alias(stack, 'Alias', {
        aliasName: 'foo',
        targetKey: key,
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::KMS::Alias', {
        AliasName: 'alias/foo',
        TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
    });
});
test('can create alias directly while creating the key', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    new key_1.Key(stack, 'Key', {
        enableKeyRotation: true,
        enabled: false,
        alias: 'foo',
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::KMS::Alias', {
        AliasName: 'alias/foo',
        TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
    });
});
test('fails if alias is "alias/" (and nothing more)', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    const key = new key_1.Key(stack, 'MyKey', {
        enableKeyRotation: true,
        enabled: false,
    });
    expect(() => new alias_1.Alias(stack, 'Alias', {
        aliasName: 'alias/',
        targetKey: key,
    })).toThrow(/Alias must include a value after/);
});
test('fails if alias contains illegal characters', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    const key = new key_1.Key(stack, 'MyKey', {
        enableKeyRotation: true,
        enabled: false,
    });
    expect(() => new alias_1.Alias(stack, 'Alias', {
        aliasName: 'alias/@Nope',
        targetKey: key,
    })).toThrow('a-zA-Z0-9:/_-');
});
test('fails if alias starts with "alias/aws/"', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'Test');
    const key = new key_1.Key(stack, 'MyKey', {
        enableKeyRotation: true,
        enabled: false,
    });
    expect(() => new alias_1.Alias(stack, 'Alias1', {
        aliasName: 'alias/aws/',
        targetKey: key,
    })).toThrow(/Alias cannot start with alias\/aws\/: alias\/aws\//);
    expect(() => new alias_1.Alias(stack, 'Alias2', {
        aliasName: 'alias/aws/Awesome',
        targetKey: key,
    })).toThrow(/Alias cannot start with alias\/aws\/: alias\/aws\/Awesome/);
    expect(() => new alias_1.Alias(stack, 'Alias3', {
        aliasName: 'alias/AWS/awesome',
        targetKey: key,
    })).toThrow(/Alias cannot start with alias\/aws\/: alias\/AWS\/awesome/);
});
test('can be used wherever a key is expected', () => {
    const stack = new core_1.Stack();
    const myKey = new key_1.Key(stack, 'MyKey', {
        enableKeyRotation: true,
        enabled: false,
    });
    const myAlias = new alias_1.Alias(stack, 'MyAlias', {
        targetKey: myKey,
        aliasName: 'alias/myAlias',
    });
    /* eslint-disable @aws-cdk/no-core-construct */
    class MyConstruct extends constructs_1.Construct {
        constructor(scope, id, key) {
            super(scope, id);
            new core_1.CfnOutput(stack, 'OutId', {
                value: key.keyId,
            });
            new core_1.CfnOutput(stack, 'OutArn', {
                value: key.keyArn,
            });
        }
    }
    new MyConstruct(stack, 'MyConstruct', myAlias);
    /* eslint-enable @aws-cdk/no-core-construct */
    assertions_1.Template.fromStack(stack).hasOutput('OutId', {
        Value: 'alias/myAlias',
    });
    assertions_1.Template.fromStack(stack).hasOutput('OutArn', {
        Value: {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':kms:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':alias/myAlias',
                ]],
        },
    });
});
test('imported alias by name - can be used where a key is expected', () => {
    const stack = new core_1.Stack();
    const myAlias = alias_1.Alias.fromAliasName(stack, 'MyAlias', 'alias/myAlias');
    /* eslint-disable @aws-cdk/no-core-construct */
    class MyConstruct extends constructs_1.Construct {
        constructor(scope, id, key) {
            super(scope, id);
            new core_1.CfnOutput(stack, 'OutId', {
                value: key.keyId,
            });
            new core_1.CfnOutput(stack, 'OutArn', {
                value: key.keyArn,
            });
        }
    }
    new MyConstruct(stack, 'MyConstruct', myAlias);
    /* eslint-enable @aws-cdk/no-core-construct */
    assertions_1.Template.fromStack(stack).hasOutput('OutId', {
        Value: 'alias/myAlias',
    });
    assertions_1.Template.fromStack(stack).hasOutput('OutArn', {
        Value: {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':kms:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':alias/myAlias',
                ]],
        },
    });
});
test('imported alias by name - will throw an error when accessing the key', () => {
    const stack = new core_1.Stack();
    const myAlias = alias_1.Alias.fromAliasName(stack, 'MyAlias', 'alias/myAlias');
    expect(() => myAlias.aliasTargetKey).toThrow('Cannot access aliasTargetKey on an Alias imported by Alias.fromAliasName().');
});
test('fails if alias policy is invalid', () => {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'my-stack');
    const key = new key_1.Key(stack, 'MyKey');
    const alias = new alias_1.Alias(stack, 'Alias', { targetKey: key, aliasName: 'alias/foo' });
    alias.addToResourcePolicy(new aws_iam_1.PolicyStatement({
        resources: ['*'],
        principals: [new aws_iam_1.ArnPrincipal('arn')],
    }));
    expect(() => app.synth()).toThrow(/A PolicyStatement must specify at least one \'action\' or \'notAction\'/);
});
//# sourceMappingURL=data:application/json;base64,