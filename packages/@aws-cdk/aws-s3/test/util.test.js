"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const util_1 = require("../lib/util");
describe('utils', () => {
    describe('parseBucketArn', () => {
        test('explicit arn', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'my:bucket:arn';
            expect(util_1.parseBucketArn(stack, { bucketArn })).toEqual(bucketArn);
        });
        test('produce arn from bucket name', () => {
            const stack = new cdk.Stack();
            const bucketName = 'hello';
            expect(stack.resolve(util_1.parseBucketArn(stack, { bucketName }))).toEqual({
                'Fn::Join': ['',
                    ['arn:',
                        { Ref: 'AWS::Partition' },
                        ':s3:::hello']],
            });
        });
        test('fails if neither arn nor name are provided', () => {
            const stack = new cdk.Stack();
            expect(() => util_1.parseBucketArn(stack, {})).toThrow(/Cannot determine bucket ARN. At least `bucketArn` or `bucketName` is needed/);
        });
    });
    describe('parseBucketName', () => {
        test('explicit name', () => {
            const stack = new cdk.Stack();
            const bucketName = 'foo';
            expect(stack.resolve(util_1.parseBucketName(stack, { bucketName }))).toEqual('foo');
        });
        test('extract bucket name from string arn', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'arn:aws:s3:::my-bucket';
            expect(stack.resolve(util_1.parseBucketName(stack, { bucketArn }))).toEqual('my-bucket');
        });
        test('can parse bucket name even if it contains a token', () => {
            const stack = new cdk.Stack();
            const bucketArn = `arn:aws:s3:::${cdk.Token.asString({ Ref: 'my-bucket' })}`;
            expect(stack.resolve(util_1.parseBucketName(stack, { bucketArn }))).toEqual({ Ref: 'my-bucket' });
        });
        test('fails if ARN has invalid format', () => {
            const stack = new cdk.Stack();
            const bucketArn = 'invalid-arn';
            expect(() => util_1.parseBucketName(stack, { bucketArn })).toThrow(/ARNs must/);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXRpbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLHNDQUE4RDtBQUU5RCxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUNyQixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQztZQUNsQyxNQUFNLENBQUMscUJBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtZQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7WUFDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMscUJBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ25FLFVBQVUsRUFDUixDQUFDLEVBQUU7b0JBQ0QsQ0FBQyxNQUFNO3dCQUNMLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFO3dCQUN6QixhQUFhLENBQUMsQ0FBQzthQUN0QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDdEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7UUFDakksQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFFL0IsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLHNCQUFlLENBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixNQUFNLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQztZQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxzQkFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtREFBbUQsRUFBRSxHQUFHLEVBQUU7WUFDN0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUU3RSxNQUFNLENBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxzQkFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FDckQsQ0FBQyxPQUFPLENBQ1AsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLENBQ3JCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgcGFyc2VCdWNrZXRBcm4sIHBhcnNlQnVja2V0TmFtZSB9IGZyb20gJy4uL2xpYi91dGlsJztcblxuZGVzY3JpYmUoJ3V0aWxzJywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFyc2VCdWNrZXRBcm4nLCAoKSA9PiB7XG4gICAgdGVzdCgnZXhwbGljaXQgYXJuJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBidWNrZXRBcm4gPSAnbXk6YnVja2V0OmFybic7XG4gICAgICBleHBlY3QocGFyc2VCdWNrZXRBcm4oc3RhY2ssIHsgYnVja2V0QXJuIH0pKS50b0VxdWFsKGJ1Y2tldEFybik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdwcm9kdWNlIGFybiBmcm9tIGJ1Y2tldCBuYW1lJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBidWNrZXROYW1lID0gJ2hlbGxvJztcbiAgICAgIGV4cGVjdChzdGFjay5yZXNvbHZlKHBhcnNlQnVja2V0QXJuKHN0YWNrLCB7IGJ1Y2tldE5hbWUgfSkpKS50b0VxdWFsKHtcbiAgICAgICAgJ0ZuOjpKb2luJzpcbiAgICAgICAgICBbJycsXG4gICAgICAgICAgICBbJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAnOnMzOjo6aGVsbG8nXV0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ZhaWxzIGlmIG5laXRoZXIgYXJuIG5vciBuYW1lIGFyZSBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlQnVja2V0QXJuKHN0YWNrLCB7fSkpLnRvVGhyb3coL0Nhbm5vdCBkZXRlcm1pbmUgYnVja2V0IEFSTi4gQXQgbGVhc3QgYGJ1Y2tldEFybmAgb3IgYGJ1Y2tldE5hbWVgIGlzIG5lZWRlZC8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGFyc2VCdWNrZXROYW1lJywgKCkgPT4ge1xuXG4gICAgdGVzdCgnZXhwbGljaXQgbmFtZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgYnVja2V0TmFtZSA9ICdmb28nO1xuICAgICAgZXhwZWN0KHN0YWNrLnJlc29sdmUocGFyc2VCdWNrZXROYW1lKHN0YWNrLCB7IGJ1Y2tldE5hbWUgfSkpKS50b0VxdWFsKCdmb28nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2V4dHJhY3QgYnVja2V0IG5hbWUgZnJvbSBzdHJpbmcgYXJuJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBidWNrZXRBcm4gPSAnYXJuOmF3czpzMzo6Om15LWJ1Y2tldCc7XG4gICAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZShwYXJzZUJ1Y2tldE5hbWUoc3RhY2ssIHsgYnVja2V0QXJuIH0pKSkudG9FcXVhbCgnbXktYnVja2V0Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdjYW4gcGFyc2UgYnVja2V0IG5hbWUgZXZlbiBpZiBpdCBjb250YWlucyBhIHRva2VuJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBidWNrZXRBcm4gPSBgYXJuOmF3czpzMzo6OiR7Y2RrLlRva2VuLmFzU3RyaW5nKHsgUmVmOiAnbXktYnVja2V0JyB9KX1gO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHN0YWNrLnJlc29sdmUocGFyc2VCdWNrZXROYW1lKHN0YWNrLCB7IGJ1Y2tldEFybiB9KSksXG4gICAgICApLnRvRXF1YWwoXG4gICAgICAgIHsgUmVmOiAnbXktYnVja2V0JyB9LFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ZhaWxzIGlmIEFSTiBoYXMgaW52YWxpZCBmb3JtYXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldEFybiA9ICdpbnZhbGlkLWFybic7XG4gICAgICBleHBlY3QoKCkgPT4gcGFyc2VCdWNrZXROYW1lKHN0YWNrLCB7IGJ1Y2tldEFybiB9KSkudG9UaHJvdygvQVJOcyBtdXN0Lyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=