"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const redshift_data_1 = require("./redshift-data");
const util_1 = require("./util");
async function handler(props, event) {
    const groupName = props.groupName;
    const users = props.users ?? [];
    const clusterProps = props;
    if (event.RequestType === 'Create') {
        await createGroup(groupName, users, clusterProps);
        return { PhysicalResourceId: (0, util_1.makePhysicalId)(groupName, clusterProps, event.RequestId), Data: { groupName: groupName } };
    }
    else if (event.RequestType === 'Delete') {
        await dropGroup(groupName, clusterProps);
        return;
    }
    else if (event.RequestType === 'Update') {
        const { replace } = await updateGroup(groupName, users, clusterProps, event.OldResourceProperties);
        const physicalId = replace ? (0, util_1.makePhysicalId)(groupName, clusterProps, event.RequestId) : event.PhysicalResourceId;
        return { PhysicalResourceId: physicalId, Data: { groupName: groupName } };
    }
    else {
        /* eslint-disable-next-line dot-notation */
        throw new Error(`Unrecognized event type: ${event['RequestType']}`);
    }
}
exports.handler = handler;
async function dropGroup(groupName, clusterProps) {
    await (0, redshift_data_1.executeStatement)(`DROP GROUP ${groupName}`, clusterProps);
}
async function createGroup(groupName, users, clusterProps) {
    await (0, redshift_data_1.executeStatement)(`CREATE GROUP ${groupName}${getUserOnCreationString(users)}`, clusterProps);
}
async function updateGroup(groupName, users, clusterProps, oldResourceProperties) {
    const oldClusterProps = oldResourceProperties;
    if (clusterProps.clusterName !== oldClusterProps.clusterName || clusterProps.databaseName !== oldClusterProps.databaseName) {
        await createGroup(groupName, users, clusterProps);
        return { replace: true };
    }
    const oldGroupName = oldResourceProperties.groupName;
    if (groupName !== oldGroupName) {
        await createGroup(groupName, users, clusterProps);
        return { replace: true };
    }
    const oldUsers = oldResourceProperties.users ?? [];
    if (users.length !== oldUsers.length ||
        users.some((user) => !oldUsers.includes(user)) ||
        oldUsers.some((user) => !users.includes(user))) {
        await createGroup(groupName, users, clusterProps);
        return { replace: true };
    }
    return { replace: false };
}
function getUserOnCreationString(users) {
    if (users.length > 0) {
        return ` WITH USER ${users.join(', ')}`;
    }
    return '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXItZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsbURBQW1EO0FBRW5ELGlDQUF3QztBQUVqQyxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQTJDLEVBQUUsS0FBa0Q7SUFDM0gsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNsQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUM7SUFFM0IsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsRUFBRTtRQUNsQyxNQUFNLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxJQUFBLHFCQUFjLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7S0FDekg7U0FBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ3pDLE1BQU0sU0FBUyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN6QyxPQUFPO0tBQ1I7U0FBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ3pDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLFdBQVcsQ0FDbkMsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEVBQ1osS0FBSyxDQUFDLHFCQUE2RCxDQUNwRSxDQUFDO1FBQ0YsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFBLHFCQUFjLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUNqSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO0tBQzNFO1NBQU07UUFDTCwyQ0FBMkM7UUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNyRTtBQUNILENBQUM7QUF4QkQsMEJBd0JDO0FBRUQsS0FBSyxVQUFVLFNBQVMsQ0FBQyxTQUFpQixFQUFFLFlBQTBCO0lBQ3BFLE1BQU0sSUFBQSxnQ0FBZ0IsRUFBQyxjQUFjLFNBQVMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLFNBQWlCLEVBQUUsS0FBZSxFQUFFLFlBQTBCO0lBQ3ZGLE1BQU0sSUFBQSxnQ0FBZ0IsRUFBQyxnQkFBZ0IsU0FBUyxHQUFHLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDckcsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQ3hCLFNBQWlCLEVBQ2pCLEtBQWUsRUFDZixZQUEwQixFQUMxQixxQkFBMkQ7SUFFM0QsTUFBTSxlQUFlLEdBQUcscUJBQXFCLENBQUM7SUFDOUMsSUFBSSxZQUFZLENBQUMsV0FBVyxLQUFLLGVBQWUsQ0FBQyxXQUFXLElBQUksWUFBWSxDQUFDLFlBQVksS0FBSyxlQUFlLENBQUMsWUFBWSxFQUFFO1FBQzFILE1BQU0sV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUMxQjtJQUVELE1BQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztJQUNyRCxJQUFJLFNBQVMsS0FBSyxZQUFZLEVBQUU7UUFDOUIsTUFBTSxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNsRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQzFCO0lBRUQsTUFBTSxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUNuRCxJQUNFLEtBQUssQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLE1BQU07UUFDaEMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM5QztRQUNBLE1BQU0sV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUMxQjtJQUVELE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsS0FBZTtJQUM5QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sY0FBYyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7S0FDekM7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbmltcG9ydCAqIGFzIEFXU0xhbWJkYSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IFVzZXJHcm91cEhhbmRsZXJQcm9wcyB9IGZyb20gJy4uL2hhbmRsZXItcHJvcHMnO1xuaW1wb3J0IHsgZXhlY3V0ZVN0YXRlbWVudCB9IGZyb20gJy4vcmVkc2hpZnQtZGF0YSc7XG5pbXBvcnQgeyBDbHVzdGVyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IG1ha2VQaHlzaWNhbElkIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocHJvcHM6IFVzZXJHcm91cEhhbmRsZXJQcm9wcyAmIENsdXN0ZXJQcm9wcywgZXZlbnQ6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQpIHtcbiAgY29uc3QgZ3JvdXBOYW1lID0gcHJvcHMuZ3JvdXBOYW1lO1xuICBjb25zdCB1c2VycyA9IHByb3BzLnVzZXJzID8/IFtdO1xuICBjb25zdCBjbHVzdGVyUHJvcHMgPSBwcm9wcztcblxuICBpZiAoZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdDcmVhdGUnKSB7XG4gICAgYXdhaXQgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lLCB1c2VycywgY2x1c3RlclByb3BzKTtcbiAgICByZXR1cm4geyBQaHlzaWNhbFJlc291cmNlSWQ6IG1ha2VQaHlzaWNhbElkKGdyb3VwTmFtZSwgY2x1c3RlclByb3BzLCBldmVudC5SZXF1ZXN0SWQpLCBEYXRhOiB7IGdyb3VwTmFtZTogZ3JvdXBOYW1lIH0gfTtcbiAgfSBlbHNlIGlmIChldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ0RlbGV0ZScpIHtcbiAgICBhd2FpdCBkcm9wR3JvdXAoZ3JvdXBOYW1lLCBjbHVzdGVyUHJvcHMpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ1VwZGF0ZScpIHtcbiAgICBjb25zdCB7IHJlcGxhY2UgfSA9IGF3YWl0IHVwZGF0ZUdyb3VwKFxuICAgICAgZ3JvdXBOYW1lLFxuICAgICAgdXNlcnMsXG4gICAgICBjbHVzdGVyUHJvcHMsXG4gICAgICBldmVudC5PbGRSZXNvdXJjZVByb3BlcnRpZXMgYXMgVXNlckdyb3VwSGFuZGxlclByb3BzICYgQ2x1c3RlclByb3BzLFxuICAgICk7XG4gICAgY29uc3QgcGh5c2ljYWxJZCA9IHJlcGxhY2UgPyBtYWtlUGh5c2ljYWxJZChncm91cE5hbWUsIGNsdXN0ZXJQcm9wcywgZXZlbnQuUmVxdWVzdElkKSA6IGV2ZW50LlBoeXNpY2FsUmVzb3VyY2VJZDtcbiAgICByZXR1cm4geyBQaHlzaWNhbFJlc291cmNlSWQ6IHBoeXNpY2FsSWQsIERhdGE6IHsgZ3JvdXBOYW1lOiBncm91cE5hbWUgfSB9O1xuICB9IGVsc2Uge1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkb3Qtbm90YXRpb24gKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBldmVudCB0eXBlOiAke2V2ZW50WydSZXF1ZXN0VHlwZSddfWApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRyb3BHcm91cChncm91cE5hbWU6IHN0cmluZywgY2x1c3RlclByb3BzOiBDbHVzdGVyUHJvcHMpIHtcbiAgYXdhaXQgZXhlY3V0ZVN0YXRlbWVudChgRFJPUCBHUk9VUCAke2dyb3VwTmFtZX1gLCBjbHVzdGVyUHJvcHMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVHcm91cChncm91cE5hbWU6IHN0cmluZywgdXNlcnM6IHN0cmluZ1tdLCBjbHVzdGVyUHJvcHM6IENsdXN0ZXJQcm9wcykge1xuICBhd2FpdCBleGVjdXRlU3RhdGVtZW50KGBDUkVBVEUgR1JPVVAgJHtncm91cE5hbWV9JHtnZXRVc2VyT25DcmVhdGlvblN0cmluZyh1c2Vycyl9YCwgY2x1c3RlclByb3BzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlR3JvdXAoXG4gIGdyb3VwTmFtZTogc3RyaW5nLFxuICB1c2Vyczogc3RyaW5nW10sXG4gIGNsdXN0ZXJQcm9wczogQ2x1c3RlclByb3BzLFxuICBvbGRSZXNvdXJjZVByb3BlcnRpZXM6IFVzZXJHcm91cEhhbmRsZXJQcm9wcyAmIENsdXN0ZXJQcm9wcyxcbik6IFByb21pc2U8eyByZXBsYWNlOiBib29sZWFuIH0+IHtcbiAgY29uc3Qgb2xkQ2x1c3RlclByb3BzID0gb2xkUmVzb3VyY2VQcm9wZXJ0aWVzO1xuICBpZiAoY2x1c3RlclByb3BzLmNsdXN0ZXJOYW1lICE9PSBvbGRDbHVzdGVyUHJvcHMuY2x1c3Rlck5hbWUgfHwgY2x1c3RlclByb3BzLmRhdGFiYXNlTmFtZSAhPT0gb2xkQ2x1c3RlclByb3BzLmRhdGFiYXNlTmFtZSkge1xuICAgIGF3YWl0IGNyZWF0ZUdyb3VwKGdyb3VwTmFtZSwgdXNlcnMsIGNsdXN0ZXJQcm9wcyk7XG4gICAgcmV0dXJuIHsgcmVwbGFjZTogdHJ1ZSB9O1xuICB9XG5cbiAgY29uc3Qgb2xkR3JvdXBOYW1lID0gb2xkUmVzb3VyY2VQcm9wZXJ0aWVzLmdyb3VwTmFtZTtcbiAgaWYgKGdyb3VwTmFtZSAhPT0gb2xkR3JvdXBOYW1lKSB7XG4gICAgYXdhaXQgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lLCB1c2VycywgY2x1c3RlclByb3BzKTtcbiAgICByZXR1cm4geyByZXBsYWNlOiB0cnVlIH07XG4gIH1cblxuICBjb25zdCBvbGRVc2VycyA9IG9sZFJlc291cmNlUHJvcGVydGllcy51c2VycyA/PyBbXTtcbiAgaWYgKFxuICAgIHVzZXJzLmxlbmd0aCAhPT0gb2xkVXNlcnMubGVuZ3RoIHx8XG4gICAgdXNlcnMuc29tZSgodXNlcikgPT4gIW9sZFVzZXJzLmluY2x1ZGVzKHVzZXIpKSB8fFxuICAgIG9sZFVzZXJzLnNvbWUoKHVzZXIpID0+ICF1c2Vycy5pbmNsdWRlcyh1c2VyKSlcbiAgKSB7XG4gICAgYXdhaXQgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lLCB1c2VycywgY2x1c3RlclByb3BzKTtcbiAgICByZXR1cm4geyByZXBsYWNlOiB0cnVlIH07XG4gIH1cblxuICByZXR1cm4geyByZXBsYWNlOiBmYWxzZSB9O1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyT25DcmVhdGlvblN0cmluZyh1c2Vyczogc3RyaW5nW10pOiBzdHJpbmcge1xuICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBgIFdJVEggVVNFUiAke3VzZXJzLmpvaW4oJywgJyl9YDtcbiAgfVxuICByZXR1cm4gJyc7XG59Il19