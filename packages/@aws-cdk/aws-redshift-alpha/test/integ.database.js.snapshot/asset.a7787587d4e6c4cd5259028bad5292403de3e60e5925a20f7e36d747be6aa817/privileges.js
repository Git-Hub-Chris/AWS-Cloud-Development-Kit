"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const redshift_data_1 = require("./redshift-data");
const util_1 = require("./util");
async function handler(props, event) {
    const accessor = props.accessor;
    const tablePrivileges = props.tablePrivileges;
    const clusterProps = props;
    if (event.RequestType === 'Create') {
        await grantPrivileges(accessor, tablePrivileges, clusterProps);
        return { PhysicalResourceId: (0, util_1.makePhysicalId)(accessor.name, clusterProps, event.RequestId) };
    }
    else if (event.RequestType === 'Delete') {
        await revokePrivileges(accessor, tablePrivileges, clusterProps);
        return;
    }
    else if (event.RequestType === 'Update') {
        const { replace } = await updatePrivileges(accessor, tablePrivileges, clusterProps, event.OldResourceProperties);
        const physicalId = replace ? (0, util_1.makePhysicalId)(accessor.name, clusterProps, event.RequestId) : event.PhysicalResourceId;
        return { PhysicalResourceId: physicalId };
    }
    else {
        /* eslint-disable-next-line dot-notation */
        throw new Error(`Unrecognized event type: ${event['RequestType']}`);
    }
}
exports.handler = handler;
async function revokePrivileges(accessor, tablePrivileges, clusterProps) {
    await Promise.all(tablePrivileges.map(({ tableName, actions }) => {
        return (0, redshift_data_1.executeStatement)(`REVOKE ${actions.join(', ')} ON ${tableName} FROM ${getAccessorString(accessor)}`, clusterProps);
    }));
}
async function grantPrivileges(accessor, tablePrivileges, clusterProps) {
    await Promise.all(tablePrivileges.map(({ tableName, actions }) => {
        return (0, redshift_data_1.executeStatement)(`GRANT ${actions.join(', ')} ON ${tableName} TO ${getAccessorString(accessor)}`, clusterProps);
    }));
}
async function updatePrivileges(accessor, tablePrivileges, clusterProps, oldResourceProperties) {
    const oldClusterProps = oldResourceProperties;
    if (clusterProps.clusterName !== oldClusterProps.clusterName || clusterProps.databaseName !== oldClusterProps.databaseName) {
        await grantPrivileges(accessor, tablePrivileges, clusterProps);
        return { replace: true };
    }
    const oldAccessor = oldResourceProperties.accessor;
    const oldUsername = oldResourceProperties.username;
    if ((oldAccessor?.name ?? oldUsername) !== accessor.name) {
        await grantPrivileges(accessor, tablePrivileges, clusterProps);
        return { replace: true };
    }
    const oldTablePrivileges = oldResourceProperties.tablePrivileges;
    if (oldTablePrivileges !== tablePrivileges) {
        await revokePrivileges(accessor, oldTablePrivileges, clusterProps);
        await grantPrivileges(accessor, tablePrivileges, clusterProps);
        return { replace: false };
    }
    return { replace: false };
}
function getAccessorString(accessor) {
    const res = accessor.name;
    if (accessor.accessorType === 'USER') {
        return res;
    }
    return `${accessor.accessorType} ${res}`;
}
//# sourceMappingURL=data:application/json;base64,