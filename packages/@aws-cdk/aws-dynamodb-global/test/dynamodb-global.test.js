"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("@aws-cdk/assertions");
const aws_dynamodb_1 = require("@aws-cdk/aws-dynamodb");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
/* eslint-disable quote-props */
// CDK parameters
const CONSTRUCT_NAME = 'aws-cdk-dynamodb-global';
// DynamoDB table parameters
const TABLE_NAME = 'GlobalTable';
const TABLE_PARTITION_KEY = { name: 'hashKey', type: aws_dynamodb_1.AttributeType.STRING };
const STACK_PROPS = {
    partitionKey: TABLE_PARTITION_KEY,
    tableName: TABLE_NAME,
    regions: ['us-east-1', 'us-east-2', 'us-west-2'],
};
cdk_build_tools_1.describeDeprecated('Default Global DynamoDB stack', () => {
    test('global dynamo', () => {
        const stack = new core_1.Stack();
        new lib_1.GlobalTable(stack, CONSTRUCT_NAME, STACK_PROPS);
        const topStack = stack.node.findChild(CONSTRUCT_NAME);
        for (const reg of STACK_PROPS.regions) {
            const tableStack = topStack.node.findChild(CONSTRUCT_NAME + '-' + reg);
            assertions_1.Template.fromStack(tableStack).hasResourceProperties('AWS::DynamoDB::Table', {
                'KeySchema': [
                    {
                        'AttributeName': 'hashKey',
                        'KeyType': 'HASH',
                    },
                ],
                'AttributeDefinitions': [
                    {
                        'AttributeName': 'hashKey',
                        'AttributeType': 'S',
                    },
                ],
                'StreamSpecification': {
                    'StreamViewType': 'NEW_AND_OLD_IMAGES',
                },
                'TableName': 'GlobalTable',
            });
        }
        const customResourceStack = stack.node.findChild(CONSTRUCT_NAME + '-CustomResource');
        assertions_1.Template.fromStack(customResourceStack).hasResourceProperties('AWS::Lambda::Function', {
            Description: 'Lambda to make DynamoDB a global table',
            Handler: 'index.handler',
            Timeout: 300,
        });
        assertions_1.Template.fromStack(customResourceStack).hasResourceProperties('AWS::CloudFormation::CustomResource', {
            Regions: STACK_PROPS.regions,
            ResourceType: 'Custom::DynamoGlobalTableCoordinator',
            TableName: TABLE_NAME,
        });
    });
});
cdk_build_tools_1.testDeprecated('GlobalTable generated stacks inherit their account from the parent stack', () => {
    const app = new core_1.App({ context: { '@aws-cdk/core:stackRelativeExports': true } });
    const stack = new core_1.Stack(app, 'GlobalTableStack', { env: { account: '123456789012', region: 'us-east-1' } });
    const globalTable = new lib_1.GlobalTable(stack, CONSTRUCT_NAME, {
        tableName: TABLE_NAME,
        partitionKey: TABLE_PARTITION_KEY,
        regions: ['us-east-1', 'us-west-2'],
        stream: aws_dynamodb_1.StreamViewType.NEW_AND_OLD_IMAGES,
    });
    new core_1.CfnOutput(stack, 'DynamoDbOutput', {
        // this works, because both `stack` and `regionTables[0]` stack are in the same account & region
        value: globalTable.regionalTables[0].tableStreamArn,
    });
    assertions_1.Template.fromStack(stack).templateMatches({
        'Outputs': {
            'DynamoDbOutput': {
                'Value': {
                    'Fn::ImportValue': 'GlobalTableStackawscdkdynamodbglobalawscdkdynamodbglobaluseast19C1C8A14:ExportsOutputFnGetAttawscdkdynamodbglobalGlobalTableuseast1FC03DD69StreamArn9CE585ED',
                },
            },
        },
    });
});
cdk_build_tools_1.describeDeprecated('Enforce StreamSpecification', () => {
    test('global dynamo should only allow NEW_AND_OLD_IMAGES', () => {
        const stack = new core_1.Stack();
        expect(() => {
            new lib_1.GlobalTable(stack, CONSTRUCT_NAME, {
                tableName: TABLE_NAME,
                stream: aws_dynamodb_1.StreamViewType.KEYS_ONLY,
                partitionKey: TABLE_PARTITION_KEY,
                regions: ['us-east-1', 'us-east-2', 'us-west-2'],
            });
        }).toThrow(/dynamoProps.stream MUST be set to dynamodb.StreamViewType.NEW_AND_OLD_IMAGES/);
    });
});
cdk_build_tools_1.describeDeprecated('Check getting tables', () => {
    test('global dynamo should only allow NEW_AND_OLD_IMAGES', () => {
        const stack = new core_1.Stack();
        const regTables = new lib_1.GlobalTable(stack, CONSTRUCT_NAME, {
            tableName: TABLE_NAME,
            partitionKey: TABLE_PARTITION_KEY,
            regions: ['us-east-1', 'us-east-2', 'us-west-2'],
        });
        expect(regTables.regionalTables.length).toEqual(3);
        for (const table of regTables.regionalTables) {
            expect(table).toBeInstanceOf(aws_dynamodb_1.Table);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,