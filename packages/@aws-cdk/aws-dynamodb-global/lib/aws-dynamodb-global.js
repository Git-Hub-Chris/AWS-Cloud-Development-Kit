"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dynamodb = require("@aws-cdk/aws-dynamodb");
const cdk = require("@aws-cdk/cdk");
const lambda_global_dynamodb_1 = require("./lambda-global-dynamodb");
const multi_dynamodb_stack_1 = require("./multi-dynamodb-stack");
class GlobalTable extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.tables = [];
        // Need to set this streamSpecification here, otherwise global tables don't work
        // And no way to set a default value in an interface
        props.dynamoProps.streamSpecification = dynamodb.StreamViewType.NewAndOldImages;
        for (const reg of props.regions) {
            this.tables.push(new multi_dynamodb_stack_1.MultiDynamoDBStack(scope, id + "-GlobalDynamodbTable-" + reg, {
                dynamoProps: props.dynamoProps,
                // Purposefully omitting account since not possible to deploy global dynamodDB tables across accounts
                env: {
                    region: reg
                },
                // The DynamoDB Stack doesn't need to know the other environments involved
                regions: []
            }));
        }
        this.lambdaGlobalDynamodbMaker = new lambda_global_dynamodb_1.LambdaGlobalDynamoDBMaker(scope, id + "-GlobalDynamodbCustomResource", props);
        for (const table of this.tables) {
            this.lambdaGlobalDynamodbMaker.customResource.node.addDependency(table);
        }
    }
}
exports.GlobalTable = GlobalTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWR5bmFtb2RiLWdsb2JhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3cy1keW5hbW9kYi1nbG9iYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBbUQ7QUFDbkQsb0NBQXFDO0FBQ3JDLHFFQUFxRTtBQUNyRSxpRUFBNEQ7QUF3RjVELE1BQWEsV0FBWSxTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBWTFDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDekUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixnRkFBZ0Y7UUFDaEYsb0RBQW9EO1FBQ3BELEtBQUssQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUM7UUFDaEYsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUkseUNBQWtCLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyx1QkFBdUIsR0FBRyxHQUFHLEVBQUU7Z0JBQy9FLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDOUIscUdBQXFHO2dCQUNyRyxHQUFHLEVBQUU7b0JBQ0QsTUFBTSxFQUFFLEdBQUc7aUJBQ2Q7Z0JBQ0QsMEVBQTBFO2dCQUMxRSxPQUFPLEVBQUUsRUFBRTthQUNkLENBQUMsQ0FBQyxDQUFDO1NBQ1A7UUFFRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxrREFBeUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLCtCQUErQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25ILEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM3QixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDO0NBQ0o7QUFuQ0Qsa0NBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGR5bmFtb2RiID0gcmVxdWlyZShcIkBhd3MtY2RrL2F3cy1keW5hbW9kYlwiKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKFwiQGF3cy1jZGsvY2RrXCIpO1xuaW1wb3J0IHsgTGFtYmRhR2xvYmFsRHluYW1vREJNYWtlciB9IGZyb20gXCIuL2xhbWJkYS1nbG9iYWwtZHluYW1vZGJcIjtcbmltcG9ydCB7IE11bHRpRHluYW1vREJTdGFjayB9IGZyb20gXCIuL211bHRpLWR5bmFtb2RiLXN0YWNrXCI7XG5cbi8qKlxuICogTk9URTogVGhlc2UgcHJvcHMgc2hvdWxkIG1hdGNoIGR5bmFtb2RiLlRhYmxlUHJvcHMgZXhhY3RseVxuICogRVhDRVBUIGZvciB0YWJsZU5hbWUgaXMgbm93IHJlcXVpcmVkIChmb3IgZ2xvYmFsIHRhYmxlcyB0byB3b3JrLCB0aGVcbiAqIHRhYmxlIG5hbWUgbXVzdCBtYXRjaCBhY3Jvc3MgcmVnaW9ucylcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHbG9iYWxEeW5hbW9EQlByb3BzIHtcbiAgICAvKipcbiAgICAgKiBQYXJ0aXRpb24ga2V5IGF0dHJpYnV0ZSBkZWZpbml0aW9uLlxuICAgICAqL1xuICAgIHBhcnRpdGlvbktleTogZHluYW1vZGIuQXR0cmlidXRlO1xuICAgIC8qKlxuICAgICAqIFRhYmxlIHNvcnQga2V5IGF0dHJpYnV0ZSBkZWZpbml0aW9uLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgbm8gc29ydCBrZXlcbiAgICAgKi9cbiAgICBzb3J0S2V5PzogZHluYW1vZGIuQXR0cmlidXRlO1xuICAgIC8qKlxuICAgICAqIFRoZSByZWFkIGNhcGFjaXR5IGZvciB0aGUgdGFibGUuIENhcmVmdWwgaWYgeW91IGFkZCBHbG9iYWwgU2Vjb25kYXJ5IEluZGV4ZXMsIGFzXG4gICAgICogdGhvc2Ugd2lsbCBzaGFyZSB0aGUgdGFibGUncyBwcm92aXNpb25lZCB0aHJvdWdocHV0LlxuICAgICAqXG4gICAgICogQ2FuIG9ubHkgYmUgcHJvdmlkZWQgaWYgYmlsbGluZ01vZGUgaXMgUHJvdmlzaW9uZWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCA1XG4gICAgICovXG4gICAgcmVhZENhcGFjaXR5PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB3cml0ZSBjYXBhY2l0eSBmb3IgdGhlIHRhYmxlLiBDYXJlZnVsIGlmIHlvdSBhZGQgR2xvYmFsIFNlY29uZGFyeSBJbmRleGVzLCBhc1xuICAgICAqIHRob3NlIHdpbGwgc2hhcmUgdGhlIHRhYmxlJ3MgcHJvdmlzaW9uZWQgdGhyb3VnaHB1dC5cbiAgICAgKlxuICAgICAqIENhbiBvbmx5IGJlIHByb3ZpZGVkIGlmIGJpbGxpbmdNb2RlIGlzIFByb3Zpc2lvbmVkLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgNVxuICAgICAqL1xuICAgIHdyaXRlQ2FwYWNpdHk/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBob3cgeW91IGFyZSBjaGFyZ2VkIGZvciByZWFkIGFuZCB3cml0ZSB0aHJvdWdocHV0IGFuZCBob3cgeW91IG1hbmFnZSBjYXBhY2l0eS5cbiAgICAgKiBAZGVmYXVsdCBQcm92aXNpb25lZFxuICAgICAqL1xuICAgIGJpbGxpbmdNb2RlPzogZHluYW1vZGIuQmlsbGluZ01vZGU7XG4gICAgLyoqXG4gICAgICogRW5mb3JjZXMgYSBwYXJ0aWN1bGFyIHBoeXNpY2FsIHRhYmxlIG5hbWUuXG4gICAgICogQGRlZmF1bHQgPGdlbmVyYXRlZD5cbiAgICAgKi9cbiAgICB0YWJsZU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHBvaW50LWluLXRpbWUgcmVjb3ZlcnkgaXMgZW5hYmxlZC5cbiAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWQsIHBvaW50LWluLXRpbWUgcmVjb3ZlcnkgaXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBwaXRyRW5hYmxlZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hldGhlciBzZXJ2ZXItc2lkZSBlbmNyeXB0aW9uIHdpdGggYW4gQVdTIG1hbmFnZWQgY3VzdG9tZXIgbWFzdGVyIGtleSBpcyBlbmFibGVkLlxuICAgICAqIEBkZWZhdWx0IHVuZGVmaW5lZCwgc2VydmVyLXNpZGUgZW5jcnlwdGlvbiBpcyBlbmFibGVkIHdpdGggYW4gQVdTIG93bmVkIGN1c3RvbWVyIG1hc3RlciBrZXlcbiAgICAgKi9cbiAgICBzc2VFbmFibGVkPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIHRhYmxlIGlzIG1vZGlmaWVkLCBTdHJlYW1WaWV3VHlwZSBkZXRlcm1pbmVzIHdoYXQgaW5mb3JtYXRpb25cbiAgICAgKiBpcyB3cml0dGVuIHRvIHRoZSBzdHJlYW0gZm9yIHRoaXMgdGFibGUuIFZhbGlkIHZhbHVlcyBmb3IgU3RyZWFtVmlld1R5cGUgYXJlOlxuICAgICAqIEBkZWZhdWx0IGR5bmFtb2RiLlN0cmVhbVZpZXdUeXBlLk5ld0FuZE9sZEltYWdlcywgc3RyZWFtcyBtdXN0IGJlIGVuYWJsZWRcbiAgICAgKi9cbiAgICBzdHJlYW1TcGVjaWZpY2F0aW9uPzogZHluYW1vZGIuU3RyZWFtVmlld1R5cGU7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgVFRMIGF0dHJpYnV0ZS5cbiAgICAgKiBAZGVmYXVsdCB1bmRlZmluZWQsIFRUTCBpcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIHR0bEF0dHJpYnV0ZU5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgdGhlIG11dGxpcGxlIER5bmFtb0RCIHRhYmxlcyB0byBtYXNoIHRvZ2V0aGVyIGludG8gYVxuICogZ2xvYmFsIHRhYmxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1vREJHbG9iYWxTdGFja1Byb3BzIGV4dGVuZHMgY2RrLlN0YWNrUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgZm9yIER5bmFtb0RCIFRhYmxlc1xuICAgICAqIEFsbCB0aGUgcHJvcGVydGllcyBtdXN0IGJlIGV4YWN0bHkgdGhlIHNhbWVcbiAgICAgKiB0byBtYWtlIHRoZSB0YWJsZXMgbWVzaCB0b2dldGhlciBhcyBhIGdsb2JhbCB0YWJsZVxuICAgICAqL1xuICAgIGR5bmFtb1Byb3BzOiBHbG9iYWxEeW5hbW9EQlByb3BzO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgZW52aXJvbm1lbnRzIHRvIGNyZWF0ZSBEeW5hbW9EQiB0YWJsZXMgaW5cbiAgICAgKiBBY2NvdW50cyBzaG91bGQgYmUgb21pdHRlZCwgb3IgYXQgbGVhc3QgYWxsIGlkZW50aWNhbFxuICAgICAqL1xuICAgIHJlZ2lvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgR2xvYmFsVGFibGUgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgZHluYW1vREIgdGFibGVzIGFjcm9zcyByZWdpb25zIHRoYXQgd2lsbCBiZSBhYmxlIHRvIGJlIGdsb2JiZWQgdG9nZXRoZXIgaW50byBhIGdsb2JhbCB0YWJsZVxuICAgICAqL1xuICAgIHB1YmxpYyB0YWJsZXM6IE11bHRpRHluYW1vREJTdGFja1tdO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgY2xvdWRmb3JtYXRpb24gY3VzdG9tIHJlc291cmNlIHRoYXQgbGF1bmNoZXMgYSBsYW1iZGEgdG8gdGllIGl0IGFsbCB0b2dldGhlclxuICAgICAqL1xuICAgIHB1YmxpYyBsYW1iZGFHbG9iYWxEeW5hbW9kYk1ha2VyOiBMYW1iZGFHbG9iYWxEeW5hbW9EQk1ha2VyO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEeW5hbW9EQkdsb2JhbFN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy50YWJsZXMgPSBbXTtcbiAgICAgICAgLy8gTmVlZCB0byBzZXQgdGhpcyBzdHJlYW1TcGVjaWZpY2F0aW9uIGhlcmUsIG90aGVyd2lzZSBnbG9iYWwgdGFibGVzIGRvbid0IHdvcmtcbiAgICAgICAgLy8gQW5kIG5vIHdheSB0byBzZXQgYSBkZWZhdWx0IHZhbHVlIGluIGFuIGludGVyZmFjZVxuICAgICAgICBwcm9wcy5keW5hbW9Qcm9wcy5zdHJlYW1TcGVjaWZpY2F0aW9uID0gZHluYW1vZGIuU3RyZWFtVmlld1R5cGUuTmV3QW5kT2xkSW1hZ2VzO1xuICAgICAgICBmb3IgKGNvbnN0IHJlZyBvZiBwcm9wcy5yZWdpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlcy5wdXNoKG5ldyBNdWx0aUR5bmFtb0RCU3RhY2soc2NvcGUsIGlkICsgXCItR2xvYmFsRHluYW1vZGJUYWJsZS1cIiArIHJlZywge1xuICAgICAgICAgICAgICAgIGR5bmFtb1Byb3BzOiBwcm9wcy5keW5hbW9Qcm9wcyxcbiAgICAgICAgICAgICAgICAvLyBQdXJwb3NlZnVsbHkgb21pdHRpbmcgYWNjb3VudCBzaW5jZSBub3QgcG9zc2libGUgdG8gZGVwbG95IGdsb2JhbCBkeW5hbW9kREIgdGFibGVzIGFjcm9zcyBhY2NvdW50c1xuICAgICAgICAgICAgICAgIGVudjoge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gVGhlIER5bmFtb0RCIFN0YWNrIGRvZXNuJ3QgbmVlZCB0byBrbm93IHRoZSBvdGhlciBlbnZpcm9ubWVudHMgaW52b2x2ZWRcbiAgICAgICAgICAgICAgICByZWdpb25zOiBbXVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYW1iZGFHbG9iYWxEeW5hbW9kYk1ha2VyID0gbmV3IExhbWJkYUdsb2JhbER5bmFtb0RCTWFrZXIoc2NvcGUsIGlkICsgXCItR2xvYmFsRHluYW1vZGJDdXN0b21SZXNvdXJjZVwiLCBwcm9wcyk7XG4gICAgICAgIGZvciAoY29uc3QgdGFibGUgb2YgdGhpcy50YWJsZXMpIHtcbiAgICAgICAgICAgIHRoaXMubGFtYmRhR2xvYmFsRHluYW1vZGJNYWtlci5jdXN0b21SZXNvdXJjZS5ub2RlLmFkZERlcGVuZGVuY3kodGFibGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19