import { CfnResource, Construct, Resource } from '@aws-cdk/core';

import { CfnRoute } from '../apigatewayv2.generated';
import { IAuthorizer } from '../common/authorizer';
import { IIntegration } from '../common/integration';
import { IRoute } from '../common/route';
import { IWebSocketApi } from './api';
import { WebSocketIntegration } from './integration';
import { IWebSocketModel, WebSocketModel } from './model';
import { WebSocketRouteResponse, WebSocketRouteResponseKey, WebSocketRouteResponseOptions } from './route-response';

/**
 * Available authorization providers for ApiGateway V2 APIs
 */
export enum WebSocketAuthorizationType {
  /**
   * Use AWS IAM permissions (Web Socket APIs).
   */
  IAM = 'AWS_IAM',
  /**
   * Use a custom authorizer (Web Socket APIs).
   */
  CUSTOM = 'CUSTOM',
  /**
   * Use an AWS Cognito user pool (Web Socket APIs).
   */
  COGNITO = 'COGNITO_USER_POOLS'
}

/**
 * Defines a set of common template patterns known to the system
 */
export class WebSocketRouteKey {
  /**
   * Default route, when no other pattern matches
   */
  public static readonly DEFAULT = new WebSocketRouteKey('$default');

  /**
   * This route is a reserved route, used when a client establishes a connection to the WebSocket API
   */
  public static readonly CONNECT = new WebSocketRouteKey('$connect');

  /**
   * This route is a reserved route, used when a client disconnects from the WebSocket API
   */
  public static readonly DISCONNECT = new WebSocketRouteKey('$disconnect');

  /**
   * Creates a custom route key
   * @param value the name of the route key
   */
  public static custom(value: string): WebSocketRouteKey {
    return new WebSocketRouteKey(value);
  }

  /**
   * Contains the template key
   */
  private readonly value: string;
  private constructor(value: string) {
    this.value = value;
  }

  /**
   * Returns the current value of the template key
   */
  public toString(): string {
    return this.value;
  }
}

/**
 * Known expressions for selecting a route in an API
 */
export class WebSocketRouteResponseSelectionExpression {
  /**
   * Default route, when no other pattern matches
   */
  public static readonly DEFAULT = new WebSocketRouteResponseSelectionExpression('$default');

  /**
   * Use the context route key
   */
  public static readonly CONTEXT_ROUTE_KEY = new WebSocketRouteResponseSelectionExpression('${context.routeKey}');

  /**
   * Creates a custom route key
   * @param value the name of the route key
   */
  public static custom(value: string): WebSocketRouteResponseSelectionExpression {
    return new WebSocketRouteResponseSelectionExpression(value);
  }

  /**
   * Contains the template key
   */
  private readonly value: string;
  private constructor(value: string) {
    this.value = value;
  }

  /**
   * Returns the current value of the template key
   */
  public toString(): string {
    return this.value;
  }
}

/**
 * Known expressions for selecting a route in an API
 */
export class WebSocketRouteModelSelectionExpression {
  /**
   * Default route, when no other pattern matches
   */
  public static readonly DEFAULT = new WebSocketRouteModelSelectionExpression('$default');

  /**
   * Creates a custom route key
   * @param value the name of the route key
   */
  public static custom(value: string): WebSocketRouteModelSelectionExpression {
    return new WebSocketRouteModelSelectionExpression(value);
  }

  /**
   * Contains the template key
   */
  private readonly value: string;
  private constructor(value: string) {
    this.value = value;
  }

  /**
   * Returns the current value of the template key
   */
  public toString(): string {
    return this.value;
  }
}

/**
 * Defines the properties required for defining an Api Gateway V2 Route.
 *
 * This interface is used by the helper methods in `Api`
 */
export interface WebSocketRouteOptions {
  /**
   * The authorization scopes supported by this route.
   *
   * @default - no authorization scope
   */
  readonly authorizationScopes?: string[];

  /**
   * The Authorizer resource to be associated with this route.
   *
   * The authorizer identifier is generated by API Gateway when you created the authorizer.
   *
   * @default - no authorizer
   */
  readonly authorizer?: IAuthorizer;

  /**
   * The operation name for the route.
   *
   * @default - no operation name
   */
  readonly operationName?: string;

  /**
   * Specifies whether an API key is required for the route.
   *
   * @default false
   */
  readonly apiKeyRequired?: boolean;

  /**
   * The authorization type for the route.
   *
   * @default 'NONE'
   */
  readonly authorizationType?: WebSocketAuthorizationType;

  /**
   * The model selection expression for the route.
   *
   * @default - no selection key
   */
  readonly modelSelectionExpression?: WebSocketRouteModelSelectionExpression;

  /**
   * The request models for the route.
   *
   * @default - no models (for example passthrough)
   */
  readonly requestModels?: { [key: string]: IWebSocketModel };

  /**
   * The request parameters for the route.
   *
   * @default - no parameters
   */
  readonly requestParameters?: { [key: string]: boolean };

  /**
   * The route response selection expression for the route.
   *
   * @default - no selection expression
   */
  readonly routeResponseSelectionExpression?: WebSocketRouteResponseSelectionExpression;
}

/**
 * Defines the properties required for defining an Api Gateway V2 Route.
 */
export interface WebSocketRouteProps extends WebSocketRouteOptions {
  /**
   * The route key for the route.
   */
  readonly key: WebSocketRouteKey;

  /**
   * Defines the api for this route.
   */
  readonly api: IWebSocketApi;

  /**
   * Defines the integration for this route.
   */
  readonly integration: IIntegration;
}

/**
 * An route for an API in Amazon API Gateway v2.
 *
 * Use `addResponse` to configure routes.
 *
 * @resource AWS::ApiGatewayV2::Route
 */
export class WebSocketRoute extends Resource implements IRoute {
  /**
   * Creates a new imported API Deployment
   *
   * @param scope scope of this imported resource
   * @param id identifier of the resource
   * @param routeId identifier of the CloudFormation route resource
   */
  public static fromRouteId(scope: Construct, id: string, routeId: string): IRoute {
    class Import extends Resource implements IRoute {
      public readonly routeId = routeId;
    }

    return new Import(scope, id);
  }

  /**
   * The ID of this API Gateway Route.
   */
  public readonly routeId: string;

  /**
   * The key of this API Gateway Route.
   */
  public readonly key: WebSocketRouteKey;

  protected api: IWebSocketApi;
  protected resource: CfnRoute;

  constructor(scope: Construct, id: string, props: WebSocketRouteProps) {
    super(scope, id);
    this.api = props.api;
    this.key = props.key;

    const authorizerId: string | undefined = props.authorizer?.authorizerId;
    let requestModels: { [key: string]: string } | undefined;

    if (props.requestModels !== undefined) {
      requestModels = Object.assign({}, ...Object.entries(props.requestModels).map((e) => {
        return ({ [e[0]]: (typeof(e[1]) === 'string' ? e[1] : e[1].modelName) });
      }));
    }

    if (props.integration instanceof WebSocketIntegration) {
      props.integration.bind(this);
    }
    this.resource = new CfnRoute(this, 'Resource', {
      apiId: this.api.webSocketApiId,
      routeKey: props.key.toString(),
      target: `integrations/${props.integration.integrationId}`,
      requestModels,
      authorizerId,
      apiKeyRequired: props.apiKeyRequired,
      authorizationScopes: props.authorizationScopes,
      authorizationType: props.authorizationType,
      modelSelectionExpression: props.modelSelectionExpression?.toString(),
      operationName: props.operationName,
      requestParameters: props.requestParameters,
      routeResponseSelectionExpression: props.routeResponseSelectionExpression?.toString(),
    });

    if (props.requestModels !== undefined) {
      for (const model of Object.values(props.requestModels)) {
        if ((model instanceof WebSocketModel) && (model.node.defaultChild instanceof CfnResource)) {
          this.resource.addDependsOn(model.node.defaultChild);
        }
      }
    }
    this.routeId = this.resource.ref;
  }

  /**
   * Creates a new response for this route.
   *
   * @param key the key (predefined or not) that will select this response
   * @param props the properties for this response
   */
  public addResponse(key: WebSocketRouteResponseKey, props?: WebSocketRouteResponseOptions): WebSocketRouteResponse {
    return new WebSocketRouteResponse(this, `Response.${key}`, {
      ...props,
      route: this,
      api: this.api,
      key,
    });
  }
}