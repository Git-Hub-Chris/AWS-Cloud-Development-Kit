import { Construct, IResource, Resource } from '@aws-cdk/core';

import { Api, IApi } from './api';
import { CfnRoute } from './apigatewayv2.generated';
import { IAuthorizer } from './authorizer';
import { IIntegration } from './integration';
import { IModel, KnownModelKey } from './model';
import { KnownRouteResponseKey, RouteResponse, RouteResponseOptions } from './route-response';

/**
 * Available authorization providers for ApiGateway V2 APIs
 */
export enum AuthorizationType {
  /**
   * Open access (Web Socket, HTTP APIs).
   */
  NONE = "NONE",
  /**
   * Use AWS IAM permissions (Web Socket APIs).
   */
  IAM = "AWS_IAM",
  /**
   * Use a custom authorizer (Web Socket APIs).
   */
  CUSTOM = "CUSTOM",
  /**
   * Use an AWS Cognito user pool (Web Socket APIs).
   */
  COGNITO = "COGNITO_USER_POOLS",
  /**
   * Use JSON Web Tokens (HTTP APIs).
   */
  JWT = "JWT"
}

/**
 * Defines a set of common route keys known to the system
 */
export enum KnownRouteKey {
  /**
   * Default route, when no other pattern matches
   */
  DEFAULT = "$default",
  /**
   * This route is a reserved route, used when a client establishes a connection to the WebSocket API
   */
  CONNECT = "$connect",
  /**
   * This route is a reserved route, used when a client disconnects from the WebSocket API
   */
  DISCONNECT = "$disconnect"
}

/**
 * Known expressions for selecting a route in an API
 */
export enum KnownRouteSelectionExpression {
  /**
   * Selects the route key from the request context
   *
   * Supported only for WebSocket APIs.
   */
  CONTEXT_ROUTE_KEY = '${context.routeKey}',

  /**
   * A string starting with the method ans containing the request path
   *
   * Only supported value for HTTP APIs, if not provided, will be the default
   */
  METHOD_PATH = '${request.method} ${request.path}'
}

/**
 * Defines the attributes for an Api Gateway V2 Route.
 */
export interface RouteAttributes {
  /**
   * The ID of this API Gateway Route.
   */
  readonly routeId: string;

  /**
   * The key of this API Gateway Route.
   */
  readonly key: string;
}

/**
 * Defines the contract for an Api Gateway V2 Route.
 */
export interface IRoute extends IResource {
  /**
   * The ID of this API Gateway Route.
   * @attribute
   */
  readonly routeId: string;

  /**
   * The key of this API Gateway Route.
   * @attribute
   */
  readonly key: string;
}

/**
 * Defines the properties required for defining an Api Gateway V2 Route.
 *
 * This interface is used by the helper methods in `Api`
 */
export interface RouteOptions {
  /**
   * Specifies whether an API key is required for the route.
   *
   * Supported only for WebSocket APIs.
   *
   * @default false
   */
  readonly apiKeyRequired?: boolean;

  /**
   * The authorization scopes supported by this route.
   *
   * @default - no authorization scope
   */
  readonly authorizationScopes?: string[];

  /**
   * The authorization type for the route.
   *
   * @default 'NONE'
   */
  readonly authorizationType?: AuthorizationType | string;

  /**
   * The identifier of the Authorizer resource to be associated with this route.
   *
   * The authorizer identifier is generated by API Gateway when you created the authorizer.
   *
   * @default - no authorizer
   */
  readonly authorizerId?: IAuthorizer;

  /**
   * The model selection expression for the route.
   *
   * Supported only for WebSocket APIs.
   *
   * @default - no selection key
   */
  readonly modelSelectionExpression?: KnownModelKey | string;

  /**
   * The operation name for the route.
   *
   * @default - no operation name
   */
  readonly operationName?: string;

  /**
   * The request models for the route.
   *
   * Supported only for WebSocket APIs.
   *
   * @default - no models (for example passthrough)
   */
  readonly requestModels?: { [key: string]: IModel | string };

  /**
   * The request parameters for the route.
   *
   * Supported only for WebSocket APIs.
   *
   * @default - no parameters
   */
  readonly requestParameters?: { [key: string]: boolean };

  /**
   * The route response selection expression for the route.
   *
   * Supported only for WebSocket APIs.
   *
   * @default - no selection expression
   */
  readonly routeResponseSelectionExpression?: KnownRouteResponseKey | string;
}

/**
 * Defines the properties required for defining an Api Gateway V2 Route.
 */
export interface RouteProps extends RouteOptions {
  /**
   * The route key for the route.
   */
  readonly key: KnownRouteKey | string;

  /**
   * Defines the api for this route.
   */
  readonly api: IApi;

  /**
   * Defines the integration for this route.
   */
  readonly integration: IIntegration;
}

/**
 * An route for an API in Amazon API Gateway v2.
 *
 * Use `addResponse` to configure routes.
 */
export class Route extends Resource implements IRoute {
  /**
   * Creates a new imported API Deployment
   *
   * @param scope scope of this imported resource
   * @param id identifier of the resource
   * @param attrs Attributes of the Route
   */
  public static fromRouteAttributes(scope: Construct, id: string, attrs: RouteAttributes): IRoute {
    class Import extends Resource implements IRoute {
      public readonly routeId = attrs.routeId;
      public readonly key = attrs.key;
    }

    return new Import(scope, id);
  }

  /**
   * The ID of this API Gateway Route.
   */
  public readonly routeId: string;

  /**
   * The key of this API Gateway Route.
   */
  public readonly key: string;

  protected api: IApi;
  protected resource: CfnRoute;

  constructor(scope: Construct, id: string, props: RouteProps) {
    super(scope, id);
    this.api = props.api;
    this.key = props.key;

    let authorizerId: string | undefined;
    if (props.authorizerId !== undefined) {
      authorizerId = props.authorizerId.authorizerId;
    }
    let requestModels: { [key: string]: string } | undefined;
    if (props.requestModels !== undefined) {
      requestModels = Object.assign({}, ...Object.entries(props.requestModels).map((e) => {
        return ({ [e[0]]: (typeof(e[1]) === "string" ? e[1] : e[1].modelName) });
      }));
    }

    this.resource = new CfnRoute(this, 'Resource', {
      ...props,
      apiKeyRequired: props.apiKeyRequired,
      apiId: this.api.apiId,
      routeKey: props.key,
      target: `integrations/${props.integration.integrationId}`,
      requestModels,
      authorizerId
    });
    this.routeId = this.resource.ref;

    if (props.api instanceof Api) {
      if (props.api.latestDeployment) {
        props.api.latestDeployment.addToLogicalId({
          ...props,
          id,
          routeKey: this.key,
          target: `integrations/${props.integration.integrationId}`,
          requestModels,
          authorizerId
        });
        props.api.latestDeployment.registerDependency(this.resource);
      }
    }
  }

  /**
   * Creates a new response for this route.
   *
   * @param key the key (predefined or not) that will select this response
   * @param props the properties for this response
   */
  public addResponse(key: KnownRouteResponseKey | string, props?: RouteResponseOptions): RouteResponse {
    return new RouteResponse(this, `Response.${key}`, {
      ...props,
      route: this,
      api: this.api,
      key
    });
  }
}