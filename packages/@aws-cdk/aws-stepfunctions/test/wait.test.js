"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
const render_util_1 = require("./private/render-util");
describe('Wait State', () => {
    test('wait time from ISO8601 timestamp', () => {
        // GIVEN
        const timestamp = '2025-01-01T00:00:00Z';
        // WHEN
        const waitTime = lib_1.WaitTime.timestamp(timestamp);
        // THEN
        expect(waitTime).toEqual({
            json: {
                Timestamp: '2025-01-01T00:00:00Z',
            },
        });
    });
    test('wait time from seconds path in state object', () => {
        // GIVEN
        const secondsPath = '$.waitSeconds';
        // WHEN
        const waitTime = lib_1.WaitTime.secondsPath(secondsPath);
        // THEN
        expect(waitTime).toEqual({
            json: {
                SecondsPath: '$.waitSeconds',
            },
        });
    });
    test('wait time from timestamp path in state object', () => {
        // GIVEN
        const path = '$.timestampPath';
        // WHEN
        const waitTime = lib_1.WaitTime.timestampPath(path);
        // THEN
        expect(waitTime).toEqual({
            json: {
                TimestampPath: '$.timestampPath',
            },
        });
    });
    test('supports adding a next state', () => {
        // GIVEN
        const stack = new cdk.Stack();
        const chain = new lib_1.Wait(stack, 'myWaitState', {
            time: lib_1.WaitTime.duration(cdk.Duration.seconds(30)),
        });
        // WHEN
        chain.next(new lib_1.Pass(stack, 'final pass', {}));
        // THEN
        expect(render_util_1.render(stack, chain)).toEqual({
            StartAt: 'myWaitState',
            States: {
                'final pass': {
                    End: true,
                    Type: 'Pass',
                },
                'myWaitState': {
                    Next: 'final pass',
                    Seconds: 30,
                    Type: 'Wait',
                },
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FpdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXFDO0FBQ3JDLGdDQUE4QztBQUM5Qyx1REFBK0M7QUFFL0MsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxRQUFRO1FBQ1IsTUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUM7UUFFekMsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLGNBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFL0MsT0FBTztRQUNQLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDdkIsSUFBSSxFQUFFO2dCQUNKLFNBQVMsRUFBRSxzQkFBc0I7YUFDbEM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7UUFDdkQsUUFBUTtRQUNSLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQztRQUVwQyxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsY0FBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuRCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN2QixJQUFJLEVBQUU7Z0JBQ0osV0FBVyxFQUFFLGVBQWU7YUFDN0I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7UUFDekQsUUFBUTtRQUNSLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRS9CLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxjQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlDLE9BQU87UUFDUCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3ZCLElBQUksRUFBRTtnQkFDSixhQUFhLEVBQUUsaUJBQWlCO2FBQ2pDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLFVBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQzNDLElBQUksRUFBRSxjQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2xELENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksVUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5QyxPQUFPO1FBQ1AsTUFBTSxDQUFDLG9CQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ25DLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLE1BQU0sRUFBRTtnQkFDTixZQUFZLEVBQUU7b0JBQ1osR0FBRyxFQUFFLElBQUk7b0JBQ1QsSUFBSSxFQUFFLE1BQU07aUJBQ2I7Z0JBQ0QsYUFBYSxFQUFFO29CQUNiLElBQUksRUFBRSxZQUFZO29CQUNsQixPQUFPLEVBQUUsRUFBRTtvQkFDWCxJQUFJLEVBQUUsTUFBTTtpQkFDYjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFBhc3MsIFdhaXQsIFdhaXRUaW1lIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4vcHJpdmF0ZS9yZW5kZXItdXRpbCc7XG5cbmRlc2NyaWJlKCdXYWl0IFN0YXRlJywgKCkgPT4ge1xuICB0ZXN0KCd3YWl0IHRpbWUgZnJvbSBJU084NjAxIHRpbWVzdGFtcCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRpbWVzdGFtcCA9ICcyMDI1LTAxLTAxVDAwOjAwOjAwWic7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd2FpdFRpbWUgPSBXYWl0VGltZS50aW1lc3RhbXAodGltZXN0YW1wKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qod2FpdFRpbWUpLnRvRXF1YWwoe1xuICAgICAganNvbjoge1xuICAgICAgICBUaW1lc3RhbXA6ICcyMDI1LTAxLTAxVDAwOjAwOjAwWicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCd3YWl0IHRpbWUgZnJvbSBzZWNvbmRzIHBhdGggaW4gc3RhdGUgb2JqZWN0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc2Vjb25kc1BhdGggPSAnJC53YWl0U2Vjb25kcyc7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgd2FpdFRpbWUgPSBXYWl0VGltZS5zZWNvbmRzUGF0aChzZWNvbmRzUGF0aCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHdhaXRUaW1lKS50b0VxdWFsKHtcbiAgICAgIGpzb246IHtcbiAgICAgICAgU2Vjb25kc1BhdGg6ICckLndhaXRTZWNvbmRzJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dhaXQgdGltZSBmcm9tIHRpbWVzdGFtcCBwYXRoIGluIHN0YXRlIG9iamVjdCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHBhdGggPSAnJC50aW1lc3RhbXBQYXRoJztcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCB3YWl0VGltZSA9IFdhaXRUaW1lLnRpbWVzdGFtcFBhdGgocGF0aCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHdhaXRUaW1lKS50b0VxdWFsKHtcbiAgICAgIGpzb246IHtcbiAgICAgICAgVGltZXN0YW1wUGF0aDogJyQudGltZXN0YW1wUGF0aCcsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdzdXBwb3J0cyBhZGRpbmcgYSBuZXh0IHN0YXRlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgV2FpdChzdGFjaywgJ215V2FpdFN0YXRlJywge1xuICAgICAgdGltZTogV2FpdFRpbWUuZHVyYXRpb24oY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApKSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjaGFpbi5uZXh0KG5ldyBQYXNzKHN0YWNrLCAnZmluYWwgcGFzcycsIHt9KSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHJlbmRlcihzdGFjaywgY2hhaW4pKS50b0VxdWFsKHtcbiAgICAgIFN0YXJ0QXQ6ICdteVdhaXRTdGF0ZScsXG4gICAgICBTdGF0ZXM6IHtcbiAgICAgICAgJ2ZpbmFsIHBhc3MnOiB7XG4gICAgICAgICAgRW5kOiB0cnVlLFxuICAgICAgICAgIFR5cGU6ICdQYXNzJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ215V2FpdFN0YXRlJzoge1xuICAgICAgICAgIE5leHQ6ICdmaW5hbCBwYXNzJyxcbiAgICAgICAgICBTZWNvbmRzOiAzMCxcbiAgICAgICAgICBUeXBlOiAnV2FpdCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxufSk7Il19