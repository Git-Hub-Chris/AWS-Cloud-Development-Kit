"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeTask = void 0;
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const sfn = require("../lib");
/**
 * Task extending sfn.TaskStateBase to facilitate integ testing setting credentials
 */
class FakeTask extends sfn.TaskStateBase {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.parameters = props.parameters;
    }
    _renderTask() {
        return {
            Type: 'Task',
            Resource: 'arn:aws:states:::dynamodb:putItem',
            Parameters: {
                TableName: 'my-cool-table',
                Item: {
                    id: {
                        S: 'my-entry',
                    },
                },
                ...this.parameters,
            },
        };
    }
}
exports.FakeTask = FakeTask;
/*
 * Stack verification steps:
 *
 * -- aws stepfunctions describe-state-machine --state-machine-arn <stack-output> has a status of `ACTIVE`
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-state-machine-credentials-integ');
const role = new iam.Role(stack, 'Role', {
    assumedBy: new iam.AccountPrincipal(stack.account),
});
new sfn.StateMachine(stack, 'StateMachineWithLiteralCredentials', {
    definition: new FakeTask(stack, 'FakeTaskWithLiteralCredentials', { credentials: { role: sfn.TaskRole.fromRole(role) } }),
    timeout: cdk.Duration.seconds(30),
});
const crossAccountRole = iam.Role.fromRoleArn(stack, 'CrossAccountRole', 'arn:aws:iam::123456789012:role/CrossAccountRole');
new sfn.StateMachine(stack, 'StateMachineWithCrossAccountLiteralCredentials', {
    definition: new FakeTask(stack, 'FakeTaskWithCrossAccountLiteralCredentials', { credentials: { role: sfn.TaskRole.fromRole(crossAccountRole) } }),
    timeout: cdk.Duration.seconds(30),
});
new sfn.StateMachine(stack, 'StateMachineWithJsonPathCredentials', {
    definition: new FakeTask(stack, 'FakeTaskWithJsonPathCredentials', { credentials: { role: sfn.TaskRole.fromRoleArnJsonPath('$.RoleArn') } }),
    timeout: cdk.Duration.seconds(30),
});
new integ_tests_1.IntegTest(app, 'StateMachineCredentials', { testCases: [stack] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuc3RhdGUtbWFjaGluZS1jcmVkZW50aWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnN0YXRlLW1hY2hpbmUtY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQyxzREFBaUQ7QUFFakQsOEJBQThCO0FBTTlCOztHQUVHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsR0FBRyxDQUFDLGFBQWE7SUFLN0MsWUFBWSxLQUEyQixFQUFFLEVBQVUsRUFBRSxRQUF1QixFQUFFO1FBQzVFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztLQUNwQztJQUVTLFdBQVc7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxNQUFNO1lBQ1osUUFBUSxFQUFFLG1DQUFtQztZQUM3QyxVQUFVLEVBQUU7Z0JBQ1YsU0FBUyxFQUFFLGVBQWU7Z0JBQzFCLElBQUksRUFBRTtvQkFDSixFQUFFLEVBQUU7d0JBQ0YsQ0FBQyxFQUFFLFVBQVU7cUJBQ2Q7aUJBQ0Y7Z0JBQ0QsR0FBRyxJQUFJLENBQUMsVUFBVTthQUNuQjtTQUNGLENBQUM7S0FDSDtDQUNGO0FBekJELDRCQXlCQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLG1EQUFtRCxDQUFDLENBQUM7QUFFdEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7SUFDdkMsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7Q0FDbkQsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxvQ0FBb0MsRUFBRTtJQUNoRSxVQUFVLEVBQUUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLGdDQUFnQyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUN6SCxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0NBQ2xDLENBQUMsQ0FBQztBQUVILE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFLGlEQUFpRCxDQUFDLENBQUM7QUFFNUgsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxnREFBZ0QsRUFBRTtJQUM1RSxVQUFVLEVBQUUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLDRDQUE0QyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ2pKLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxxQ0FBcUMsRUFBRTtJQUNqRSxVQUFVLEVBQUUsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzVJLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSx1QkFBUyxDQUFDLEdBQUcsRUFBRSx5QkFBeUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEludGVnVGVzdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCAqIGFzIGNvbnN0cnVjdHMgZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBzZm4gZnJvbSAnLi4vbGliJztcblxuZXhwb3J0IGludGVyZmFjZSBGYWtlVGFza1Byb3BzIGV4dGVuZHMgc2ZuLlRhc2tTdGF0ZUJhc2VQcm9wcyB7XG4gIHBhcmFtZXRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xufVxuXG4vKipcbiAqIFRhc2sgZXh0ZW5kaW5nIHNmbi5UYXNrU3RhdGVCYXNlIHRvIGZhY2lsaXRhdGUgaW50ZWcgdGVzdGluZyBzZXR0aW5nIGNyZWRlbnRpYWxzXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWtlVGFzayBleHRlbmRzIHNmbi5UYXNrU3RhdGVCYXNlIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHRhc2tNZXRyaWNzPzogc2ZuLlRhc2tNZXRyaWNzQ29uZmlnO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdGFza1BvbGljaWVzPzogaWFtLlBvbGljeVN0YXRlbWVudFtdO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFyYW1ldGVycz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNvbnN0cnVjdHMuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRmFrZVRhc2tQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gcHJvcHMucGFyYW1ldGVycztcbiAgfVxuXG4gIHByb3RlY3RlZCBfcmVuZGVyVGFzaygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBUeXBlOiAnVGFzaycsXG4gICAgICBSZXNvdXJjZTogJ2Fybjphd3M6c3RhdGVzOjo6ZHluYW1vZGI6cHV0SXRlbScsXG4gICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgIFRhYmxlTmFtZTogJ215LWNvb2wtdGFibGUnLFxuICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgIFM6ICdteS1lbnRyeScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4udGhpcy5wYXJhbWV0ZXJzLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbi8qXG4gKiBTdGFjayB2ZXJpZmljYXRpb24gc3RlcHM6XG4gKlxuICogLS0gYXdzIHN0ZXBmdW5jdGlvbnMgZGVzY3JpYmUtc3RhdGUtbWFjaGluZSAtLXN0YXRlLW1hY2hpbmUtYXJuIDxzdGFjay1vdXRwdXQ+IGhhcyBhIHN0YXR1cyBvZiBgQUNUSVZFYFxuICovXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1zdGVwZnVuY3Rpb25zLXN0YXRlLW1hY2hpbmUtY3JlZGVudGlhbHMtaW50ZWcnKTtcblxuY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShzdGFjaywgJ1JvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IGlhbS5BY2NvdW50UHJpbmNpcGFsKHN0YWNrLmFjY291bnQpLFxufSk7XG5cbm5ldyBzZm4uU3RhdGVNYWNoaW5lKHN0YWNrLCAnU3RhdGVNYWNoaW5lV2l0aExpdGVyYWxDcmVkZW50aWFscycsIHtcbiAgZGVmaW5pdGlvbjogbmV3IEZha2VUYXNrKHN0YWNrLCAnRmFrZVRhc2tXaXRoTGl0ZXJhbENyZWRlbnRpYWxzJywgeyBjcmVkZW50aWFsczogeyByb2xlOiBzZm4uVGFza1JvbGUuZnJvbVJvbGUocm9sZSkgfSB9KSxcbiAgdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApLFxufSk7XG5cbmNvbnN0IGNyb3NzQWNjb3VudFJvbGUgPSBpYW0uUm9sZS5mcm9tUm9sZUFybihzdGFjaywgJ0Nyb3NzQWNjb3VudFJvbGUnLCAnYXJuOmF3czppYW06OjEyMzQ1Njc4OTAxMjpyb2xlL0Nyb3NzQWNjb3VudFJvbGUnKTtcblxubmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTdGF0ZU1hY2hpbmVXaXRoQ3Jvc3NBY2NvdW50TGl0ZXJhbENyZWRlbnRpYWxzJywge1xuICBkZWZpbml0aW9uOiBuZXcgRmFrZVRhc2soc3RhY2ssICdGYWtlVGFza1dpdGhDcm9zc0FjY291bnRMaXRlcmFsQ3JlZGVudGlhbHMnLCB7IGNyZWRlbnRpYWxzOiB7IHJvbGU6IHNmbi5UYXNrUm9sZS5mcm9tUm9sZShjcm9zc0FjY291bnRSb2xlKSB9IH0pLFxuICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG59KTtcblxubmV3IHNmbi5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTdGF0ZU1hY2hpbmVXaXRoSnNvblBhdGhDcmVkZW50aWFscycsIHtcbiAgZGVmaW5pdGlvbjogbmV3IEZha2VUYXNrKHN0YWNrLCAnRmFrZVRhc2tXaXRoSnNvblBhdGhDcmVkZW50aWFscycsIHsgY3JlZGVudGlhbHM6IHsgcm9sZTogc2ZuLlRhc2tSb2xlLmZyb21Sb2xlQXJuSnNvblBhdGgoJyQuUm9sZUFybicpIH0gfSksXG4gIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwKSxcbn0pO1xuXG5uZXcgSW50ZWdUZXN0KGFwcCwgJ1N0YXRlTWFjaGluZUNyZWRlbnRpYWxzJywgeyB0ZXN0Q2FzZXM6IFtzdGFja10gfSk7XG4iXX0=