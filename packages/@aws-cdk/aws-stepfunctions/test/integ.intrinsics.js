"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-stepfunctions-intrinsics-integ');
const pass = new lib_1.Pass(stack, 'pass', {
    parameters: {
        array1: lib_1.JsonPath.array('asdf', lib_1.JsonPath.stringAt('$.Id')),
        arrayPartition1: lib_1.JsonPath.arrayPartition(lib_1.JsonPath.listAt('$.inputArray'), 4),
        arrayPartition2: lib_1.JsonPath.arrayPartition(lib_1.JsonPath.listAt('$.inputArray'), lib_1.JsonPath.numberAt('$.chunkSize')),
        arrayContains1: lib_1.JsonPath.arrayContains(lib_1.JsonPath.listAt('$.inputArray'), 5),
        arrayContains2: lib_1.JsonPath.arrayContains(lib_1.JsonPath.listAt('$.inputArray'), 'a'),
        arrayContains3: lib_1.JsonPath.arrayContains(lib_1.JsonPath.listAt('$.inputArray'), lib_1.JsonPath.numberAt('$.lookingFor')),
        arrayRange1: lib_1.JsonPath.arrayRange(1, 9, 2),
        arrayRange2: lib_1.JsonPath.arrayRange(lib_1.JsonPath.numberAt('$.start'), lib_1.JsonPath.numberAt('$.end'), lib_1.JsonPath.numberAt('$.step')),
        arrayGetItem1: lib_1.JsonPath.arrayGetItem(lib_1.JsonPath.listAt('$.inputArray'), 5),
        arrayGetItem2: lib_1.JsonPath.arrayGetItem(lib_1.JsonPath.numberAt('$.inputArray'), lib_1.JsonPath.numberAt('$.index')),
        arrayLength1: lib_1.JsonPath.arrayLength(lib_1.JsonPath.listAt('$.inputArray')),
        arrayUnique1: lib_1.JsonPath.arrayUnique(lib_1.JsonPath.listAt('$.inputArray')),
        base64Encode1: lib_1.JsonPath.base64Encode('Data to encode'),
        base64Encode2: lib_1.JsonPath.base64Encode(lib_1.JsonPath.stringAt('$.input')),
        base64Decode1: lib_1.JsonPath.base64Decode('RGF0YSB0byBlbmNvZGU='),
        base64Decode2: lib_1.JsonPath.base64Decode(lib_1.JsonPath.stringAt('$.base64')),
        hash1: lib_1.JsonPath.hash('Input data', 'SHA-1'),
        hash2: lib_1.JsonPath.hash(lib_1.JsonPath.objectAt('$.Data'), lib_1.JsonPath.stringAt('$.Algorithm')),
        jsonMerge1: lib_1.JsonPath.jsonMerge(lib_1.JsonPath.objectAt('$.Obj1'), lib_1.JsonPath.objectAt('$.Obj2')),
        mathRandom1: lib_1.JsonPath.mathRandom(1, 999),
        mathRandom2: lib_1.JsonPath.mathRandom(lib_1.JsonPath.numberAt('$.start'), lib_1.JsonPath.numberAt('$.end')),
        mathAdd1: lib_1.JsonPath.mathAdd(1, 999),
        mathAdd2: lib_1.JsonPath.mathAdd(lib_1.JsonPath.numberAt('$.value1'), lib_1.JsonPath.numberAt('$.step')),
        stringSplit1: lib_1.JsonPath.stringSplit('1,2,3,4,5', ','),
        stringSplit2: lib_1.JsonPath.stringSplit(lib_1.JsonPath.stringAt('$.inputString'), lib_1.JsonPath.stringAt('$.splitter')),
        uuid: lib_1.JsonPath.uuid(),
        format1: lib_1.JsonPath.format('Hi my name is {}.', lib_1.JsonPath.stringAt('$.Name')),
        format2: lib_1.JsonPath.format(lib_1.JsonPath.stringAt('$.Format'), lib_1.JsonPath.stringAt('$.Name')),
        stringToJson1: lib_1.JsonPath.stringToJson(lib_1.JsonPath.stringAt('$.Str')),
        jsonToString1: lib_1.JsonPath.jsonToString(lib_1.JsonPath.objectAt('$.Obj')),
    },
});
const stateMachine = new lib_1.StateMachine(stack, 'StateMachine', {
    definition: pass,
});
const integ = new integ_tests_1.IntegTest(app, 'StateMachineIntrinsicsTest', {
    testCases: [stack],
});
integ.assertions.awsApiCall('StepFunctions', 'describeStateMachine', {
    stateMachineArn: stateMachine.stateMachineArn,
}).expect(integ_tests_1.ExpectedResult.objectLike({
    status: 'ACTIVE',
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,