import { expect, haveResource } from '@aws-cdk/assert';
import s3 = require('@aws-cdk/aws-s3');
import cdk = require('@aws-cdk/cdk');
import { Test } from 'nodeunit';

import glue = require('../lib');
import { Schema } from '../lib';

export = {
  'unpartitioned JSON table'(test: Test) {
    const dbStack = new cdk.Stack();
    const database = new glue.Database(dbStack, 'Database', {
      databaseName: 'database'
    });

    const tableStack = new cdk.Stack();
    new glue.Table(tableStack, 'Table', {
      database,
      name: 'table',
      columns: [{
        name: 'col',
        type: Schema.string
      }],
      storageType: glue.StorageType.Json,
    });

    expect(tableStack).toMatch({
      Resources: {
        TableBucketDA42407C: {
          Type: "AWS::S3::Bucket",
          DeletionPolicy: "Retain"
        },
        Table4C2D914F: {
          Type: "AWS::Glue::Table",
          Properties: {
            CatalogId: {
              Ref: "AWS::AccountId"
            },
            DatabaseName: {
              "Fn::ImportValue": "ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
              Description: "table generated by CDK",
              Name: "table",
              StorageDescriptor: {
                Columns: [
                  {
                    Name: "col",
                    Type: "string"
                  }
                ],
                Compressed: false,
                InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                Location: {
                  "Fn::Join": [
                    "",
                    [
                      "s3://",
                      {
                        Ref: "TableBucketDA42407C"
                      },
                      "/data/"
                    ]
                  ]
                },
                OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                SerdeInfo: {
                  SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                },
                StoredAsSubDirectories: false
              },
              TableType: "EXTERNAL_TABLE"
            }
          }
        }
      }
    });
    test.done();
  },

  'partitioned JSON table'(test: Test) {
    const dbStack = new cdk.Stack();
    const database = new glue.Database(dbStack, 'Database', {
      databaseName: 'database'
    });

    const tableStack = new cdk.Stack();
    new glue.Table(tableStack, 'Table', {
      database,
      name: 'table',
      columns: [{
        name: 'col',
        type: Schema.string
      }],
      partitionKeys: [{
        name: 'year',
        type: Schema.smallint
      }],
      storageType: glue.StorageType.Json,
    });

    expect(tableStack).toMatch({
      Resources: {
        TableBucketDA42407C: {
          Type: "AWS::S3::Bucket",
          DeletionPolicy: "Retain"
        },
        Table4C2D914F: {
          Type: "AWS::Glue::Table",
          Properties: {
            CatalogId: {
              Ref: "AWS::AccountId"
            },
            DatabaseName: {
              "Fn::ImportValue": "ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
              Description: "table generated by CDK",
              Name: "table",
              PartitionKeys: [
                {
                  Name: "year",
                  Type: "smallint"
                }
              ],
              StorageDescriptor: {
                Columns: [
                  {
                    Name: "col",
                    Type: "string"
                  }
                ],
                Compressed: false,
                InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                Location: {
                  "Fn::Join": [
                    "",
                    [
                      "s3://",
                      {
                        Ref: "TableBucketDA42407C"
                      },
                      "/data/"
                    ]
                  ]
                },
                OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                SerdeInfo: {
                  SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                },
                StoredAsSubDirectories: false
              },
              TableType: "EXTERNAL_TABLE"
            }
          }
        }
      }
    });
    test.done();
  },

  'compressed table'(test: Test) {
    const stack = new cdk.Stack();
    const database = new glue.Database(stack, 'Database', {
      databaseName: 'database'
    });

    new glue.Table(stack, 'Table', {
      database,
      name: 'table',
      columns: [{
        name: 'col',
        type: Schema.string
      }],
      compressed: true,
      storageType: glue.StorageType.Json,
    });

    expect(stack).to(haveResource('AWS::Glue::Table', {
      CatalogId: {
        Ref: "AWS::AccountId"
      },
      DatabaseName: {
        Ref: "DatabaseB269D8BB"
      },
      TableInput: {
        Description: "table generated by CDK",
        Name: "table",
        StorageDescriptor: {
          Columns: [
            {
              Name: "col",
              Type: "string"
            }
          ],
          Compressed: true,
          InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
          Location: {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  Ref: "TableBucketDA42407C"
                },
                "/data/"
              ]
            ]
          },
          OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
          SerdeInfo: {
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
          },
          StoredAsSubDirectories: false
        },
        TableType: "EXTERNAL_TABLE"
      }
    }));

    test.done();
  },

  'explicit s3 bucket and prefix'(test: Test) {
    const dbStack = new cdk.Stack();
    const stack = new cdk.Stack();
    const bucket = new s3.Bucket(stack, 'ExplicitBucket');
    const database = new glue.Database(dbStack, 'Database', {
      databaseName: 'database'
    });

    new glue.Table(stack, 'Table', {
      database,
      bucket,
      prefix: 'prefix/',
      name: 'table',
      columns: [{
        name: 'col',
        type: Schema.string
      }],
      storageType: glue.StorageType.Json,
    });

    expect(stack).toMatch({
      Resources: {
        ExplicitBucket0AA51A3F: {
          Type: "AWS::S3::Bucket",
          DeletionPolicy: "Retain"
        },
        Table4C2D914F: {
          Type: "AWS::Glue::Table",
          Properties: {
            CatalogId: {
              Ref: "AWS::AccountId"
            },
            DatabaseName: {
              "Fn::ImportValue": "ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
              Description: "table generated by CDK",
              Name: "table",
              StorageDescriptor: {
                Columns: [
                  {
                    Name: "col",
                    Type: "string"
                  }
                ],
                Compressed: false,
                InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                Location: {
                  "Fn::Join": [
                    "",
                    [
                      "s3://",
                      {
                        Ref: "ExplicitBucket0AA51A3F"
                      },
                      "/prefix/"
                    ]
                  ]
                },
                OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                SerdeInfo: {
                  SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                },
                StoredAsSubDirectories: false
              },
              TableType: "EXTERNAL_TABLE"
            }
          }
        }
      }
    });
    test.done();
  }
};
