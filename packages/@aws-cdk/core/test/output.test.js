"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const lib_1 = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new lib_1.App();
    stack = new lib_1.Stack(app, 'Stack');
});
describe('output', () => {
    test('outputs can be added to the stack', () => {
        const res = new lib_1.CfnResource(stack, 'MyResource', { type: 'R' });
        const ref = res.ref;
        new lib_1.CfnOutput(stack, 'MyOutput', {
            exportName: 'ExportName',
            value: ref,
            description: 'CfnOutput properties',
        });
        expect(util_1.toCloudFormation(stack)).toEqual({
            Resources: { MyResource: { Type: 'R' } },
            Outputs: {
                MyOutput: {
                    Description: 'CfnOutput properties',
                    Export: { Name: 'ExportName' },
                    Value: { Ref: 'MyResource' },
                },
            },
        });
    });
    test('No export is created by default', () => {
        // WHEN
        new lib_1.CfnOutput(stack, 'SomeOutput', { value: 'x' });
        // THEN
        expect(util_1.toCloudFormation(stack)).toEqual({
            Outputs: {
                SomeOutput: {
                    Value: 'x',
                },
            },
        });
    });
    test('importValue can be used to obtain a Fn::ImportValue expression', () => {
        // GIVEN
        const stack2 = new lib_1.Stack(app, 'Stack2');
        // WHEN
        const output = new lib_1.CfnOutput(stack, 'SomeOutput', { value: 'x', exportName: 'asdf' });
        new lib_1.CfnResource(stack2, 'Resource', {
            type: 'Some::Resource',
            properties: {
                input: output.importValue,
            },
        });
        // THEN
        expect(util_1.toCloudFormation(stack2)).toEqual({
            Resources: {
                Resource: {
                    Type: 'Some::Resource',
                    Properties: {
                        input: { 'Fn::ImportValue': 'asdf' },
                    },
                },
            },
        });
    });
    test('importValue used inside the same stack produces an error', () => {
        // WHEN
        const output = new lib_1.CfnOutput(stack, 'SomeOutput', { value: 'x', exportName: 'asdf' });
        new lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
            properties: {
                input: output.importValue,
            },
        });
        // THEN
        expect(() => util_1.toCloudFormation(stack)).toThrow(/should only be used in a different Stack/);
    });
    test('error message if importValue is used and Output is not exported', () => {
        // GIVEN
        const stack2 = new lib_1.Stack(app, 'Stack2');
        // WHEN
        const output = new lib_1.CfnOutput(stack, 'SomeOutput', { value: 'x' });
        new lib_1.CfnResource(stack2, 'Resource', {
            type: 'Some::Resource',
            properties: {
                input: output.importValue,
            },
        });
        expect(() => {
            util_1.toCloudFormation(stack2);
        }).toThrow(/Add an exportName to the CfnOutput/);
    });
    test('throw if Output is passed a string list', () => {
        // WHEN
        expect(() => {
            new lib_1.CfnOutput(stack, 'SomeOutput', { value: ['listValue'] });
        }).toThrow(/CloudFormation output was given a string list instead of a string/);
    });
    test('Verify maximum length of export name', () => {
        const output = new lib_1.CfnOutput(stack, 'SomeOutput', { value: 'x', exportName: 'x'.repeat(260) });
        const errors = output.node.validate();
        expect(errors).toEqual([
            expect.stringContaining('Export name cannot exceed 255 characters'),
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,