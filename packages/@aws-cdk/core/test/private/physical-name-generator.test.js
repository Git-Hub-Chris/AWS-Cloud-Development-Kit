"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const physical_name_generator_1 = require("../../lib/private/physical-name-generator");
describe('physical name generator', () => {
    describe('generatePhysicalName', () => {
        test('generates correct physical names', () => {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const testResourceA = new TestResource(stack, 'A');
            const testResourceB = new TestResource(testResourceA, 'B');
            expect(physical_name_generator_1.generatePhysicalName(testResourceA)).toEqual('teststackteststackaa164c141d59b37c1b663');
            expect(physical_name_generator_1.generatePhysicalName(testResourceB)).toEqual('teststackteststackab27595cd34d8188283a1f');
        });
        test('generates different names in different accounts', () => {
            const appA = new lib_1.App();
            const stackA = new lib_1.Stack(appA, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const resourceA = new TestResource(stackA, 'Resource');
            const appB = new lib_1.App();
            const stackB = new lib_1.Stack(appB, 'TestStack', { env: { account: '012345678913', region: 'bermuda-triangle-1' } });
            const resourceB = new TestResource(stackB, 'Resource');
            expect(physical_name_generator_1.generatePhysicalName(resourceA)).not.toEqual(physical_name_generator_1.generatePhysicalName(resourceB));
        });
        test('generates different names in different regions', () => {
            const appA = new lib_1.App();
            const stackA = new lib_1.Stack(appA, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const resourceA = new TestResource(stackA, 'Resource');
            const appB = new lib_1.App();
            const stackB = new lib_1.Stack(appB, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-2' } });
            const resourceB = new TestResource(stackB, 'Resource');
            expect(physical_name_generator_1.generatePhysicalName(resourceA)).not.toEqual(physical_name_generator_1.generatePhysicalName(resourceB));
        });
        test('fails when the region is an unresolved token', () => {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912', region: lib_1.Aws.REGION } });
            const testResource = new TestResource(stack, 'A');
            expect(() => physical_name_generator_1.generatePhysicalName(testResource)).toThrow(/Cannot generate a physical name for TestStack\/A, because the region is un-resolved or missing/);
        });
        test('fails when the region is not provided', () => {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912' } });
            const testResource = new TestResource(stack, 'A');
            expect(() => physical_name_generator_1.generatePhysicalName(testResource)).toThrow(/Cannot generate a physical name for TestStack\/A, because the region is un-resolved or missing/);
        });
        test('fails when the account is an unresolved token', () => {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: lib_1.Aws.ACCOUNT_ID, region: 'bermuda-triangle-1' } });
            const testResource = new TestResource(stack, 'A');
            expect(() => physical_name_generator_1.generatePhysicalName(testResource)).toThrow(/Cannot generate a physical name for TestStack\/A, because the account is un-resolved or missing/);
        });
        test('fails when the account is not provided', () => {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { region: 'bermuda-triangle-1' } });
            const testResource = new TestResource(stack, 'A');
            expect(() => physical_name_generator_1.generatePhysicalName(testResource)).toThrow(/Cannot generate a physical name for TestStack\/A, because the account is un-resolved or missing/);
        });
    });
    describe('GeneratedWhenNeededMarker', () => {
        test('is correctly recognized', () => {
            const marker = new physical_name_generator_1.GeneratedWhenNeededMarker();
            const asString = lib_1.Token.asString(marker);
            expect(physical_name_generator_1.isGeneratedWhenNeededMarker(asString)).toEqual(true);
        });
        test('throws when resolved', () => {
            const marker = new physical_name_generator_1.GeneratedWhenNeededMarker();
            const asString = lib_1.Token.asString(marker);
            expect(() => new lib_1.Stack().resolve(asString)).toThrow(/Use "this.physicalName" instead/);
        });
    });
    describe('isGeneratedWhenNeededMarker', () => {
        test('correctly response for other tokens', () => {
            expect(physical_name_generator_1.isGeneratedWhenNeededMarker('this is not even a token!')).toEqual(false);
            expect(physical_name_generator_1.isGeneratedWhenNeededMarker(lib_1.Lazy.string({ produce: () => 'Bazinga!' }))).toEqual(false);
        });
    });
});
class TestResource extends lib_1.Resource {
}
//# sourceMappingURL=data:application/json;base64,