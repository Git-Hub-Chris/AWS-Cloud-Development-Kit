"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const sinon = require("sinon");
const lib_1 = require("../../lib");
const asset_staging_1 = require("../../lib/private/asset-staging");
const DOCKER_CMD = process.env.CDK_DOCKER ?? 'docker';
describe('bundling', () => {
    afterEach(() => {
        sinon.restore();
    });
    test('AssetBundlingVolumeCopy bundles with volume copy ', () => {
        // GIVEN
        sinon.stub(process, 'platform').value('darwin');
        const spawnSyncStub = sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        const options = {
            sourcePath: '/tmp/source',
            bundleDir: '/tmp/output',
            image: lib_1.DockerImage.fromRegistry('alpine'),
            user: '1000',
        };
        const helper = new asset_staging_1.AssetBundlingVolumeCopy(options);
        helper.run();
        // volume Creation
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'volume', 'create', sinon.match(/assetInput.*/g),
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'volume', 'create', sinon.match(/assetOutput.*/g),
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // volume removal
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'volume', 'rm', sinon.match(/assetInput.*/g),
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'volume', 'rm', sinon.match(/assetOutput.*/g),
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // prepare copy container
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'run',
            '--name', sinon.match(/copyContainer.*/g),
            '-v', sinon.match(/assetInput.*/g),
            '-v', sinon.match(/assetOutput.*/g),
            'alpine',
            'sh',
            '-c',
            `mkdir -p ${lib_1.AssetStaging.BUNDLING_INPUT_DIR} && chown -R ${options.user} ${lib_1.AssetStaging.BUNDLING_OUTPUT_DIR} && chown -R ${options.user} ${lib_1.AssetStaging.BUNDLING_INPUT_DIR}`,
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // delete copy container
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'rm', sinon.match(/copyContainer.*/g),
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // copy files to copy container
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'cp', `${options.sourcePath}/.`, `${helper.copyContainerName}:${lib_1.AssetStaging.BUNDLING_INPUT_DIR}`,
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // copy files from copy container to host
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match([
            'cp', `${helper.copyContainerName}:${lib_1.AssetStaging.BUNDLING_OUTPUT_DIR}/.`, options.bundleDir,
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
        // actual docker run
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match.array.contains([
            'run', '--rm',
            '--volumes-from', helper.copyContainerName,
            'alpine',
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
    });
    test('AssetBundlingBindMount bundles with bind mount ', () => {
        // GIVEN
        sinon.stub(process, 'platform').value('darwin');
        const spawnSyncStub = sinon.stub(child_process, 'spawnSync').returns({
            status: 0,
            stderr: Buffer.from('stderr'),
            stdout: Buffer.from('stdout'),
            pid: 123,
            output: ['stdout', 'stderr'],
            signal: null,
        });
        const options = {
            sourcePath: '/tmp/source',
            bundleDir: '/tmp/output',
            image: lib_1.DockerImage.fromRegistry('alpine'),
            user: '1000',
        };
        const helper = new asset_staging_1.AssetBundlingBindMount(options);
        helper.run();
        // actual docker run with bind mount is called
        expect(spawnSyncStub.calledWith(DOCKER_CMD, sinon.match.array.contains([
            'run', '--rm',
            '-v',
            'alpine',
        ]), { stdio: ['ignore', process.stderr, 'inherit'] })).toEqual(true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc3RhZ2luZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXQtc3RhZ2luZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQStDO0FBQy9DLCtCQUErQjtBQUMvQixtQ0FBc0Q7QUFDdEQsbUVBQWtHO0FBRWxHLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQztBQUV0RCxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUN4QixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxRQUFRO1FBQ1IsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNuRSxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUM3QixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDN0IsR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDZCxVQUFVLEVBQUUsYUFBYTtZQUN6QixTQUFTLEVBQUUsYUFBYTtZQUN4QixLQUFLLEVBQUUsaUJBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksdUNBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWIsa0JBQWtCO1FBQ2xCLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUM7U0FDakQsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJFLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztTQUNsRCxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckUsaUJBQWlCO1FBQ2pCLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUM7U0FDN0MsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJFLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztTQUM5QyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckUseUJBQXlCO1FBQ3pCLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELEtBQUs7WUFDTCxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztZQUN6QyxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUM7WUFDbEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDbkMsUUFBUTtZQUNSLElBQUk7WUFDSixJQUFJO1lBQ0osWUFBWSxrQkFBWSxDQUFDLGtCQUFrQixnQkFBZ0IsT0FBTyxDQUFDLElBQUksSUFBSSxrQkFBWSxDQUFDLG1CQUFtQixnQkFBZ0IsT0FBTyxDQUFDLElBQUksSUFBSSxrQkFBWSxDQUFDLGtCQUFrQixFQUFFO1NBQzdLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyRSx3QkFBd0I7UUFDeEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDdEQsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUM7U0FDdEMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJFLCtCQUErQjtRQUMvQixNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUN0RCxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsaUJBQWlCLElBQUksa0JBQVksQ0FBQyxrQkFBa0IsRUFBRTtTQUNsRyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckUseUNBQXlDO1FBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3RELElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxrQkFBWSxDQUFDLG1CQUFtQixJQUFJLEVBQUUsT0FBTyxDQUFDLFNBQVM7U0FDN0YsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJFLG9CQUFvQjtRQUNwQixNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ3JFLEtBQUssRUFBRSxNQUFNO1lBQ2IsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGlCQUFpQjtZQUMxQyxRQUFRO1NBQ1QsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXZFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLEdBQUcsRUFBRTtRQUMzRCxRQUFRO1FBQ1IsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNuRSxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUM3QixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDN0IsR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDZCxVQUFVLEVBQUUsYUFBYTtZQUN6QixTQUFTLEVBQUUsYUFBYTtZQUN4QixLQUFLLEVBQUUsaUJBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksc0NBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWIsOENBQThDO1FBQzlDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDckUsS0FBSyxFQUFFLE1BQU07WUFDYixJQUFJO1lBQ0osUUFBUTtTQUNULENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IEFzc2V0U3RhZ2luZywgRG9ja2VySW1hZ2UgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IHsgQXNzZXRCdW5kbGluZ0JpbmRNb3VudCwgQXNzZXRCdW5kbGluZ1ZvbHVtZUNvcHkgfSBmcm9tICcuLi8uLi9saWIvcHJpdmF0ZS9hc3NldC1zdGFnaW5nJztcblxuY29uc3QgRE9DS0VSX0NNRCA9IHByb2Nlc3MuZW52LkNES19ET0NLRVIgPz8gJ2RvY2tlcic7XG5cbmRlc2NyaWJlKCdidW5kbGluZycsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBzaW5vbi5yZXN0b3JlKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0Fzc2V0QnVuZGxpbmdWb2x1bWVDb3B5IGJ1bmRsZXMgd2l0aCB2b2x1bWUgY29weSAnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBzaW5vbi5zdHViKHByb2Nlc3MsICdwbGF0Zm9ybScpLnZhbHVlKCdkYXJ3aW4nKTtcbiAgICBjb25zdCBzcGF3blN5bmNTdHViID0gc2lub24uc3R1YihjaGlsZF9wcm9jZXNzLCAnc3Bhd25TeW5jJykucmV0dXJucyh7XG4gICAgICBzdGF0dXM6IDAsXG4gICAgICBzdGRlcnI6IEJ1ZmZlci5mcm9tKCdzdGRlcnInKSxcbiAgICAgIHN0ZG91dDogQnVmZmVyLmZyb20oJ3N0ZG91dCcpLFxuICAgICAgcGlkOiAxMjMsXG4gICAgICBvdXRwdXQ6IFsnc3Rkb3V0JywgJ3N0ZGVyciddLFxuICAgICAgc2lnbmFsOiBudWxsLFxuICAgIH0pO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBzb3VyY2VQYXRoOiAnL3RtcC9zb3VyY2UnLFxuICAgICAgYnVuZGxlRGlyOiAnL3RtcC9vdXRwdXQnLFxuICAgICAgaW1hZ2U6IERvY2tlckltYWdlLmZyb21SZWdpc3RyeSgnYWxwaW5lJyksXG4gICAgICB1c2VyOiAnMTAwMCcsXG4gICAgfTtcbiAgICBjb25zdCBoZWxwZXIgPSBuZXcgQXNzZXRCdW5kbGluZ1ZvbHVtZUNvcHkob3B0aW9ucyk7XG4gICAgaGVscGVyLnJ1bigpO1xuXG4gICAgLy8gdm9sdW1lIENyZWF0aW9uXG4gICAgZXhwZWN0KHNwYXduU3luY1N0dWIuY2FsbGVkV2l0aChET0NLRVJfQ01ELCBzaW5vbi5tYXRjaChbXG4gICAgICAndm9sdW1lJywgJ2NyZWF0ZScsIHNpbm9uLm1hdGNoKC9hc3NldElucHV0LiovZyksXG4gICAgXSksIHsgc3RkaW86IFsnaWdub3JlJywgcHJvY2Vzcy5zdGRlcnIsICdpbmhlcml0J10gfSkpLnRvRXF1YWwodHJ1ZSk7XG5cbiAgICBleHBlY3Qoc3Bhd25TeW5jU3R1Yi5jYWxsZWRXaXRoKERPQ0tFUl9DTUQsIHNpbm9uLm1hdGNoKFtcbiAgICAgICd2b2x1bWUnLCAnY3JlYXRlJywgc2lub24ubWF0Y2goL2Fzc2V0T3V0cHV0LiovZyksXG4gICAgXSksIHsgc3RkaW86IFsnaWdub3JlJywgcHJvY2Vzcy5zdGRlcnIsICdpbmhlcml0J10gfSkpLnRvRXF1YWwodHJ1ZSk7XG5cbiAgICAvLyB2b2x1bWUgcmVtb3ZhbFxuICAgIGV4cGVjdChzcGF3blN5bmNTdHViLmNhbGxlZFdpdGgoRE9DS0VSX0NNRCwgc2lub24ubWF0Y2goW1xuICAgICAgJ3ZvbHVtZScsICdybScsIHNpbm9uLm1hdGNoKC9hc3NldElucHV0LiovZyksXG4gICAgXSksIHsgc3RkaW86IFsnaWdub3JlJywgcHJvY2Vzcy5zdGRlcnIsICdpbmhlcml0J10gfSkpLnRvRXF1YWwodHJ1ZSk7XG5cbiAgICBleHBlY3Qoc3Bhd25TeW5jU3R1Yi5jYWxsZWRXaXRoKERPQ0tFUl9DTUQsIHNpbm9uLm1hdGNoKFtcbiAgICAgICd2b2x1bWUnLCAncm0nLCBzaW5vbi5tYXRjaCgvYXNzZXRPdXRwdXQuKi9nKSxcbiAgICBdKSwgeyBzdGRpbzogWydpZ25vcmUnLCBwcm9jZXNzLnN0ZGVyciwgJ2luaGVyaXQnXSB9KSkudG9FcXVhbCh0cnVlKTtcblxuICAgIC8vIHByZXBhcmUgY29weSBjb250YWluZXJcbiAgICBleHBlY3Qoc3Bhd25TeW5jU3R1Yi5jYWxsZWRXaXRoKERPQ0tFUl9DTUQsIHNpbm9uLm1hdGNoKFtcbiAgICAgICdydW4nLFxuICAgICAgJy0tbmFtZScsIHNpbm9uLm1hdGNoKC9jb3B5Q29udGFpbmVyLiovZyksXG4gICAgICAnLXYnLCBzaW5vbi5tYXRjaCgvYXNzZXRJbnB1dC4qL2cpLFxuICAgICAgJy12Jywgc2lub24ubWF0Y2goL2Fzc2V0T3V0cHV0LiovZyksXG4gICAgICAnYWxwaW5lJyxcbiAgICAgICdzaCcsXG4gICAgICAnLWMnLFxuICAgICAgYG1rZGlyIC1wICR7QXNzZXRTdGFnaW5nLkJVTkRMSU5HX0lOUFVUX0RJUn0gJiYgY2hvd24gLVIgJHtvcHRpb25zLnVzZXJ9ICR7QXNzZXRTdGFnaW5nLkJVTkRMSU5HX09VVFBVVF9ESVJ9ICYmIGNob3duIC1SICR7b3B0aW9ucy51c2VyfSAke0Fzc2V0U3RhZ2luZy5CVU5ETElOR19JTlBVVF9ESVJ9YCxcbiAgICBdKSwgeyBzdGRpbzogWydpZ25vcmUnLCBwcm9jZXNzLnN0ZGVyciwgJ2luaGVyaXQnXSB9KSkudG9FcXVhbCh0cnVlKTtcblxuICAgIC8vIGRlbGV0ZSBjb3B5IGNvbnRhaW5lclxuICAgIGV4cGVjdChzcGF3blN5bmNTdHViLmNhbGxlZFdpdGgoRE9DS0VSX0NNRCwgc2lub24ubWF0Y2goW1xuICAgICAgJ3JtJywgc2lub24ubWF0Y2goL2NvcHlDb250YWluZXIuKi9nKSxcbiAgICBdKSwgeyBzdGRpbzogWydpZ25vcmUnLCBwcm9jZXNzLnN0ZGVyciwgJ2luaGVyaXQnXSB9KSkudG9FcXVhbCh0cnVlKTtcblxuICAgIC8vIGNvcHkgZmlsZXMgdG8gY29weSBjb250YWluZXJcbiAgICBleHBlY3Qoc3Bhd25TeW5jU3R1Yi5jYWxsZWRXaXRoKERPQ0tFUl9DTUQsIHNpbm9uLm1hdGNoKFtcbiAgICAgICdjcCcsIGAke29wdGlvbnMuc291cmNlUGF0aH0vLmAsIGAke2hlbHBlci5jb3B5Q29udGFpbmVyTmFtZX06JHtBc3NldFN0YWdpbmcuQlVORExJTkdfSU5QVVRfRElSfWAsXG4gICAgXSksIHsgc3RkaW86IFsnaWdub3JlJywgcHJvY2Vzcy5zdGRlcnIsICdpbmhlcml0J10gfSkpLnRvRXF1YWwodHJ1ZSk7XG5cbiAgICAvLyBjb3B5IGZpbGVzIGZyb20gY29weSBjb250YWluZXIgdG8gaG9zdFxuICAgIGV4cGVjdChzcGF3blN5bmNTdHViLmNhbGxlZFdpdGgoRE9DS0VSX0NNRCwgc2lub24ubWF0Y2goW1xuICAgICAgJ2NwJywgYCR7aGVscGVyLmNvcHlDb250YWluZXJOYW1lfToke0Fzc2V0U3RhZ2luZy5CVU5ETElOR19PVVRQVVRfRElSfS8uYCwgb3B0aW9ucy5idW5kbGVEaXIsXG4gICAgXSksIHsgc3RkaW86IFsnaWdub3JlJywgcHJvY2Vzcy5zdGRlcnIsICdpbmhlcml0J10gfSkpLnRvRXF1YWwodHJ1ZSk7XG5cbiAgICAvLyBhY3R1YWwgZG9ja2VyIHJ1blxuICAgIGV4cGVjdChzcGF3blN5bmNTdHViLmNhbGxlZFdpdGgoRE9DS0VSX0NNRCwgc2lub24ubWF0Y2guYXJyYXkuY29udGFpbnMoW1xuICAgICAgJ3J1bicsICctLXJtJyxcbiAgICAgICctLXZvbHVtZXMtZnJvbScsIGhlbHBlci5jb3B5Q29udGFpbmVyTmFtZSxcbiAgICAgICdhbHBpbmUnLFxuICAgIF0pLCB7IHN0ZGlvOiBbJ2lnbm9yZScsIHByb2Nlc3Muc3RkZXJyLCAnaW5oZXJpdCddIH0pKS50b0VxdWFsKHRydWUpO1xuXG4gIH0pO1xuXG4gIHRlc3QoJ0Fzc2V0QnVuZGxpbmdCaW5kTW91bnQgYnVuZGxlcyB3aXRoIGJpbmQgbW91bnQgJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgc2lub24uc3R1Yihwcm9jZXNzLCAncGxhdGZvcm0nKS52YWx1ZSgnZGFyd2luJyk7XG4gICAgY29uc3Qgc3Bhd25TeW5jU3R1YiA9IHNpbm9uLnN0dWIoY2hpbGRfcHJvY2VzcywgJ3NwYXduU3luYycpLnJldHVybnMoe1xuICAgICAgc3RhdHVzOiAwLFxuICAgICAgc3RkZXJyOiBCdWZmZXIuZnJvbSgnc3RkZXJyJyksXG4gICAgICBzdGRvdXQ6IEJ1ZmZlci5mcm9tKCdzdGRvdXQnKSxcbiAgICAgIHBpZDogMTIzLFxuICAgICAgb3V0cHV0OiBbJ3N0ZG91dCcsICdzdGRlcnInXSxcbiAgICAgIHNpZ25hbDogbnVsbCxcbiAgICB9KTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgc291cmNlUGF0aDogJy90bXAvc291cmNlJyxcbiAgICAgIGJ1bmRsZURpcjogJy90bXAvb3V0cHV0JyxcbiAgICAgIGltYWdlOiBEb2NrZXJJbWFnZS5mcm9tUmVnaXN0cnkoJ2FscGluZScpLFxuICAgICAgdXNlcjogJzEwMDAnLFxuICAgIH07XG4gICAgY29uc3QgaGVscGVyID0gbmV3IEFzc2V0QnVuZGxpbmdCaW5kTW91bnQob3B0aW9ucyk7XG4gICAgaGVscGVyLnJ1bigpO1xuXG4gICAgLy8gYWN0dWFsIGRvY2tlciBydW4gd2l0aCBiaW5kIG1vdW50IGlzIGNhbGxlZFxuICAgIGV4cGVjdChzcGF3blN5bmNTdHViLmNhbGxlZFdpdGgoRE9DS0VSX0NNRCwgc2lub24ubWF0Y2guYXJyYXkuY29udGFpbnMoW1xuICAgICAgJ3J1bicsICctLXJtJyxcbiAgICAgICctdicsXG4gICAgICAnYWxwaW5lJyxcbiAgICBdKSwgeyBzdGRpbzogWydpZ25vcmUnLCBwcm9jZXNzLnN0ZGVyciwgJ2luaGVyaXQnXSB9KSkudG9FcXVhbCh0cnVlKTtcbiAgfSk7XG59KTtcbiJdfQ==