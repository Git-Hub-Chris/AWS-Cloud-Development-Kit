"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const synthesis_1 = require("../lib/private/synthesis");
class TaggableResource extends lib_1.CfnResource {
    constructor(scope, id, props) {
        super(scope, id, props);
        const tags = props.properties?.tags;
        this.tags = new lib_1.TagManager(lib_1.TagType.STANDARD, 'AWS::Fake::Resource', tags);
    }
    testProperties() {
        return this.cfnProperties;
    }
}
class AsgTaggableResource extends lib_1.CfnResource {
    constructor(scope, id, props) {
        super(scope, id, props);
        const tags = props.properties?.tags;
        this.tags = new lib_1.TagManager(lib_1.TagType.AUTOSCALING_GROUP, 'AWS::Fake::Resource', tags);
    }
    testProperties() {
        return this.cfnProperties;
    }
}
class MapTaggableResource extends lib_1.CfnResource {
    constructor(scope, id, props) {
        super(scope, id, props);
        const tags = props.properties?.tags;
        this.tags = new lib_1.TagManager(lib_1.TagType.MAP, 'AWS::Fake::Resource', tags);
    }
    testProperties() {
        return this.cfnProperties;
    }
}
describe('tag aspect', () => {
    test('Tag visit all children of the applied node', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const asg = new AsgTaggableResource(res, 'AsgFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const map = new MapTaggableResource(res, 'MapFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(res).add(new lib_1.Tag('foo', 'bar'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar' }]);
        expect(res2.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar' }]);
        expect(map.tags.renderTags()).toEqual({ foo: 'bar' });
        expect(asg.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar', propagateAtLaunch: true }]);
    });
    test('The last aspect applied takes precedence', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(res).add(new lib_1.Tag('foo', 'bar'));
        lib_1.Aspects.of(res).add(new lib_1.Tag('foo', 'foobar'));
        lib_1.Aspects.of(res).add(new lib_1.Tag('foo', 'baz'));
        lib_1.Aspects.of(res2).add(new lib_1.Tag('foo', 'good'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'foo', value: 'baz' }]);
        expect(res2.tags.renderTags()).toEqual([{ key: 'foo', value: 'good' }]);
    });
    test('RemoveTag will remove a tag if it exists', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const asg = new AsgTaggableResource(res, 'AsgFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const map = new MapTaggableResource(res, 'MapFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(root).add(new lib_1.Tag('root', 'was here'));
        lib_1.Aspects.of(res).add(new lib_1.Tag('first', 'there is only 1'));
        lib_1.Aspects.of(res).add(new lib_1.RemoveTag('root'));
        lib_1.Aspects.of(res).add(new lib_1.RemoveTag('doesnotexist'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1' }]);
        expect(map.tags.renderTags()).toEqual({ first: 'there is only 1' });
        expect(asg.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1', propagateAtLaunch: true }]);
        expect(res2.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1' }]);
    });
    test('add will add a tag and remove will remove a tag if it exists', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const asg = new AsgTaggableResource(res, 'AsgFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const map = new MapTaggableResource(res, 'MapFakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Tags.of(root).add('root', 'was here');
        lib_1.Tags.of(res).add('first', 'there is only 1');
        lib_1.Tags.of(res).remove('root');
        lib_1.Tags.of(res).remove('doesnotexist');
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1' }]);
        expect(map.tags.renderTags()).toEqual({ first: 'there is only 1' });
        expect(asg.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1', propagateAtLaunch: true }]);
        expect(res2.tags.renderTags()).toEqual([{ key: 'first', value: 'there is only 1' }]);
    });
    test('the #visit function is idempotent', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(res).add(new lib_1.Tag('foo', 'bar'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar' }]);
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar' }]);
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual([{ key: 'foo', value: 'bar' }]);
    });
    test('removeTag Aspects by default will override child Tag Aspects', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(res).add(new lib_1.RemoveTag('key'));
        lib_1.Aspects.of(res2).add(new lib_1.Tag('key', 'value'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual(undefined);
        expect(res2.tags.renderTags()).toEqual(undefined);
    });
    test('removeTag Aspects with priority 0 will not override child Tag Aspects', () => {
        const root = new lib_1.Stack();
        const res = new TaggableResource(root, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        const res2 = new TaggableResource(res, 'FakeResource', {
            type: 'AWS::Fake::Thing',
        });
        lib_1.Aspects.of(res).add(new lib_1.RemoveTag('key', { priority: 0 }));
        lib_1.Aspects.of(res2).add(new lib_1.Tag('key', 'value'));
        synthesis_1.synthesize(root);
        expect(res.tags.renderTags()).toEqual(undefined);
        expect(res2.tags.renderTags()).toEqual([{ key: 'key', value: 'value' }]);
    });
    test('Aspects are merged with tags created by L1 Constructor', () => {
        const root = new lib_1.Stack();
        const aspectBranch = new TaggableResource(root, 'FakeBranchA', {
            type: 'AWS::Fake::Thing',
            properties: {
                tags: [
                    { key: 'aspects', value: 'overwrite' },
                    { key: 'cfn', value: 'is cool' },
                ],
            },
        });
        const asgResource = new AsgTaggableResource(aspectBranch, 'FakeAsg', {
            type: 'AWS::Fake::Thing',
            properties: {
                tags: [
                    { key: 'aspects', value: 'overwrite', propagateAtLaunch: false },
                    { key: 'cfn', value: 'is cool', propagateAtLaunch: true },
                ],
            },
        });
        const mapTaggable = new MapTaggableResource(aspectBranch, 'FakeSam', {
            type: 'AWS::Fake::Thing',
            properties: {
                tags: {
                    aspects: 'overwrite',
                    cfn: 'is cool',
                },
            },
        });
        const cfnBranch = new TaggableResource(root, 'FakeBranchB', {
            type: 'AWS::Fake::Thing',
            properties: {
                tags: [
                    { key: 'cfn', value: 'is cool' },
                ],
            },
        });
        lib_1.Aspects.of(aspectBranch).add(new lib_1.Tag('aspects', 'rule'));
        synthesis_1.synthesize(root);
        expect(aspectBranch.testProperties().tags).toEqual([{ key: 'aspects', value: 'rule' }, { key: 'cfn', value: 'is cool' }]);
        expect(asgResource.testProperties().tags).toEqual([
            { key: 'aspects', value: 'rule', propagateAtLaunch: true },
            { key: 'cfn', value: 'is cool', propagateAtLaunch: true },
        ]);
        expect(mapTaggable.testProperties().tags).toEqual({
            aspects: 'rule',
            cfn: 'is cool',
        });
        expect(cfnBranch.testProperties().tags).toEqual([{ key: 'cfn', value: 'is cool' }]);
    });
    describe('when invalid tag properties are passed from L1s', () => {
        test('map passed instead of array it raises', () => {
            const root = new lib_1.Stack();
            expect(() => {
                new TaggableResource(root, 'FakeBranchA', {
                    type: 'AWS::Fake::Thing',
                    properties: {
                        tags: {
                            cfn: 'is cool',
                            aspects: 'overwrite',
                        },
                    },
                });
            }).toThrow();
            expect(() => {
                new AsgTaggableResource(root, 'FakeBranchA', {
                    type: 'AWS::Fake::Thing',
                    properties: {
                        tags: {
                            cfn: 'is cool',
                            aspects: 'overwrite',
                            propagateAtLaunch: true,
                        },
                    },
                });
            }).toThrow();
        });
        test('if array is passed instead of map it raises', () => {
            const root = new lib_1.Stack();
            expect(() => {
                new MapTaggableResource(root, 'FakeSam', {
                    type: 'AWS::Fake::Thing',
                    properties: {
                        tags: [
                            { key: 'cfn', value: 'is cool', propagateAtLaunch: true },
                            { key: 'aspects', value: 'overwrite' },
                        ],
                    },
                });
            }).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,