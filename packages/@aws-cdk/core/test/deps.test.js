"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constructs_1 = require("constructs");
const core = require("../lib");
const lib_1 = require("../lib");
const deps_1 = require("../lib/deps");
describe('deps', () => {
    describe('dependency methods', () => {
        test('can explicitly add a dependency between resources', () => {
            const app = new core.App();
            const stack = new core.Stack(app, 'TestStack');
            const resource1 = new core.CfnResource(stack, 'Resource1', { type: 'Test::Resource::Fake1' });
            const resource2 = new core.CfnResource(stack, 'Resource2', { type: 'Test::Resource::Fake2' });
            deps_1.addDependency(resource1, resource2);
            expect(app.synth().getStackByName(stack.stackName).template.Resources).toEqual({
                Resource1: {
                    Type: 'Test::Resource::Fake1',
                    DependsOn: [
                        'Resource2',
                    ],
                },
                Resource2: {
                    Type: 'Test::Resource::Fake2',
                },
            });
        });
        test('can explicitly remove a dependency between resources', () => {
            const app = new core.App();
            const stack = new core.Stack(app, 'TestStack');
            const resource1 = new core.CfnResource(stack, 'Resource1', { type: 'Test::Resource::Fake1' });
            const resource2 = new core.CfnResource(stack, 'Resource2', { type: 'Test::Resource::Fake2' });
            deps_1.addDependency(resource1, resource2);
            deps_1.removeDependency(resource1, resource2);
            expect(app.synth().getStackByName(stack.stackName).template.Resources).toEqual({
                Resource1: {
                    Type: 'Test::Resource::Fake1',
                },
                Resource2: {
                    Type: 'Test::Resource::Fake2',
                },
            });
        });
        test('can explicitly add, obtain, and remove dependencies across stacks', () => {
            const app = new core.App();
            const stack1 = new core.Stack(app, 'TestStack1');
            // Use a really long construct id to identify issues between Names.uniqueId and Names.uniqueResourceName
            const reallyLongConstructId = 'A'.repeat(247);
            const stack2 = new core.Stack(app, reallyLongConstructId, { stackName: 'TestStack2' });
            // Sanity check since this test depends on the discrepancy
            expect(lib_1.Names.uniqueId(stack2)).not.toBe(lib_1.Names.uniqueResourceName(stack2, {}));
            const resource1 = new core.CfnResource(stack1, 'Resource1', { type: 'Test::Resource::Fake1' });
            const resource2 = new core.CfnResource(stack2, 'Resource2', { type: 'Test::Resource::Fake2' });
            const resource3 = new core.CfnResource(stack1, 'Resource3', { type: 'Test::Resource::Fake3' });
            deps_1.addDependency(resource1, resource2);
            // Adding the same resource dependency twice should be a no-op
            deps_1.addDependency(resource1, resource2);
            deps_1.addDependency(resource1, resource3);
            expect(stack1.dependencies.length).toEqual(1);
            expect(stack1.dependencies[0].node.id).toEqual(stack2.node.id);
            // obtainDependencies should assemble and flatten resource-to-resource dependencies even across stacks
            expect(deps_1.obtainDependencies(resource1).map(x => x.node.path)).toEqual([resource3.node.path, resource2.node.path]);
            deps_1.removeDependency(resource1, resource2);
            // For symmetry, removing a dependency that doesn't exist should be a no-op
            deps_1.removeDependency(resource1, resource2);
            expect(stack1.dependencies.length).toEqual(0);
        });
        test('do nothing if source is target', () => {
            const app = new core.App();
            const stack = new core.Stack(app, 'TestStack');
            const resource1 = new core.CfnResource(stack, 'Resource1', { type: 'Test::Resource::Fake1' });
            deps_1.addDependency(resource1, resource1);
            expect(app.synth().getStackByName(stack.stackName).template.Resources).toEqual({
                Resource1: {
                    Type: 'Test::Resource::Fake1',
                },
            });
        });
        test('handle source being common stack', () => {
            const app = new core.App();
            const stack1 = new core.Stack(app, 'TestStack1');
            const resource1 = new core.CfnResource(stack1, 'Resource1', { type: 'Test::Resource::Fake1' });
            // If source is the common stack, this should be a noop
            deps_1.addDependency(stack1, resource1);
            expect(stack1.dependencies.length).toEqual(0);
        });
        test('throws error if target is common stack', () => {
            const app = new core.App();
            const stack1 = new core.Stack(app, 'TestStack1');
            const resource1 = new core.CfnResource(stack1, 'Resource1', { type: 'Test::Resource::Fake1' });
            expect(() => {
                deps_1.addDependency(resource1, stack1);
            }).toThrow(/cannot depend on /);
        });
        test('can explicitly add, obtain, and remove dependencies across nested stacks', () => {
            const app = new core.App();
            const stack1 = new core.Stack(app, 'TestStack1');
            const construct1 = new constructs_1.Construct(stack1, 'CommonConstruct');
            // Use a really long construct id to identify issues between Names.uniqueId and Names.uniqueResourceName
            const nestedStack1 = new core.Stack(construct1, 'TestNestedStack1');
            const nestedStack2 = new core.Stack(construct1, 'TestNestedStack2');
            const resource1 = new core.CfnResource(nestedStack1, 'Resource1', { type: 'Test::Resource::Fake1' });
            const resource2 = new core.CfnResource(nestedStack2, 'Resource2', { type: 'Test::Resource::Fake2' });
            deps_1.addDependency(resource1, resource2);
            // Adding the same resource dependency twice should be a no-op
            deps_1.addDependency(resource1, resource2);
            expect(nestedStack1.dependencies.length).toEqual(1);
            expect(nestedStack1.dependencies[0].node.id).toEqual(nestedStack2.node.id);
            deps_1.removeDependency(resource1, resource2);
            // For symmetry, removing a dependency that doesn't exist should be a no-op
            deps_1.removeDependency(resource1, resource2);
            expect(stack1.dependencies.length).toEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,