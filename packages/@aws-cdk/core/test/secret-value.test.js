"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const lib_1 = require("../lib");
describe('secret value', () => {
    cdk_build_tools_1.testDeprecated('plainText', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.plainText('this just resolves to a string');
        // THEN
        expect(stack.resolve(v)).toEqual('this just resolves to a string');
    });
    test('unsafePlainText', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.unsafePlainText('this just resolves to a string');
        // THEN
        expect(stack.resolve(v)).toEqual('this just resolves to a string');
    });
    test('isSecretValue returns true', () => {
        const v = lib_1.SecretValue.unsafePlainText('this just resolves to a string');
        // THEN
        expect(lib_1.SecretValue.isSecretValue(v)).toEqual(true);
    });
    test('secret resolution fails if feature flag is switched on, secret can be unwrapped', () => {
        const app = new lib_1.App({
            context: { '@aws-cdk/core:checkSecretUsage': true },
        });
        const stack = new lib_1.Stack(app, 'Stack');
        // WHEN
        const v = lib_1.SecretValue.unsafePlainText('s3cr3t');
        // THEN
        expect(() => stack.resolve(v)).toThrow(/Using a SecretValue here risks exposing your secret/);
        // THEN
        expect(stack.resolve(v.unsafeUnwrap())).toEqual('s3cr3t');
    });
    test('secretsManager', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.secretsManager('secret-id', {
            jsonField: 'json-key',
            versionStage: 'version-stage',
        });
        // THEN
        expect(stack.resolve(v)).toEqual('{{resolve:secretsmanager:secret-id:SecretString:json-key:version-stage:}}');
    });
    test('secretsManager with secret-id from token', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.secretsManager(lib_1.Token.asString({ Ref: 'secret-id' }), {
            jsonField: 'json-key',
            versionStage: 'version-stage',
        });
        // THEN
        expect(stack.resolve(v)).toEqual({
            'Fn::Join': [
                '',
                [
                    '{{resolve:secretsmanager:',
                    { Ref: 'secret-id' },
                    ':SecretString:json-key:version-stage:}}',
                ],
            ],
        });
    });
    test('secretsManager with defaults', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.secretsManager('secret-id');
        // THEN
        expect(stack.resolve(v)).toEqual('{{resolve:secretsmanager:secret-id:SecretString:::}}');
    });
    test('secretsManager with defaults, secret-id from token', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.secretsManager(lib_1.Token.asString({ Ref: 'secret-id' }));
        // THEN
        expect(stack.resolve(v)).toEqual({
            'Fn::Join': [
                '',
                [
                    '{{resolve:secretsmanager:',
                    { Ref: 'secret-id' },
                    ':SecretString:::}}',
                ],
            ],
        });
    });
    test('secretsManager with an empty ID', () => {
        expect(() => lib_1.SecretValue.secretsManager('')).toThrow(/secretId cannot be empty/);
    });
    test('secretsManager with versionStage and versionId', () => {
        expect(() => {
            lib_1.SecretValue.secretsManager('secret-id', {
                versionStage: 'version-stage',
                versionId: 'version-id',
            });
        }).toThrow(/were both provided but only one is allowed/);
    });
    test('secretsManager with a non-ARN ID that has colon', () => {
        expect(() => lib_1.SecretValue.secretsManager('not:an:arn')).toThrow(/is not an ARN but contains ":"/);
    });
    test('ssmSecure', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.ssmSecure('param-name', 'param-version');
        // THEN
        expect(stack.resolve(v)).toEqual('{{resolve:ssm-secure:param-name:param-version}}');
    });
    test('ssmSecure without version', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.ssmSecure('param-name');
        // THEN
        expect(stack.resolve(v)).toEqual('{{resolve:ssm-secure:param-name}}');
    });
    test('cfnDynamicReference', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const v = lib_1.SecretValue.cfnDynamicReference(new lib_1.CfnDynamicReference(lib_1.CfnDynamicReferenceService.SSM, 'foo:bar'));
        // THEN
        expect(stack.resolve(v)).toEqual('{{resolve:ssm:foo:bar}}');
    });
    test('cfnParameter (with NoEcho)', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        const p = new lib_1.CfnParameter(stack, 'MyParam', { type: 'String', noEcho: true });
        // WHEN
        const v = lib_1.SecretValue.cfnParameter(p);
        // THEN
        expect(stack.resolve(v)).toEqual({ Ref: 'MyParam' });
    });
    test('fails if cfnParameter does not have NoEcho', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        const p = new lib_1.CfnParameter(stack, 'MyParam', { type: 'String' });
        // THEN
        expect(() => lib_1.SecretValue.cfnParameter(p)).toThrow(/CloudFormation parameter must be configured with "NoEcho"/);
    });
    test('resourceAttribute does not work on literal', () => {
        expect(() => lib_1.SecretValue.resourceAttribute('xyz')).toThrow(/must be used with/);
    });
    test('resourceAttribute does not work on plain ref', () => {
        const stack = new lib_1.Stack();
        const param = new lib_1.CfnParameter(stack, 'Param');
        expect(() => lib_1.SecretValue.resourceAttribute(param.valueAsString)).toThrow(/must be used with/);
    });
    test('resourceAttribute works on actual resource attribute', () => {
        const stack = new lib_1.Stack();
        const res = new lib_1.CfnResource(stack, 'Resource', {
            type: 'AWS::My::Resource',
        });
        expect(stack.resolve(lib_1.SecretValue.resourceAttribute(res.ref))).toEqual({ Ref: 'Resource' });
    });
});
//# sourceMappingURL=data:application/json;base64,