"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../../lib");
const evaluate_cfn_1 = require("../evaluate-cfn");
const CFN_CONTEXT = {
    'AWS::Region': 'the_region',
    'AWS::AccountId': 'the_account',
    'AWS::URLSuffix': 'domain.aws',
};
let app;
let stack;
describe('CLI creds synthesis', () => {
    beforeEach(() => {
        app = new lib_1.App();
        stack = new lib_1.Stack(app, 'Stack', {
            synthesizer: new lib_1.CliCredentialsStackSynthesizer(),
        });
    });
    test('stack template is in asset manifest', () => {
        // GIVEN
        new lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN -- the S3 url is advertised on the stack artifact
        const stackArtifact = asm.getStackArtifact('Stack');
        const templateObjectKey = last(stackArtifact.stackTemplateAssetObjectUrl?.split('/'));
        expect(stackArtifact.stackTemplateAssetObjectUrl).toEqual(`s3://cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}/${templateObjectKey}`);
        // THEN - the template is in the asset manifest
        const manifestArtifact = asm.artifacts.filter(isAssetManifest)[0];
        expect(manifestArtifact).toBeDefined();
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        const firstFile = (manifest.files ? manifest.files[Object.keys(manifest.files)[0]] : undefined) ?? {};
        expect(firstFile).toEqual({
            source: { path: 'Stack.template.json', packaging: 'file' },
            destinations: {
                'current_account-current_region': {
                    bucketName: 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                    objectKey: templateObjectKey,
                },
            },
        });
    });
    test('add file asset', () => {
        // WHEN
        const location = stack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'abcdef',
        });
        // THEN - we have a fixed asset location with region placeholders
        expect(evalCFN(location.bucketName)).toEqual('cdk-hnb659fds-assets-the_account-the_region');
        expect(evalCFN(location.s3Url)).toEqual('https://s3.the_region.domain.aws/cdk-hnb659fds-assets-the_account-the_region/abcdef.js');
        // THEN - object key contains source hash somewhere
        expect(location.objectKey.indexOf('abcdef')).toBeGreaterThan(-1);
    });
    test('add docker image asset', () => {
        // WHEN
        const location = stack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'abcdef',
        });
        // THEN - we have a fixed asset location with region placeholders
        expect(evalCFN(location.repositoryName)).toEqual('cdk-hnb659fds-container-assets-the_account-the_region');
        expect(evalCFN(location.imageUri)).toEqual('the_account.dkr.ecr.the_region.domain.aws/cdk-hnb659fds-container-assets-the_account-the_region:abcdef');
    });
    test('synthesis', () => {
        // GIVEN
        stack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'abcdef',
        });
        stack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'abcdef',
        });
        // WHEN
        const asm = app.synth();
        // THEN - we have an asset manifest with both assets and the stack template in there
        const manifestArtifact = getAssetManifest(asm);
        const manifest = readAssetManifest(manifestArtifact);
        expect(Object.keys(manifest.files || {}).length).toEqual(2);
        expect(Object.keys(manifest.dockerImages || {}).length).toEqual(1);
    });
    test('customize publishing resources', () => {
        // GIVEN
        const myapp = new lib_1.App();
        // WHEN
        const mystack = new lib_1.Stack(myapp, 'mystack', {
            synthesizer: new lib_1.CliCredentialsStackSynthesizer({
                fileAssetsBucketName: 'file-asset-bucket',
                imageAssetsRepositoryName: 'image-ecr-repository',
            }),
        });
        mystack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'file-asset-hash',
        });
        mystack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'docker-asset-hash',
        });
        // THEN
        const asm = myapp.synth();
        const manifest = readAssetManifest(getAssetManifest(asm));
        expect(manifest.files?.['file-asset-hash']?.destinations?.['current_account-current_region']).toEqual({
            bucketName: 'file-asset-bucket',
            objectKey: 'file-asset-hash.js',
        });
        expect(manifest.dockerImages?.['docker-asset-hash']?.destinations?.['current_account-current_region']).toEqual({
            repositoryName: 'image-ecr-repository',
            imageTag: 'docker-asset-hash',
        });
    });
    test('synthesis with bucketPrefix', () => {
        // GIVEN
        const myapp = new lib_1.App();
        // WHEN
        const mystack = new lib_1.Stack(myapp, 'mystack-bucketPrefix', {
            synthesizer: new lib_1.CliCredentialsStackSynthesizer({
                fileAssetsBucketName: 'file-asset-bucket',
                bucketPrefix: '000000000000/',
            }),
        });
        mystack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'file-asset-hash-with-prefix',
        });
        // WHEN
        const asm = myapp.synth();
        // THEN -- the S3 url is advertised on the stack artifact
        const stackArtifact = asm.getStackArtifact('mystack-bucketPrefix');
        // THEN - we have an asset manifest with both assets and the stack template in there
        const manifest = readAssetManifest(getAssetManifest(asm));
        // THEN
        expect(manifest.files?.['file-asset-hash-with-prefix']?.destinations?.['current_account-current_region']).toEqual({
            bucketName: 'file-asset-bucket',
            objectKey: '000000000000/file-asset-hash-with-prefix.js',
        });
        const templateHash = last(stackArtifact.stackTemplateAssetObjectUrl?.split('/'));
        expect(stackArtifact.stackTemplateAssetObjectUrl).toEqual(`s3://file-asset-bucket/000000000000/${templateHash}`);
    });
    test('synthesis with dockerPrefix', () => {
        // GIVEN
        const myapp = new lib_1.App();
        // WHEN
        const mystack = new lib_1.Stack(myapp, 'mystack-dockerPrefix', {
            synthesizer: new lib_1.CliCredentialsStackSynthesizer({
                dockerTagPrefix: 'test-prefix-',
            }),
        });
        mystack.synthesizer.addDockerImageAsset({
            directoryName: 'some-folder',
            sourceHash: 'docker-asset-hash',
        });
        const asm = myapp.synth();
        // THEN
        const manifest = readAssetManifest(getAssetManifest(asm));
        const imageTag = manifest.dockerImages?.['docker-asset-hash']?.destinations?.['current_account-current_region'].imageTag;
        expect(imageTag).toEqual('test-prefix-docker-asset-hash');
    });
    test('can use same synthesizer for multiple stacks', () => {
        // GIVEN
        const synthesizer = new lib_1.CliCredentialsStackSynthesizer();
        // WHEN
        new lib_1.Stack(app, 'Stack2', { synthesizer });
        new lib_1.Stack(app, 'Stack3', { synthesizer });
        app.synth();
    });
});
test('get an exception when using tokens for parameters', () => {
    expect(() => {
        // GIVEN
        new lib_1.CliCredentialsStackSynthesizer({
            fileAssetsBucketName: `my-bucket-${lib_1.Aws.REGION}`,
        });
    }).toThrow(/cannot contain tokens/);
});
/**
 * Evaluate a possibly string-containing value the same way CFN would do
 *
 * (Be invariant to the specific Fn::Sub or Fn::Join we would output)
 */
function evalCFN(value) {
    return evaluate_cfn_1.evaluateCFN(stack.resolve(value), CFN_CONTEXT);
}
function isAssetManifest(x) {
    return x instanceof cxapi.AssetManifestArtifact;
}
function getAssetManifest(asm) {
    const manifestArtifact = asm.artifacts.filter(isAssetManifest)[0];
    if (!manifestArtifact) {
        throw new Error('no asset manifest in assembly');
    }
    return manifestArtifact;
}
function readAssetManifest(manifestArtifact) {
    return JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
}
function last(xs) {
    return xs ? xs[xs.length - 1] : undefined;
}
//# sourceMappingURL=data:application/json;base64,