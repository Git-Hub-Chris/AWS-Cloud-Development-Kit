"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const cfn_json_1 = require("../lib/cfn-json");
const index_1 = require("../lib/private/cfn-utils-provider/index");
describe('cfn json', () => {
    test('resolves to a fn::getatt', () => {
        // GIVEN
        const app = new lib_1.App();
        const stack = new lib_1.Stack(app, 'test');
        // WHEN
        const json = new cfn_json_1.CfnJson(stack, 'MyCfnJson', {
            value: {
                hello: 1234,
                world: { bar: 1234 },
            },
        });
        // THEN
        const template = app.synth().getStackArtifact(stack.artifactId).template;
        // input is stringified
        expect(template.Resources.MyCfnJson248769BB.Properties.Value).toEqual('{"hello":1234,"world":{"bar":1234}}');
        // output is basically an Fn::GetAtt
        expect(stack.resolve(json)).toEqual({ 'Fn::GetAtt': ['MyCfnJson248769BB', 'Value'] });
    });
    test('tokens and intrinsics can be used freely in keys or values', () => {
        // GIVEN
        const app = new lib_1.App();
        const stack = new lib_1.Stack(app, 'test');
        const other = new lib_1.CfnResource(stack, 'Other', { type: 'MyResource' });
        // WHEN
        new cfn_json_1.CfnJson(stack, 'MyCfnJson', {
            value: {
                [other.ref]: 1234,
                world: {
                    bar: `this is a ${lib_1.Lazy.string({ produce: () => 'I am lazy' })}`,
                },
            },
        });
        // THEN
        const template = app.synth().getStackArtifact(stack.artifactId).template;
        expect(template.Resources.MyCfnJson248769BB.Properties.Value).toEqual({
            'Fn::Join': ['', ['{"', { Ref: 'Other' }, '":1234,"world":{"bar":"this is a I am lazy"}}']],
        });
    });
    test('JSON.stringify() will return the CFN-stringified value to avoid circular references', () => {
        // GIVEN
        const stack = new lib_1.Stack();
        const res = new lib_1.CfnResource(stack, 'MyResource', { type: 'Foo' });
        const cfnjson = new cfn_json_1.CfnJson(stack, 'MyCfnJson', {
            value: {
                [`ref=${res.ref}`]: `this is a ${lib_1.Lazy.string({ produce: () => 'I am lazy' })}`,
            },
        });
        // WHEN
        const str = JSON.stringify(cfnjson);
        // THEN
        expect(typeof (str)).toEqual('string');
        expect(stack.resolve(str)).toEqual({
            'Fn::Join': ['', ['"{"ref=', { Ref: 'MyResource' }, '":"this is a I am lazy"}"']],
        });
    });
    test('resource provider simply parses json and reflects back as an attribute', async () => {
        const input = { foo: 1234 };
        const response = await index_1.handler({
            ResourceType: "Custom::AWSCDKCfnJson" /* CFN_JSON */,
            ResourceProperties: {
                Value: JSON.stringify(input),
            },
        });
        expect(input).toEqual(response.Data.Value);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2ZuLWpzb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNmbi1qc29uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBdUQ7QUFDdkQsOENBQTBDO0FBRTFDLG1FQUFrRTtBQUVsRSxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUV4QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1FBQ3BDLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVyQyxPQUFPO1FBQ1AsTUFBTSxJQUFJLEdBQUcsSUFBSSxrQkFBTyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7WUFDM0MsS0FBSyxFQUFFO2dCQUNMLEtBQUssRUFBRSxJQUFJO2dCQUNYLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7YUFDckI7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFFekUsdUJBQXVCO1FBQ3ZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUU3RyxvQ0FBb0M7UUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNERBQTRELEVBQUUs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LEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIENmblJlc291cmNlLCBMYXp5LCBTdGFjayB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBDZm5Kc29uIH0gZnJvbSAnLi4vbGliL2Nmbi1qc29uJztcbmltcG9ydCB7IENmblV0aWxzUmVzb3VyY2VUeXBlIH0gZnJvbSAnLi4vbGliL3ByaXZhdGUvY2ZuLXV0aWxzLXByb3ZpZGVyL2NvbnN0cyc7XG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi4vbGliL3ByaXZhdGUvY2ZuLXV0aWxzLXByb3ZpZGVyL2luZGV4JztcblxuZGVzY3JpYmUoJ2NmbiBqc29uJywgKCkgPT4ge1xuXG4gIHRlc3QoJ3Jlc29sdmVzIHRvIGEgZm46OmdldGF0dCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICd0ZXN0Jyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QganNvbiA9IG5ldyBDZm5Kc29uKHN0YWNrLCAnTXlDZm5Kc29uJywge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGVsbG86IDEyMzQsXG4gICAgICAgIHdvcmxkOiB7IGJhcjogMTIzNCB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGFwcC5zeW50aCgpLmdldFN0YWNrQXJ0aWZhY3Qoc3RhY2suYXJ0aWZhY3RJZCkudGVtcGxhdGU7XG5cbiAgICAvLyBpbnB1dCBpcyBzdHJpbmdpZmllZFxuICAgIGV4cGVjdCh0ZW1wbGF0ZS5SZXNvdXJjZXMuTXlDZm5Kc29uMjQ4NzY5QkIuUHJvcGVydGllcy5WYWx1ZSkudG9FcXVhbCgne1wiaGVsbG9cIjoxMjM0LFwid29ybGRcIjp7XCJiYXJcIjoxMjM0fX0nKTtcblxuICAgIC8vIG91dHB1dCBpcyBiYXNpY2FsbHkgYW4gRm46OkdldEF0dFxuICAgIGV4cGVjdChzdGFjay5yZXNvbHZlKGpzb24pKS50b0VxdWFsKHsgJ0ZuOjpHZXRBdHQnOiBbJ015Q2ZuSnNvbjI0ODc2OUJCJywgJ1ZhbHVlJ10gfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Rva2VucyBhbmQgaW50cmluc2ljcyBjYW4gYmUgdXNlZCBmcmVlbHkgaW4ga2V5cyBvciB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAndGVzdCcpO1xuICAgIGNvbnN0IG90aGVyID0gbmV3IENmblJlc291cmNlKHN0YWNrLCAnT3RoZXInLCB7IHR5cGU6ICdNeVJlc291cmNlJyB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgQ2ZuSnNvbihzdGFjaywgJ015Q2ZuSnNvbicsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIFtvdGhlci5yZWZdOiAxMjM0LFxuICAgICAgICB3b3JsZDoge1xuICAgICAgICAgIGJhcjogYHRoaXMgaXMgYSAke0xhenkuc3RyaW5nKHsgcHJvZHVjZTogKCkgPT4gJ0kgYW0gbGF6eScgfSl9YCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgdGVtcGxhdGUgPSBhcHAuc3ludGgoKS5nZXRTdGFja0FydGlmYWN0KHN0YWNrLmFydGlmYWN0SWQpLnRlbXBsYXRlO1xuXG4gICAgZXhwZWN0KHRlbXBsYXRlLlJlc291cmNlcy5NeUNmbkpzb24yNDg3NjlCQi5Qcm9wZXJ0aWVzLlZhbHVlKS50b0VxdWFsKHtcbiAgICAgICdGbjo6Sm9pbic6IFsnJywgWyd7XCInLCB7IFJlZjogJ090aGVyJyB9LCAnXCI6MTIzNCxcIndvcmxkXCI6e1wiYmFyXCI6XCJ0aGlzIGlzIGEgSSBhbSBsYXp5XCJ9fSddXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnSlNPTi5zdHJpbmdpZnkoKSB3aWxsIHJldHVybiB0aGUgQ0ZOLXN0cmluZ2lmaWVkIHZhbHVlIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHJlcyA9IG5ldyBDZm5SZXNvdXJjZShzdGFjaywgJ015UmVzb3VyY2UnLCB7IHR5cGU6ICdGb28nIH0pO1xuICAgIGNvbnN0IGNmbmpzb24gPSBuZXcgQ2ZuSnNvbihzdGFjaywgJ015Q2ZuSnNvbicsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIFtgcmVmPSR7cmVzLnJlZn1gXTogYHRoaXMgaXMgYSAke0xhenkuc3RyaW5nKHsgcHJvZHVjZTogKCkgPT4gJ0kgYW0gbGF6eScgfSl9YCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc3RyID0gSlNPTi5zdHJpbmdpZnkoY2ZuanNvbik7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHR5cGVvZihzdHIpKS50b0VxdWFsKCdzdHJpbmcnKTtcbiAgICBleHBlY3Qoc3RhY2sucmVzb2x2ZShzdHIpKS50b0VxdWFsKHtcbiAgICAgICdGbjo6Sm9pbic6IFsnJywgWydcIntcInJlZj0nLCB7IFJlZjogJ015UmVzb3VyY2UnIH0sICdcIjpcInRoaXMgaXMgYSBJIGFtIGxhenlcIn1cIiddXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVzb3VyY2UgcHJvdmlkZXIgc2ltcGx5IHBhcnNlcyBqc29uIGFuZCByZWZsZWN0cyBiYWNrIGFzIGFuIGF0dHJpYnV0ZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IHsgZm9vOiAxMjM0IH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVyKHtcbiAgICAgIFJlc291cmNlVHlwZTogQ2ZuVXRpbHNSZXNvdXJjZVR5cGUuQ0ZOX0pTT04sXG4gICAgICBSZXNvdXJjZVByb3BlcnRpZXM6IHtcbiAgICAgICAgVmFsdWU6IEpTT04uc3RyaW5naWZ5KGlucHV0KSxcbiAgICAgIH0sXG4gICAgfSBhcyBhbnkpO1xuICAgIGV4cGVjdChpbnB1dCkudG9FcXVhbChyZXNwb25zZS5EYXRhLlZhbHVlKTtcbiAgfSk7XG59KTtcbiJdfQ==