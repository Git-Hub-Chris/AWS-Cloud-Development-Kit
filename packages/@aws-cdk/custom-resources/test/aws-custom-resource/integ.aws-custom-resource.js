#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const lib_1 = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    resourceType: 'Custom::SNSPublisher',
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn,
        },
        physicalResourceId: lib_1.PhysicalResourceId.of(topic.topicArn),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Topics.0.TopicArn'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'Utf8Parameter', {
    stringValue: 'ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ!"#¤%&/()=?`´^*+~_-.,:;<>|',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    resourceType: 'Custom::SSMParameter',
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true,
        },
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Parameter.ARN'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
const customRole = new iam.Role(stack, 'CustomRole', {
    assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
});
customRole.addToPolicy(new iam.PolicyStatement({
    effect: iam.Effect.ALLOW,
    resources: ['*'],
    actions: [
        'ssm:*',
    ],
}));
const getParameterNoPolicy = new lib_1.AwsCustomResource(stack, 'GetParameterNoPolicy', {
    resourceType: 'Custom::SSMParameter',
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true,
        },
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Parameter.ARN'),
    },
    role: customRole,
});
new cdk.CfnOutput(stack, 'MessageId', { value: snsPublish.getResponseField('MessageId') });
new cdk.CfnOutput(stack, 'TopicArn', { value: listTopics.getResponseField('Topics.0.TopicArn') });
new cdk.CfnOutput(stack, 'ParameterValue', { value: getParameter.getResponseField('Parameter.Value') });
new cdk.CfnOutput(stack, 'ParameterValueNoPolicy', { value: getParameterNoPolicy.getResponseField('Parameter.Value') });
new integ.IntegTest(app, 'AwsCustomResourceTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLDhDQUE4QztBQUM5QyxtQ0FBMkY7QUFFM0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRW5ELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFNUMsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ3pELFlBQVksRUFBRSxzQkFBc0I7SUFDcEMsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsU0FBUztRQUNqQixVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsT0FBTztZQUNoQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDekI7UUFDRCxrQkFBa0IsRUFBRSx3QkFBa0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztLQUMxRDtJQUNELE1BQU0sRUFBRSw2QkFBdUIsQ0FBQyxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDbEcsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQzVELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTSxFQUFFLFlBQVk7UUFDcEIsa0JB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QUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHNzbSBmcm9tICdAYXdzLWNkay9hd3Mtc3NtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCB7IEF3c0N1c3RvbVJlc291cmNlLCBBd3NDdXN0b21SZXNvdXJjZVBvbGljeSwgUGh5c2ljYWxSZXNvdXJjZUlkIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstc2RrLWpzJyk7XG5cbmNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG5cbmNvbnN0IHNuc1B1Ymxpc2ggPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdQdWJsaXNoJywge1xuICByZXNvdXJjZVR5cGU6ICdDdXN0b206OlNOU1B1Ymxpc2hlcicsXG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAncHVibGlzaCcsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTWVzc2FnZTogJ2hlbGxvJyxcbiAgICAgIFRvcGljQXJuOiB0b3BpYy50b3BpY0FybixcbiAgICB9LFxuICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogUGh5c2ljYWxSZXNvdXJjZUlkLm9mKHRvcGljLnRvcGljQXJuKSxcbiAgfSxcbiAgcG9saWN5OiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoeyByZXNvdXJjZXM6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LkFOWV9SRVNPVVJDRSB9KSxcbn0pO1xuXG5jb25zdCBsaXN0VG9waWNzID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnTGlzdFRvcGljcycsIHtcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU05TJyxcbiAgICBhY3Rpb246ICdsaXN0VG9waWNzJyxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5mcm9tUmVzcG9uc2UoJ1RvcGljcy4wLlRvcGljQXJuJyksXG4gIH0sXG4gIHBvbGljeTogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuZnJvbVNka0NhbGxzKHsgcmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0UgfSksXG59KTtcbmxpc3RUb3BpY3Mubm9kZS5hZGREZXBlbmRlbmN5KHRvcGljKTtcblxuY29uc3Qgc3NtUGFyYW1ldGVyID0gbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIoc3RhY2ssICdVdGY4UGFyYW1ldGVyJywge1xuICBzdHJpbmdWYWx1ZTogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaw4XDhMOWIVwiI8KkJSYvKCk9P2DCtF4qK35fLS4sOjs8PnwnLFxufSk7XG5jb25zdCBnZXRQYXJhbWV0ZXIgPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdHZXRQYXJhbWV0ZXInLCB7XG4gIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6U1NNUGFyYW1ldGVyJyxcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU1NNJyxcbiAgICBhY3Rpb246ICdnZXRQYXJhbWV0ZXInLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIE5hbWU6IHNzbVBhcmFtZXRlci5wYXJhbWV0ZXJOYW1lLFxuICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgfSxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5mcm9tUmVzcG9uc2UoJ1BhcmFtZXRlci5BUk4nKSxcbiAgfSxcbiAgcG9saWN5OiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoeyByZXNvdXJjZXM6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LkFOWV9SRVNPVVJDRSB9KSxcbn0pO1xuXG5jb25zdCBjdXN0b21Sb2xlID0gbmV3IGlhbS5Sb2xlKHN0YWNrLCAnQ3VzdG9tUm9sZScsIHtcbiAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2xhbWJkYS5hbWF6b25hd3MuY29tJyksXG59KTtcbmN1c3RvbVJvbGUuYWRkVG9Qb2xpY3koXG4gIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICBlZmZlY3Q6IGlhbS5FZmZlY3QuQUxMT1csXG4gICAgcmVzb3VyY2VzOiBbJyonXSxcbiAgICBhY3Rpb25zOiBbXG4gICAgICAnc3NtOionLFxuICAgIF0sXG4gIH0pLFxuKTtcbmNvbnN0IGdldFBhcmFtZXRlck5vUG9saWN5ID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnR2V0UGFyYW1ldGVyTm9Qb2xpY3knLCB7XG4gIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6U1NNUGFyYW1ldGVyJyxcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU1NNJyxcbiAgICBhY3Rpb246ICdnZXRQYXJhbWV0ZXInLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIE5hbWU6IHNzbVBhcmFtZXRlci5wYXJhbWV0ZXJOYW1lLFxuICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgfSxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5mcm9tUmVzcG9uc2UoJ1BhcmFtZXRlci5BUk4nKSxcbiAgfSxcbiAgcm9sZTogY3VzdG9tUm9sZSxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ01lc3NhZ2VJZCcsIHsgdmFsdWU6IHNuc1B1Ymxpc2guZ2V0UmVzcG9uc2VGaWVsZCgnTWVzc2FnZUlkJykgfSk7XG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1RvcGljQXJuJywgeyB2YWx1ZTogbGlzdFRvcGljcy5nZXRSZXNwb25zZUZpZWxkKCdUb3BpY3MuMC5Ub3BpY0FybicpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQYXJhbWV0ZXJWYWx1ZScsIHsgdmFsdWU6IGdldFBhcmFtZXRlci5nZXRSZXNwb25zZUZpZWxkKCdQYXJhbWV0ZXIuVmFsdWUnKSB9KTtcbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnUGFyYW1ldGVyVmFsdWVOb1BvbGljeScsIHsgdmFsdWU6IGdldFBhcmFtZXRlck5vUG9saWN5LmdldFJlc3BvbnNlRmllbGQoJ1BhcmFtZXRlci5WYWx1ZScpIH0pO1xuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ0F3c0N1c3RvbVJlc291cmNlVGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19