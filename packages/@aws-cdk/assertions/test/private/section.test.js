"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const section_1 = require("../../lib/private/section");
describe('section', () => {
    describe('matchSection', () => {
        test('success', () => {
            // GIVEN
            const matcher = lib_1.Match.objectLike({ foo: 'bar' });
            const section = {
                Entry1: { foo: 'bar' },
                Entry2: { foo: 'bar', baz: 'qux' },
                Entry3: { fred: 'waldo' },
            };
            // WHEN
            const result = section_1.matchSection(section, matcher);
            // THEN
            expect(result.match).toEqual(true);
            const success = result;
            expect(Object.keys(success.matches).length).toEqual(2);
            expect(success.matches.Entry1).toEqual({ foo: 'bar' });
            expect(success.matches.Entry2).toEqual({ foo: 'bar', baz: 'qux' });
        });
        test('failure', () => {
            // GIVEN
            const matcher = lib_1.Match.objectLike({ foo: 'bar' });
            const section = {
                Entry1: { foo: 'qux' },
                Entry3: { fred: 'waldo' },
            };
            // WHEN
            const result = section_1.matchSection(section, matcher);
            // THEN
            expect(result.match).toEqual(false);
            const success = result;
            expect(success.analyzedCount).toEqual(2);
            const ckeys = Object.keys(success.closestResults);
            expect(ckeys).not.toEqual([]);
            expect(success.closestResults[ckeys[0]].target).toEqual({ foo: 'qux' });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VjdGlvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHVEQUFxRjtBQUVyRixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtJQUN2QixRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUNuQixRQUFRO1lBQ1IsTUFBTSxPQUFPLEdBQUcsV0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sT0FBTyxHQUFHO2dCQUNkLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7Z0JBQ3RCLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtnQkFDbEMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTthQUMxQixDQUFDO1lBRUYsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLHNCQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTlDLE9BQU87WUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxNQUFNLE9BQU8sR0FBRyxNQUFzQixDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQ25CLFFBQVE7WUFDUixNQUFNLE9BQU8sR0FBRyxXQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDakQsTUFBTSxPQUFPLEdBQUc7Z0JBQ2QsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtnQkFDdEIsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTthQUMxQixDQUFDO1lBRUYsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLHNCQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTlDLE9BQU87WUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxNQUFNLE9BQU8sR0FBRyxNQUFzQixDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXpDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdGNoIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IE1hdGNoRmFpbHVyZSwgbWF0Y2hTZWN0aW9uLCBNYXRjaFN1Y2Nlc3MgfSBmcm9tICcuLi8uLi9saWIvcHJpdmF0ZS9zZWN0aW9uJztcblxuZGVzY3JpYmUoJ3NlY3Rpb24nLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdtYXRjaFNlY3Rpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc3VjY2VzcycsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBtYXRjaGVyID0gTWF0Y2gub2JqZWN0TGlrZSh7IGZvbzogJ2JhcicgfSk7XG4gICAgICBjb25zdCBzZWN0aW9uID0ge1xuICAgICAgICBFbnRyeTE6IHsgZm9vOiAnYmFyJyB9LFxuICAgICAgICBFbnRyeTI6IHsgZm9vOiAnYmFyJywgYmF6OiAncXV4JyB9LFxuICAgICAgICBFbnRyeTM6IHsgZnJlZDogJ3dhbGRvJyB9LFxuICAgICAgfTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgcmVzdWx0ID0gbWF0Y2hTZWN0aW9uKHNlY3Rpb24sIG1hdGNoZXIpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVzdWx0Lm1hdGNoKS50b0VxdWFsKHRydWUpO1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IHJlc3VsdCBhcyBNYXRjaFN1Y2Nlc3M7XG4gICAgICBleHBlY3QoT2JqZWN0LmtleXMoc3VjY2Vzcy5tYXRjaGVzKS5sZW5ndGgpLnRvRXF1YWwoMik7XG4gICAgICBleHBlY3Qoc3VjY2Vzcy5tYXRjaGVzLkVudHJ5MSkudG9FcXVhbCh7IGZvbzogJ2JhcicgfSk7XG4gICAgICBleHBlY3Qoc3VjY2Vzcy5tYXRjaGVzLkVudHJ5MikudG9FcXVhbCh7IGZvbzogJ2JhcicsIGJhejogJ3F1eCcgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdmYWlsdXJlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IG1hdGNoZXIgPSBNYXRjaC5vYmplY3RMaWtlKHsgZm9vOiAnYmFyJyB9KTtcbiAgICAgIGNvbnN0IHNlY3Rpb24gPSB7XG4gICAgICAgIEVudHJ5MTogeyBmb286ICdxdXgnIH0sXG4gICAgICAgIEVudHJ5MzogeyBmcmVkOiAnd2FsZG8nIH0sXG4gICAgICB9O1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCByZXN1bHQgPSBtYXRjaFNlY3Rpb24oc2VjdGlvbiwgbWF0Y2hlcik7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZXN1bHQubWF0Y2gpLnRvRXF1YWwoZmFsc2UpO1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IHJlc3VsdCBhcyBNYXRjaEZhaWx1cmU7XG4gICAgICBleHBlY3Qoc3VjY2Vzcy5hbmFseXplZENvdW50KS50b0VxdWFsKDIpO1xuXG4gICAgICBjb25zdCBja2V5cyA9IE9iamVjdC5rZXlzKHN1Y2Nlc3MuY2xvc2VzdFJlc3VsdHMpO1xuICAgICAgZXhwZWN0KGNrZXlzKS5ub3QudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3Qoc3VjY2Vzcy5jbG9zZXN0UmVzdWx0c1tja2V5c1swXV0udGFyZ2V0KS50b0VxdWFsKHsgZm9vOiAncXV4JyB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0=