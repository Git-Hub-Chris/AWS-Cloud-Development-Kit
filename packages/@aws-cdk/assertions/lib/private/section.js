"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterLogicalId = exports.formatFailure = exports.formatSectionMatchFailure = exports.formatAllMismatches = exports.formatAllMatches = exports.matchSection = void 0;
const sorting_1 = require("./sorting");
const match_1 = require("../match");
const matcher_1 = require("../matcher");
function matchSection(section, props) {
    const matcher = matcher_1.Matcher.isMatcher(props) ? props : match_1.Match.objectLike(props);
    const matching = {};
    const analyzed = {};
    const failures = new Array();
    eachEntryInSection(section, (logicalId, entry) => {
        analyzed[logicalId] = entry;
        const result = matcher.test(entry);
        result.finished();
        if (!result.hasFailed()) {
            matching[logicalId] = entry;
        }
        else {
            failures.push([logicalId, result]);
        }
    });
    if (Object.keys(matching).length > 0) {
        return { match: true, matches: matching, analyzedCount: Object.keys(analyzed).length, analyzed: analyzed };
    }
    else {
        // Sort by cost, use logicalId as a tie breaker. Take the 3 closest
        // matches (helps debugging in case we get the top pick wrong).
        failures.sort(sorting_1.sortKeyComparator(([logicalId, result]) => [result.failCost, logicalId]));
        const closestResults = Object.fromEntries(failures.slice(0, 3));
        return { match: false, closestResults, analyzedCount: Object.keys(analyzed).length, analyzed: analyzed };
    }
}
exports.matchSection = matchSection;
function eachEntryInSection(section, cb) {
    for (const logicalId of Object.keys(section ?? {})) {
        const resource = section[logicalId];
        cb(logicalId, resource);
    }
}
function formatAllMatches(matches) {
    return [
        leftPad(JSON.stringify(matches, undefined, 2)),
    ].join('\n');
}
exports.formatAllMatches = formatAllMatches;
function formatAllMismatches(analyzed, matches = {}) {
    return [
        'The following resources do not match the given definition:',
        ...Object.keys(analyzed).filter(id => !(id in matches)).map(id => `\t${id}`),
    ].join('\n');
}
exports.formatAllMismatches = formatAllMismatches;
function formatSectionMatchFailure(qualifier, result, what = 'Template') {
    return [
        `${what} has ${result.analyzedCount} ${qualifier}`,
        result.analyzedCount > 0 ? ', but none match as expected' : '',
        '.\n',
        formatFailure(result.closestResults),
    ].join('');
}
exports.formatSectionMatchFailure = formatSectionMatchFailure;
function formatFailure(closestResults) {
    const keys = Object.keys(closestResults);
    if (keys.length === 0) {
        return 'No matches found';
    }
    return [
        `The ${keys.length} closest matches:`,
        ...keys.map(key => `${key} :: ${closestResults[key].renderMismatch()}`),
    ].join('\n');
}
exports.formatFailure = formatFailure;
function leftPad(x, indent = 2) {
    const pad = ' '.repeat(indent);
    return pad + x.split('\n').join(`\n${pad}`);
}
function filterLogicalId(section, logicalId) {
    // default signal for all logicalIds is '*'
    if (logicalId === '*')
        return section;
    return Object.entries(section ?? {})
        .filter(([k, _]) => k === logicalId)
        .reduce((agg, [k, v]) => { return { ...agg, [k]: v }; }, {});
}
exports.filterLogicalId = filterLogicalId;
//# sourceMappingURL=data:application/json;base64,