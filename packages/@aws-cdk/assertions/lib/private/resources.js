"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.countResourcesProperties = exports.countResources = exports.hasResourceProperties = exports.hasResource = exports.allResourcesProperties = exports.allResources = exports.findResources = void 0;
const absent_1 = require("./matchers/absent");
const section_1 = require("./section");
const __1 = require("..");
function findResources(template, type, props = {}) {
    const section = template.Resources ?? {};
    const result = section_1.matchSection(filterType(section, type), props);
    if (!result.match) {
        return {};
    }
    return result.matches;
}
exports.findResources = findResources;
function allResources(template, type, props) {
    const section = template.Resources ?? {};
    const result = section_1.matchSection(filterType(section, type), props);
    if (result.match) {
        const matchCount = Object.keys(result.matches).length;
        if (result.analyzedCount > matchCount) {
            return [
                `Template has ${result.analyzedCount} resource(s) with type ${type}, but only ${matchCount} match as expected.`,
                section_1.formatAllMismatches(result.analyzed, result.matches),
            ].join('\n');
        }
    }
    else {
        return [
            `Template has ${result.analyzedCount} resource(s) with type ${type}, but none match as expected.`,
            section_1.formatAllMismatches(result.analyzed),
        ].join('\n');
    }
}
exports.allResources = allResources;
function allResourcesProperties(template, type, props) {
    let amended = template;
    // special case to exclude AbsentMatch because adding an empty Properties object will affect its evaluation.
    if (!__1.Matcher.isMatcher(props) || !(props instanceof absent_1.AbsentMatch)) {
        // amended needs to be a deep copy to avoid modifying the template.
        amended = JSON.parse(JSON.stringify(template));
        amended = addEmptyProperties(amended);
    }
    return allResources(amended, type, __1.Match.objectLike({
        Properties: props,
    }));
}
exports.allResourcesProperties = allResourcesProperties;
function hasResource(template, type, props) {
    const section = template.Resources ?? {};
    const result = section_1.matchSection(filterType(section, type), props);
    if (result.match) {
        return;
    }
    return section_1.formatSectionMatchFailure(`resources with type ${type}`, result);
}
exports.hasResource = hasResource;
function hasResourceProperties(template, type, props) {
    let amended = template;
    // special case to exclude AbsentMatch because adding an empty Properties object will affect its evaluation.
    if (!__1.Matcher.isMatcher(props) || !(props instanceof absent_1.AbsentMatch)) {
        // amended needs to be a deep copy to avoid modifying the template.
        amended = JSON.parse(JSON.stringify(template));
        amended = addEmptyProperties(amended);
    }
    return hasResource(amended, type, __1.Match.objectLike({
        Properties: props,
    }));
}
exports.hasResourceProperties = hasResourceProperties;
function countResources(template, type) {
    const section = template.Resources ?? {};
    const types = filterType(section, type);
    return Object.entries(types).length;
}
exports.countResources = countResources;
function countResourcesProperties(template, type, props) {
    let amended = template;
    // special case to exclude AbsentMatch because adding an empty Properties object will affect its evaluation.
    if (!__1.Matcher.isMatcher(props) || !(props instanceof absent_1.AbsentMatch)) {
        // amended needs to be a deep copy to avoid modifying the template.
        amended = JSON.parse(JSON.stringify(template));
        amended = addEmptyProperties(amended);
    }
    const section = amended.Resources ?? {};
    const result = section_1.matchSection(filterType(section, type), __1.Match.objectLike({
        Properties: props,
    }));
    if (result.match) {
        return Object.keys(result.matches).length;
    }
    return 0;
}
exports.countResourcesProperties = countResourcesProperties;
function addEmptyProperties(template) {
    let section = template.Resources ?? {};
    Object.keys(section).map((key) => {
        if (!section[key].hasOwnProperty('Properties')) {
            section[key].Properties = {};
        }
    });
    return template;
}
function filterType(section, type) {
    return Object.entries(section ?? {})
        .filter(([_, v]) => v.Type === type)
        .reduce((agg, [k, v]) => { return { ...agg, [k]: v }; }, {});
}
//# sourceMappingURL=data:application/json;base64,