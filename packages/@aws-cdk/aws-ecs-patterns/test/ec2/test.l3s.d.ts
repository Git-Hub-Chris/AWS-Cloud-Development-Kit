import { Test } from 'nodeunit';
declare const _default: {
    'test ECS loadbalanced construct'(test: Test): void;
    'set vpc instead of cluster'(test: Test): void;
    'setting vpc and cluster throws error'(test: Test): void;
    'test ECS loadbalanced construct with memoryReservationMiB'(test: Test): void;
    'creates AWS Cloud Map service for Private DNS namespace with application load balanced ec2 service'(test: Test): void;
    'creates AWS Cloud Map service for Private DNS namespace with network load balanced fargate service'(test: Test): void;
    'test Fargate loadbalanced construct'(test: Test): void;
    'test Fargate loadbalanced construct opting out of log driver creation'(test: Test): void;
    'test Fargate loadbalanced construct with TLS'(test: Test): void;
    'test Fargateloadbalanced construct with TLS and default certificate'(test: Test): void;
    'errors when setting domainName but not domainZone'(test: Test): void;
    'errors when setting both HTTP protocol and certificate'(test: Test): void;
    'errors when setting HTTPS protocol but not domain name'(test: Test): void;
    'test Fargate loadbalanced construct with optional log driver input'(test: Test): void;
    'test Fargate loadbalanced construct with logging enabled'(test: Test): void;
    'test Fargate loadbalanced construct with both image and taskDefinition provided'(test: Test): void;
    'test Fargate application loadbalanced construct with taskDefinition provided'(test: Test): void;
    'ALB - throws if desiredTaskCount is 0'(test: Test): void;
    'NLB - throws if desiredTaskCount is 0'(test: Test): void;
    'ALBFargate - having *HealthyPercent properties'(test: Test): void;
    'NLBFargate - having *HealthyPercent properties'(test: Test): void;
    'ALB - having *HealthyPercent properties'(test: Test): void;
    'NLB - having *HealthyPercent properties'(test: Test): void;
    'NetworkLoadbalancedEC2Service accepts previously created load balancer'(test: Test): void;
    'NetworkLoadBalancedEC2Service accepts imported load balancer'(test: Test): void;
    'ApplicationLoadBalancedEC2Service accepts previously created load balancer'(test: Test): void;
    'ApplicationLoadBalancedEC2Service accepts imported load balancer'(test: Test): void;
};
export = _default;
