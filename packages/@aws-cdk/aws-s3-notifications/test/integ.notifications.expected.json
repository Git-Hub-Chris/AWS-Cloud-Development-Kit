{
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "BucketNotifications8F2E257D": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "Bucket83908E77"
        },
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:Put"
              ],
              "TopicArn": {
                "Ref": "TopicBFC7AF6E"
              }
            },
            {
              "Events": [
                "s3:ObjectRemoved:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "prefix",
                      "Value": "home/myusername/"
                    }
                  ]
                }
              },
              "TopicArn": {
                "Ref": "Topic3DEAE47A7"
              }
            }
          ]
        }
      },
      "DependsOn": [
        "TopicPolicyA1747468",
        "TopicBFC7AF6E",
        "Topic3Policy49BDDFBD",
        "Topic3DEAE47A7"
      ]
    },
    "TopicBFC7AF6E": {
      "Type": "AWS::SNS::Topic"
    },
    "TopicPolicyA1747468": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "Bucket83908E77",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Resource": {
                "Ref": "TopicBFC7AF6E"
              },
              "Sid": "0"
            }
          ],
          "Version": "2012-10-17"
        },
        "Topics": [
          {
            "Ref": "TopicBFC7AF6E"
          }
        ]
      }
    },
    "Topic3DEAE47A7": {
      "Type": "AWS::SNS::Topic"
    },
    "Topic3Policy49BDDFBD": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "Bucket83908E77",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Resource": {
                "Ref": "Topic3DEAE47A7"
              },
              "Sid": "0"
            },
            {
              "Action": "sns:Publish",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "Bucket25524B414",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Resource": {
                "Ref": "Topic3DEAE47A7"
              },
              "Sid": "1"
            }
          ],
          "Version": "2012-10-17"
        },
        "Topics": [
          {
            "Ref": "Topic3DEAE47A7"
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutBucketNotification",
                "s3:GetBucketNotification"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport urllib.request\nfrom typing import List\n\ns3 = boto3.client(\"s3\")\ncf = boto3.client(\"cloudformation\")\n\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        if is_rollback_in_progress(event):\n            return\n        s3.put_bucket_notification_configuration(\n            Bucket=bucket,\n            NotificationConfiguration=get_config(\n                current_config=s3.get_bucket_notification_configuration(Bucket=bucket),\n                new_config=props[\"NotificationConfiguration\"],\n                old_config=event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {}),\n                request_type=event[\"RequestType\"],\n            ),\n        )\n    except Exception as e:\n        print(\"Failed to put bucket notification configuration:\", e)\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef is_rollback_in_progress(event: dict) -> bool:\n    if event[\"RequestType\"] != \"Delete\":\n        return False\n    result: List = cf.describe_stacks(StackName=event[\"StackId\"]).get(\"Stacks\", [])\n    return len(result) == 1 and result[0][\"StackStatus\"] == \"ROLLBACK_IN_PROGRESS\"\n\n\ndef get_config(current_config: dict, new_config: dict, old_config: dict, request_type: str) -> dict:\n    config: dict = {}\n    types = (\n        (\"TopicConfigurations\", \"TopicArn\"),\n        (\"QueueConfigurations\", \"QueueArn\"),\n        (\"LambdaFunctionConfigurations\", \"LambdaFunctionArn\"),\n    )\n    for config_type, target in types:\n        configs = current_config.get(config_type, [])\n        in_configs = new_config.get(config_type, [])\n        if request_type == \"Create\":\n            configs.extend(in_configs)\n            config[config_type] = configs\n        elif request_type == \"Update\":\n            configs = find_difference(configs, old_config.get(config_type, []), target)\n            configs.extend(in_configs)\n            config[config_type] = configs\n        elif request_type == \"Delete\":\n            config[config_type] = find_difference(configs, in_configs, target)\n    return config\n\n\ndef find_difference(destination: List, source: List, target: str) -> List:\n    return [\n        item\n        for item in destination\n        if not any(\n            item.get(\"Events\") == current_item.get(\"Events\") and item.get(target) == current_item.get(target)\n            for current_item in source\n        )\n    ]\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ]
    },
    "Bucket25524B414": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "Bucket2NotificationsD9BA2A77": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "Bucket25524B414"
        },
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectRemoved:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "prefix",
                      "Value": "foo"
                    },
                    {
                      "Name": "suffix",
                      "Value": "foo/bar"
                    }
                  ]
                }
              },
              "TopicArn": {
                "Ref": "Topic3DEAE47A7"
              }
            }
          ]
        }
      },
      "DependsOn": [
        "Topic3Policy49BDDFBD",
        "Topic3DEAE47A7"
      ]
    }
  }
}