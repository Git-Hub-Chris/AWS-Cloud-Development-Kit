"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coercer = exports.coerceApiParameters = void 0;
const parameter_types_1 = require("./parameter-types");
/**
 * Given a minimal AWS SDKv3 call definition (service, action, parameters),
 * coerces nested parameter values into a Uint8Array if that's what the SDKv3 expects.
 */
function coerceApiParameters(v3service, action, parameters = {}) {
    const typeMachine = (0, parameter_types_1.typeCoercionStateMachine)();
    return new Coercer(typeMachine).coerceApiParameters(v3service, action, parameters);
}
exports.coerceApiParameters = coerceApiParameters;
/**
 * Make this a class in order to have multiple entry points for testing that can all share convenience functions
 */
class Coercer {
    constructor(typeMachine) {
        this.typeMachine = typeMachine;
    }
    coerceApiParameters(v3service, action, parameters = {}) {
        // Get the initial state corresponding to the current service+action, then recurse through the parameters
        const actionState = this.progress(action.toLowerCase(), this.progress(v3service.toLowerCase(), 0));
        return this.recurse(parameters, actionState);
    }
    testCoerce(value) {
        return this.recurse(value, 0);
    }
    recurse(value, state) {
        switch (state) {
            case undefined: return value;
            case 'b': return coerceValueToUint8Array(value);
            case 'n': return coerceValueToNumber(value);
            case 'd': return coerceValueToDate(value);
        }
        if (Array.isArray(value)) {
            const elState = this.progress('*', state);
            return elState !== undefined
                ? value.map((e) => this.recurse(e, elState))
                : value;
        }
        if (value && typeof value === 'object') {
            // Mutate the object in-place for efficiency
            const mapState = this.progress('*', state);
            for (const key of Object.keys(value)) {
                const fieldState = this.progress(key, state) ?? mapState;
                if (fieldState !== undefined) {
                    value[key] = this.recurse(value[key], fieldState);
                }
            }
            return value;
        }
        return value;
    }
    /**
     * From a given state, return the state we would end up in if we followed this field
     */
    progress(field, s) {
        if (s === undefined || typeof s !== 'number') {
            return undefined;
        }
        return this.typeMachine[s][field];
    }
}
exports.Coercer = Coercer;
function coerceValueToUint8Array(x) {
    if (x instanceof Uint8Array) {
        return x;
    }
    if (typeof x === 'string' || typeof x === 'number') {
        return new TextEncoder().encode(x.toString());
    }
    return x;
}
function coerceValueToNumber(x) {
    if (typeof x === 'number') {
        return x;
    }
    if (typeof x === 'string') {
        const n = Number(x);
        return isNaN(n) ? x : n;
    }
    return x;
}
function coerceValueToDate(x) {
    if (typeof x === 'string' || typeof x === 'number') {
        const date = new Date(x);
        // if x is not a valid date
        if (isNaN(date.getTime())) {
            return x;
        }
        return date;
    }
    return x;
}
//# sourceMappingURL=data:application/json;base64,