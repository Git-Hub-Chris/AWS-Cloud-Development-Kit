"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
test('can map service name to SDK v3 client name', () => {
    expect(new lib_1.ApiCall('S3', 'Bla').v3PackageName).toBe('@aws-sdk/client-s3');
});
test.each([
    'api-gateway',
    '@aws-sdk/client-api-gateway',
    'APIGateway',
    'apigateway',
])('service %p is recognized', (service) => {
    expect(new lib_1.ApiCall(service, 'Bla').v3PackageName).toEqual('@aws-sdk/client-api-gateway');
});
test.each([
    'GetRestApi',
    'getRestApi',
    'GetRestApiCommand',
])('action %p is recognized', (action) => {
    expect(new lib_1.ApiCall('api-gateway', action).action).toEqual('GetRestApi');
});
test.each([
    'ExecuteCommand',
    'executeCommand',
    'ExecuteCommandCommand',
])('ECS action %p is recognized', (action) => {
    expect(new lib_1.ApiCall('ecs', action).action).toEqual('ExecuteCommand');
});
describe('helpers for SDKv3', () => {
    test('can load a SDK package by service name', () => {
        const sdk = new lib_1.ApiCall('S3', 'Bla');
        expect(sdk.v3PackageName).toBe('@aws-sdk/client-s3');
        sdk.initializePackage();
    });
    test('can load a SDK package by package name', () => {
        const sdk = new lib_1.ApiCall('@aws-sdk/client-s3', 'Bla');
        expect(sdk.v3PackageName).toBe('@aws-sdk/client-s3');
        sdk.initializePackage();
    });
    test('will throw when attempting to load unknown SDK package', () => {
        expect(() => {
            loadV3ClientPackage('@aws-sdk/client-foobar');
        }).toThrow("Service foobar client package with name '@aws-sdk/client-foobar' does not exist.");
    });
    test('will throw when attempting to load unknown SDK package using V2 style name', () => {
        expect(() => {
            loadV3ClientPackage('FooBar');
        }).toThrow("Service foobar client package with name '@aws-sdk/client-foobar' does not exist.");
    });
    describe('with a SDK package loaded', () => {
        test('can get client', () => {
            const client = getV3Client('s3');
            expect(client.config.serviceId).toBe('S3');
        });
        test('can get client with config', async () => {
            const client = getV3Client('s3', { region: 'eu-west-1' });
            const region = await client.config.region();
            expect(region).toBe('eu-west-1');
        });
        test('can get command', () => {
            const apiCall = new lib_1.ApiCall('s3', 'ListBuckets');
            const command = apiCall.findCommandClass();
            expect(command).toBeDefined();
        });
        test('will throw when attempting to get unknown command', () => {
            expect(() => {
                new lib_1.ApiCall('s3', 'FooBar').findCommandClass();
            }).toThrow('Unable to find command named: FooBarCommand');
        });
    });
});
test('flatten', () => {
    expect((0, lib_1.flatten)({
        foo: 'foo',
        bar: {
            foo: 'foo',
            bar: 'bar',
        },
        baz: [
            { foo: 'foo' },
            { bar: 'bar' },
        ],
    })).toEqual({
        'foo': 'foo',
        'bar.foo': 'foo',
        'bar.bar': 'bar',
        'baz.0.foo': 'foo',
        'baz.1.bar': 'bar',
    });
});
test.each([
    { transformToString: () => 'foo' },
    Buffer.from('foo'),
    new TextEncoder().encode('foo'),
])('coerce %p', async (fooValue) => {
    expect(await (0, lib_1.coerceSdkv3Response)({
        foo: fooValue,
    })).toEqual({ foo: 'foo' });
});
function loadV3ClientPackage(service) {
    const apiCall = new lib_1.ApiCall(service, 'Bla');
    apiCall.initializePackage();
    return apiCall.v3Package;
}
function getV3Client(service, options = {}) {
    const apiCall = new lib_1.ApiCall(service, 'Bla');
    apiCall.initializePackage();
    apiCall.initializeClient(options);
    return apiCall.client;
}
//# sourceMappingURL=data:application/json;base64,