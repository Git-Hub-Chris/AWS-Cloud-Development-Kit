"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("@aws-cdk/assertions");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
describe('Dashboard', () => {
    test('widgets in different adds are laid out underneath each other', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: 'first',
            background: lib_1.TextWidgetBackground.SOLID,
        }));
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: 'second',
            background: lib_1.TextWidgetBackground.TRANSPARENT,
        }));
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: 'third',
        }));
        // THEN
        const resources = assertions_1.Template.fromStack(stack).findResources('AWS::CloudWatch::Dashboard');
        expect(Object.keys(resources).length).toEqual(1);
        const key = Object.keys(resources)[0];
        hasWidgets(resources[key].Properties, [
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first', background: lib_1.TextWidgetBackground.SOLID } },
            { type: 'text', width: 1, height: 4, x: 0, y: 2, properties: { markdown: 'second', background: lib_1.TextWidgetBackground.TRANSPARENT } },
            { type: 'text', width: 4, height: 1, x: 0, y: 6, properties: { markdown: 'third' } },
        ]);
    });
    test('widgets in same add are laid out next to each other', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: 'first',
        }), new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: 'second',
        }), new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: 'third',
        }));
        // THEN
        const resources = assertions_1.Template.fromStack(stack).findResources('AWS::CloudWatch::Dashboard');
        expect(Object.keys(resources).length).toEqual(1);
        const key = Object.keys(resources)[0];
        hasWidgets(resources[key].Properties, [
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first' } },
            { type: 'text', width: 1, height: 4, x: 10, y: 0, properties: { markdown: 'second' } },
            { type: 'text', width: 4, height: 1, x: 11, y: 0, properties: { markdown: 'third' } },
        ]);
    });
    test('tokens in widgets are retained', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.GraphWidget({ width: 1, height: 1 }));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Dashboard', {
            DashboardBody: {
                'Fn::Join': ['', [
                        '{"widgets":[{"type":"metric","width":1,"height":1,"x":0,"y":0,"properties":{"view":"timeSeries","region":"',
                        { Ref: 'AWS::Region' },
                        '","yAxis":{}}}]}',
                    ]],
            },
        });
    });
    test('dashboard body includes non-widget fields', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash', {
            start: '-9H',
            end: '2018-12-17T06:00:00.000Z',
            periodOverride: lib_1.PeriodOverride.INHERIT,
        });
        // WHEN
        dashboard.addWidgets(new lib_1.GraphWidget({ width: 1, height: 1 }));
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Dashboard', {
            DashboardBody: {
                'Fn::Join': ['', [
                        '{"start":"-9H","end":"2018-12-17T06:00:00.000Z","periodOverride":"inherit",\
"widgets":[{"type":"metric","width":1,"height":1,"x":0,"y":0,"properties":{"view":"timeSeries","region":"',
                        { Ref: 'AWS::Region' },
                        '","yAxis":{}}}]}',
                    ]],
            },
        });
    });
    test('DashboardName is set when provided', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard', {
            dashboardName: 'MyCustomDashboardName',
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Dashboard', {
            DashboardName: 'MyCustomDashboardName',
        });
    });
    test('DashboardName is not generated if not provided', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard');
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::CloudWatch::Dashboard', {});
    });
    test('throws if DashboardName is not valid', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const toThrow = () => {
            new lib_1.Dashboard(stack, 'MyDashboard', {
                dashboardName: 'My Invalid Dashboard Name',
            });
        };
        // THEN
        expect(() => toThrow()).toThrow(/field dashboardName contains invalid characters/);
    });
    test('dashboardArn should not include a region', () => {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack', {
            env: {
                region: 'invalid-region',
            },
        });
        // WHEN
        const dashboard = new lib_1.Dashboard(stack, 'MyStack');
        // THEN
        expect(dashboard.dashboardArn).not.toContain('invalid-region');
    });
    test('metric warnings are added to dashboard', () => {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        const m = new lib_1.MathExpression({ expression: 'oops' });
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard', {
            widgets: [
                [new lib_1.GraphWidget({ left: [m] }), new lib_1.TextWidget({ markdown: 'asdf' })],
            ],
        });
        // THEN
        const template = assertions_1.Annotations.fromStack(stack);
        template.hasWarning('/MyStack/MyDashboard', assertions_1.Match.stringLikeRegexp("Math expression 'oops' references unknown identifiers"));
    });
});
/**
 * Returns a property predicate that checks that the given Dashboard has the indicated widgets
 */
function hasWidgets(props, widgets) {
    let actualWidgets = [];
    try {
        actualWidgets = JSON.parse(props.DashboardBody).widgets;
    }
    catch (e) {
        // eslint-disable-next-line no-console
        console.error('Error parsing', props);
        throw e;
    }
    expect(actualWidgets).toEqual(expect.arrayContaining(widgets));
}
//# sourceMappingURL=data:application/json;base64,