import { IResource, Resource, Names, Lazy } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CfnAnomalyMonitor } from './ce.generated';

/**
 * The dimensions to evaluate.
 */
export enum MonitorDimension {
  /**
   * Evaluate based on service usage.
   */
  SERVICE = 'SERVICE'
}

/**
 * The possible type values.
 */
export enum MonitorType {
  /**
   * A custom monitor based on a provided specification. TODO.
   */
  CUSTOM = 'CUSTOM',

  /**
   * Evaluate based on pre-defined dimensions.
   */
  DIMENSIONAL = 'DIMENSIONAL'
}


/**
 * Properties for a cost anomaly monitor.
 */
export interface AnomalyMonitorProps {
  /**
   * A name for the monitor.
   *
   * Up to 50 non-whitespace characters.
   * TODO: CFN says 1024, docs say 50.
   *
   * @default - autogenerated name
   */
  readonly anomalyMonitorName?: string;

  /**
   * The dimension to evaluate.
   *
   * @default MonitorDimension.SERVICE if type is MonitorType.DIMENSIONAL
   */
  readonly dimension?: MonitorDimension

  /**
   * A monitor specification.
   *
   * @default - undefined
   */
  readonly specification?: string

  /**
   * A monitor can be either CUSTOM or DIMENSIONAL.
   *
   * @default MonitorType.DIMENSIONAL, or MonitorType.CUSTOM if a specification is provided.
   */
  readonly type?: MonitorType
}

/**
 * Properties of an anomaly monitor.
 */
export interface IAnomalyMonitor extends IResource {
  /**
   * The ARN of this anomaly monitor.
   *
   * @attribute
   */
  readonly anomalyMonitorMonitorArn: string;
}

/**
 * Anomaly monitor.
 *
 * Defines a cost explorer anomaly monitor that continuously inspects your account's cost data for anomalies.
 */
export class AnomalyMonitor extends Resource implements IAnomalyMonitor {
  /**
   * Fetches an existing anomaly monitor by its amazon resource name.
   *
   * @param scope
   * @param id
   * @param anomalyMonitorMonitorArn
   */
  public static fromAnomalyMonitorMonitorArn(scope: Construct, id: string, anomalyMonitorMonitorArn: string): IAnomalyMonitor {

    class Import extends Resource implements IAnomalyMonitor {
      public readonly anomalyMonitorMonitorArn = anomalyMonitorMonitorArn;
    }

    return new Import(scope, id);
  }

  /**
   * The ARN of this anomaly monitor.
   *
   * @attribute
   */
  readonly anomalyMonitorMonitorArn: string;

  /**
   * The name of this anomaly monitor.
   *
   * @attribute
   */
  public readonly anomalyMonitorMonitorName?: string;

  /**
   * The date when the monitor was created.
   *
   * @attribute
   */
  public readonly anomalyMonitorCreationDate?: string;

  /**
   * The value for evaluated dimensions.
   *
   * @attribute
   */
  public readonly anomalyMonitorDimensionalValueCount?: string;

  /**
   * The date when the monitor last evaluated for anomalies.
   *
   * @attribute
   */
  public readonly anomalyMonitorLastEvaluatedDate?: string;

  /**
   * The date when the monitor was last updated.
   *
   * @attribute
   */
  public readonly anomalyMonitorLastUpdatedDate?: string;

  constructor(scope: Construct, id: string, props: AnomalyMonitorProps = {}) {
    super(scope, id, {
      physicalName: props.anomalyMonitorName ||
        Lazy.string({ produce: () => Names.nodeUniqueId(this.node) }),
    });

    const monitor = new CfnAnomalyMonitor(this, 'Resource', {
      monitorName: this.physicalName,
      monitorType: props.type || props.specification ? MonitorType.CUSTOM : MonitorType.DIMENSIONAL,
      monitorDimension: props.dimension || props.specification ? undefined : MonitorDimension.SERVICE,
      monitorSpecification: props.specification,
    });

    this.anomalyMonitorMonitorArn = this.getResourceArnAttribute(monitor.ref, {
      service: 'ce',
      resource: 'anomalymonitor',
      resourceName: this.physicalName,
    });
    this.anomalyMonitorMonitorName = this.getResourceNameAttribute(monitor.ref);
  }
}
