"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const batch = require("../lib");
const lib_1 = require("../lib");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'stack');
const vpc = new aws_ec2_1.Vpc(stack, 'vpc', { restrictDefaultSecurityGroup: false });
const fairsharePolicy = new batch.FairshareSchedulingPolicy(stack, 'fairshare', {
    computeReservation: 75,
    schedulingPolicyName: 'joBBQFairsharePolicy',
    shareDecay: aws_cdk_lib_1.Duration.hours(1),
    shares: [{
            shareIdentifier: 'shareA',
            weightFactor: 0.5,
        }],
});
const queue = new batch.JobQueue(stack, 'joBBQ', {
    computeEnvironments: [{
            computeEnvironment: new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'managedEc2CE', {
                vpc,
            }),
            order: 1,
        }],
    priority: 10,
    schedulingPolicy: fairsharePolicy,
});
fairsharePolicy.addShare({
    shareIdentifier: 'shareB',
    weightFactor: 7,
});
queue.addComputeEnvironment(new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'newManagedEc2CE', {
    vpc,
}), 2);
new integ.IntegTest(app, 'BatchEcsJobDefinitionTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuam9iLXF1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuam9iLXF1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTBDO0FBQzFDLDZDQUFtRDtBQUNuRCxvREFBb0Q7QUFDcEQsZ0NBQWdDO0FBQ2hDLGdDQUF5RDtBQUV6RCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLG1CQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRTNFLE1BQU0sZUFBZSxHQUFHLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDOUUsa0JBQWtCLEVBQUUsRUFBRTtJQUN0QixvQkFBb0IsRUFBRSxzQkFBc0I7SUFDNUMsVUFBVSxFQUFFLHNCQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QixNQUFNLEVBQUUsQ0FBQztZQUNQLGVBQWUsRUFBRSxRQUFRO1lBQ3pCLFlBQVksRUFBRSxHQUFHO1NBQ2xCLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUMvQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ3BCLGtCQUFrQixFQUFFLElBQUkscUNBQStCLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRTtnQkFDN0UsR0FBRzthQUNKLENBQUM7WUFDRixLQUFLLEVBQUUsQ0FBQztTQUNULENBQUM7SUFDRixRQUFRLEVBQUUsRUFBRTtJQUNaLGdCQUFnQixFQUFFLGVBQWU7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUN2QixlQUFlLEVBQUUsUUFBUTtJQUN6QixZQUFZLEVBQUUsQ0FBQztDQUNoQixDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMscUJBQXFCLENBQ3pCLElBQUkscUNBQStCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO0lBQzVELEdBQUc7Q0FDSixDQUFDLEVBQ0YsQ0FBQyxDQUNGLENBQUM7QUFFRixJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLDJCQUEyQixFQUFFO0lBQ3BELFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWcGMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCB7IEFwcCwgU3RhY2ssIER1cmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgYmF0Y2ggZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IE1hbmFnZWRFYzJFY3NDb21wdXRlRW52aXJvbm1lbnQgfSBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdzdGFjaycpO1xuY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ3ZwYycsIHsgcmVzdHJpY3REZWZhdWx0U2VjdXJpdHlHcm91cDogZmFsc2UgfSk7XG5cbmNvbnN0IGZhaXJzaGFyZVBvbGljeSA9IG5ldyBiYXRjaC5GYWlyc2hhcmVTY2hlZHVsaW5nUG9saWN5KHN0YWNrLCAnZmFpcnNoYXJlJywge1xuICBjb21wdXRlUmVzZXJ2YXRpb246IDc1LFxuICBzY2hlZHVsaW5nUG9saWN5TmFtZTogJ2pvQkJRRmFpcnNoYXJlUG9saWN5JyxcbiAgc2hhcmVEZWNheTogRHVyYXRpb24uaG91cnMoMSksXG4gIHNoYXJlczogW3tcbiAgICBzaGFyZUlkZW50aWZpZXI6ICdzaGFyZUEnLFxuICAgIHdlaWdodEZhY3RvcjogMC41LFxuICB9XSxcbn0pO1xuXG5jb25zdCBxdWV1ZSA9IG5ldyBiYXRjaC5Kb2JRdWV1ZShzdGFjaywgJ2pvQkJRJywge1xuICBjb21wdXRlRW52aXJvbm1lbnRzOiBbe1xuICAgIGNvbXB1dGVFbnZpcm9ubWVudDogbmV3IE1hbmFnZWRFYzJFY3NDb21wdXRlRW52aXJvbm1lbnQoc3RhY2ssICdtYW5hZ2VkRWMyQ0UnLCB7XG4gICAgICB2cGMsXG4gICAgfSksXG4gICAgb3JkZXI6IDEsXG4gIH1dLFxuICBwcmlvcml0eTogMTAsXG4gIHNjaGVkdWxpbmdQb2xpY3k6IGZhaXJzaGFyZVBvbGljeSxcbn0pO1xuXG5mYWlyc2hhcmVQb2xpY3kuYWRkU2hhcmUoe1xuICBzaGFyZUlkZW50aWZpZXI6ICdzaGFyZUInLFxuICB3ZWlnaHRGYWN0b3I6IDcsXG59KTtcblxucXVldWUuYWRkQ29tcHV0ZUVudmlyb25tZW50KFxuICBuZXcgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ25ld01hbmFnZWRFYzJDRScsIHtcbiAgICB2cGMsXG4gIH0pLFxuICAyLFxuKTtcblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdCYXRjaEVjc0pvYkRlZmluaXRpb25UZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=