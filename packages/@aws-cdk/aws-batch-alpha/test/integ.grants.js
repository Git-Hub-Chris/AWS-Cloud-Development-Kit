"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const iam = require("aws-cdk-lib/aws-iam");
const batch = require("../lib");
const lib_1 = require("../lib");
const ecs = require("aws-cdk-lib/aws-ecs");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'stack');
const vpc = new aws_ec2_1.Vpc(stack, 'vpc', { restrictDefaultSecurityGroup: false });
const queue = new batch.JobQueue(stack, 'joBBQ', {
    computeEnvironments: [{
            computeEnvironment: new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'managedEc2CE', {
                vpc,
            }),
            order: 1,
        }],
    priority: 10,
});
const ecsJob = new batch.EcsJobDefinition(stack, 'ECSJob', {
    container: new batch.EcsEc2ContainerDefinition(stack, 'EcsContainer', {
        cpu: 256,
        memory: aws_cdk_lib_1.Size.mebibytes(2048),
        image: ecs.ContainerImage.fromRegistry('foorepo/fooimage'),
    }),
});
const user = new iam.User(stack, 'MyUser');
ecsJob.grantSubmitJob(user, queue);
new integ.IntegTest(app, 'BatchEcsJobDefinitionTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZ3JhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuZ3JhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTBDO0FBQzFDLDZDQUErQztBQUMvQyxvREFBb0Q7QUFDcEQsMkNBQTJDO0FBQzNDLGdDQUFnQztBQUNoQyxnQ0FBeUQ7QUFDekQsMkNBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLDRCQUE0QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFFM0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDL0MsbUJBQW1CLEVBQUUsQ0FBQztZQUNwQixrQkFBa0IsRUFBRSxJQUFJLHFDQUErQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7Z0JBQzdFLEdBQUc7YUFDSixDQUFDO1lBQ0YsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDO0lBQ0YsUUFBUSxFQUFFLEVBQUU7Q0FDYixDQUFDLENBQUM7QUFFSCxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQ3pELFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1FBQ3BFLEdBQUcsRUFBRSxHQUFHO1FBQ1IsTUFBTSxFQUFFLGtCQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUM7S0FDM0QsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFbkMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSwyQkFBMkIsRUFBRTtJQUNwRCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVnBjIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgeyBBcHAsIFN0YWNrLCBTaXplIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgYmF0Y2ggZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IE1hbmFnZWRFYzJFY3NDb21wdXRlRW52aXJvbm1lbnQgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lY3MnO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdzdGFjaycpO1xuY29uc3QgdnBjID0gbmV3IFZwYyhzdGFjaywgJ3ZwYycsIHsgcmVzdHJpY3REZWZhdWx0U2VjdXJpdHlHcm91cDogZmFsc2UgfSk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IGJhdGNoLkpvYlF1ZXVlKHN0YWNrLCAnam9CQlEnLCB7XG4gIGNvbXB1dGVFbnZpcm9ubWVudHM6IFt7XG4gICAgY29tcHV0ZUVudmlyb25tZW50OiBuZXcgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ21hbmFnZWRFYzJDRScsIHtcbiAgICAgIHZwYyxcbiAgICB9KSxcbiAgICBvcmRlcjogMSxcbiAgfV0sXG4gIHByaW9yaXR5OiAxMCxcbn0pO1xuXG5jb25zdCBlY3NKb2IgPSBuZXcgYmF0Y2guRWNzSm9iRGVmaW5pdGlvbihzdGFjaywgJ0VDU0pvYicsIHtcbiAgY29udGFpbmVyOiBuZXcgYmF0Y2guRWNzRWMyQ29udGFpbmVyRGVmaW5pdGlvbihzdGFjaywgJ0Vjc0NvbnRhaW5lcicsIHtcbiAgICBjcHU6IDI1NixcbiAgICBtZW1vcnk6IFNpemUubWViaWJ5dGVzKDIwNDgpLFxuICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdmb29yZXBvL2Zvb2ltYWdlJyksXG4gIH0pLFxufSk7XG5cbmNvbnN0IHVzZXIgPSBuZXcgaWFtLlVzZXIoc3RhY2ssICdNeVVzZXInKTtcbmVjc0pvYi5ncmFudFN1Ym1pdEpvYih1c2VyLCBxdWV1ZSk7XG5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnQmF0Y2hFY3NKb2JEZWZpbml0aW9uVGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19