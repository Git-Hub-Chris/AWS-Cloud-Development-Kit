"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const events = require("aws-cdk-lib/aws-events");
const targets = require("aws-cdk-lib/aws-events-targets");
const integ = require("@aws-cdk/integ-tests-alpha");
const batch = require("../lib");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'stack');
const jobQueue = new batch.JobQueue(stack, 'MyQueue', {
    computeEnvironments: [
        {
            computeEnvironment: new batch.UnmanagedComputeEnvironment(stack, 'ComputeEnvironment'),
            order: 1,
        },
    ],
});
const jobDefinition = new batch.EcsJobDefinition(stack, 'MyJob', {
    container: new batch.EcsEc2ContainerDefinition(stack, 'container', {
        image: aws_ecs_1.ContainerImage.fromRegistry('test-repo'),
        cpu: 256,
        memory: aws_cdk_lib_1.Size.mebibytes(2048),
    }),
});
const rule = new events.Rule(stack, 'Rule', {
    schedule: events.Schedule.expression('rate(1 minute)'),
});
rule.addTarget(new targets.BatchJob(jobQueue.jobQueueArn, jobQueue, jobDefinition.jobDefinitionArn, jobDefinition));
new integ.IntegTest(app, 'BatchUniqueNameTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYmF0Y2gtdW5pcXVlLW5hbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5iYXRjaC11bmlxdWUtbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFxRDtBQUNyRCw2Q0FBK0M7QUFDL0MsaURBQWlEO0FBQ2pELDBEQUEwRDtBQUMxRCxvREFBb0Q7QUFDcEQsZ0NBQWdDO0FBRWhDLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDcEQsbUJBQW1CLEVBQUU7UUFDbkI7WUFDRSxrQkFBa0IsRUFBRSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLENBQUM7WUFDdEYsS0FBSyxFQUFFLENBQUM7U0FDVDtLQUNGO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUMvRCxTQUFTLEVBQUUsSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtRQUNqRSxLQUFLLEVBQUUsd0JBQWMsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1FBQy9DLEdBQUcsRUFBRSxHQUFHO1FBQ1IsTUFBTSxFQUFFLGtCQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztLQUM3QixDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7SUFDMUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO0NBQ3ZELENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUNqQyxRQUFRLENBQUMsV0FBVyxFQUNwQixRQUFRLEVBQ1IsYUFBYSxDQUFDLGdCQUFnQixFQUM5QixhQUFhLENBQ2QsQ0FBQyxDQUFDO0FBRUgsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRTtJQUM5QyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGFpbmVySW1hZ2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWNzJztcbmltcG9ydCB7IEFwcCwgU2l6ZSwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cyc7XG5pbXBvcnQgKiBhcyB0YXJnZXRzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1ldmVudHMtdGFyZ2V0cyc7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cy1hbHBoYSc7XG5pbXBvcnQgKiBhcyBiYXRjaCBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdzdGFjaycpO1xuY29uc3Qgam9iUXVldWUgPSBuZXcgYmF0Y2guSm9iUXVldWUoc3RhY2ssICdNeVF1ZXVlJywge1xuICBjb21wdXRlRW52aXJvbm1lbnRzOiBbXG4gICAge1xuICAgICAgY29tcHV0ZUVudmlyb25tZW50OiBuZXcgYmF0Y2guVW5tYW5hZ2VkQ29tcHV0ZUVudmlyb25tZW50KHN0YWNrLCAnQ29tcHV0ZUVudmlyb25tZW50JyksXG4gICAgICBvcmRlcjogMSxcbiAgICB9LFxuICBdLFxufSk7XG5jb25zdCBqb2JEZWZpbml0aW9uID0gbmV3IGJhdGNoLkVjc0pvYkRlZmluaXRpb24oc3RhY2ssICdNeUpvYicsIHtcbiAgY29udGFpbmVyOiBuZXcgYmF0Y2guRWNzRWMyQ29udGFpbmVyRGVmaW5pdGlvbihzdGFjaywgJ2NvbnRhaW5lcicsIHtcbiAgICBpbWFnZTogQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCd0ZXN0LXJlcG8nKSxcbiAgICBjcHU6IDI1NixcbiAgICBtZW1vcnk6IFNpemUubWViaWJ5dGVzKDIwNDgpLFxuICB9KSxcbn0pO1xuXG5jb25zdCBydWxlID0gbmV3IGV2ZW50cy5SdWxlKHN0YWNrLCAnUnVsZScsIHtcbiAgc2NoZWR1bGU6IGV2ZW50cy5TY2hlZHVsZS5leHByZXNzaW9uKCdyYXRlKDEgbWludXRlKScpLFxufSk7XG5cbnJ1bGUuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkJhdGNoSm9iKFxuICBqb2JRdWV1ZS5qb2JRdWV1ZUFybixcbiAgam9iUXVldWUsXG4gIGpvYkRlZmluaXRpb24uam9iRGVmaW5pdGlvbkFybixcbiAgam9iRGVmaW5pdGlvbixcbikpO1xuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ0JhdGNoVW5pcXVlTmFtZVRlc3QnLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==