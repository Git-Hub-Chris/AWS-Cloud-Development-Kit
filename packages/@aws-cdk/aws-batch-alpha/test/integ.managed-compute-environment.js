"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const lib_1 = require("../lib");
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'batch-stack');
const vpc = new ec2.Vpc(stack, 'vpc', { restrictDefaultSecurityGroup: false });
new lib_1.FargateComputeEnvironment(stack, 'minimalPropsFargate', {
    vpc,
    maxvCpus: 512,
});
new lib_1.FargateComputeEnvironment(stack, 'maximalPropsFargate', {
    vpc,
    maxvCpus: 512,
    computeEnvironmentName: 'maxPropsFargateCE',
    replaceComputeEnvironment: true,
    spot: true,
    terminateOnUpdate: true,
    updateTimeout: aws_cdk_lib_1.Duration.minutes(30),
    updateToLatestImageVersion: false,
});
new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'minimalPropsEc2', {
    vpc,
    images: [{
            image: new ec2.AmazonLinuxImage(),
        }],
});
new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'LaunchTemplate', {
    vpc,
    images: [{
            image: new ec2.AmazonLinuxImage(),
        }],
    allocationStrategy: lib_1.AllocationStrategy.BEST_FIT,
    minvCpus: 256,
    maxvCpus: 512,
    replaceComputeEnvironment: true,
    terminateOnUpdate: false,
    placementGroup: new ec2.PlacementGroup(stack, 'placementGroup'),
    updateTimeout: aws_cdk_lib_1.Duration.hours(1),
    launchTemplate: new aws_ec2_1.LaunchTemplate(stack, 'launchTemplate'),
});
new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'SpotEc2', {
    vpc,
    images: [{
            image: new ec2.AmazonLinuxImage(),
        }],
    spot: true,
    spotBidPercentage: 95,
    spotFleetRole: new aws_iam_1.Role(stack, 'SpotFleetRole', {
        assumedBy: new aws_iam_1.ServicePrincipal('batch.amazonaws.com'),
    }),
});
new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'AllocationStrategySPOT_CAPACITY', {
    vpc,
    images: [{
            image: new ec2.AmazonLinuxImage(),
        }],
    spot: true,
    spotBidPercentage: 95,
    allocationStrategy: lib_1.AllocationStrategy.SPOT_CAPACITY_OPTIMIZED,
});
const taggedEc2Ecs = new lib_1.ManagedEc2EcsComputeEnvironment(stack, 'taggedCE', {
    vpc,
    images: [{
            image: new ec2.AmazonLinuxImage(),
        }],
});
aws_cdk_lib_1.Tags.of(taggedEc2Ecs).add('foo', 'bar');
aws_cdk_lib_1.Tags.of(taggedEc2Ecs).add('super', 'salamander');
new integ.IntegTest(app, 'BatchManagedComputeEnvironmentTest', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubWFuYWdlZC1jb21wdXRlLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubWFuYWdlZC1jb21wdXRlLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQTJDO0FBQzNDLGlEQUFxRDtBQUNyRCxpREFBNkQ7QUFDN0QsNkNBQXlEO0FBQ3pELG9EQUFvRDtBQUNwRCxnQ0FBd0c7QUFFeEcsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLDRCQUE0QixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFFL0UsSUFBSSwrQkFBeUIsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7SUFDMUQsR0FBRztJQUNILFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQyxDQUFDO0FBRUgsSUFBSSwrQkFBeUIsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7SUFDMUQsR0FBRztJQUNILFFBQVEsRUFBRSxHQUFHO0lBQ2Isc0JBQXNCLEVBQUUsbUJBQW1CO0lBQzNDLHlCQUF5QixFQUFFLElBQUk7SUFDL0IsSUFBSSxFQUFFLElBQUk7SUFDVixpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCLGFBQWEsRUFBRSxzQkFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDbkMsMEJBQTBCLEVBQUUsS0FBSztDQUNsQyxDQUFDLENBQUM7QUFFSCxJQUFJLHFDQUErQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtJQUM1RCxHQUFHO0lBQ0gsTUFBTSxFQUFFLENBQUM7WUFDUCxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7U0FDbEMsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILElBQUkscUNBQStCLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO0lBQzNELEdBQUc7SUFDSCxNQUFNLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUNsQyxDQUFDO0lBQ0Ysa0JBQWtCLEVBQUUsd0JBQWtCLENBQUMsUUFBUTtJQUMvQyxRQUFRLEVBQUUsR0FBRztJQUNiLFFBQVEsRUFBRSxHQUFHO0lBQ2IseUJBQXlCLEVBQUUsSUFBSTtJQUMvQixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLGNBQWMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDO0lBQy9ELGFBQWEsRUFBRSxzQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEMsY0FBYyxFQUFFLElBQUksd0JBQWMsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUM7Q0FDNUQsQ0FBQyxDQUFDO0FBRUgsSUFBSSxxQ0FBK0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ3BELEdBQUc7SUFDSCxNQUFNLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUNsQyxDQUFDO0lBQ0YsSUFBSSxFQUFFLElBQUk7SUFDVixpQkFBaUIsRUFBRSxFQUFFO0lBQ3JCLGFBQWEsRUFBRSxJQUFJLGNBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1FBQzlDLFNBQVMsRUFBRSxJQUFJLDBCQUFnQixDQUFDLHFCQUFxQixDQUFDO0tBQ3ZELENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxJQUFJLHFDQUErQixDQUFDLEtBQUssRUFBRSxpQ0FBaUMsRUFBRTtJQUM1RSxHQUFHO0lBQ0gsTUFBTSxFQUFFLENBQUM7WUFDUCxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7U0FDbEMsQ0FBQztJQUNGLElBQUksRUFBRSxJQUFJO0lBQ1YsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQixrQkFBa0IsRUFBRSx3QkFBa0IsQ0FBQyx1QkFBdUI7Q0FDL0QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxxQ0FBK0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO0lBQzFFLEdBQUc7SUFDSCxNQUFNLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUNsQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsa0JBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4QyxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRWpELElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsb0NBQW9DLEVBQUU7SUFDN0QsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCB7IExhdW5jaFRlbXBsYXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgeyBSb2xlLCBTZXJ2aWNlUHJpbmNpcGFsIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBBcHAsIER1cmF0aW9uLCBTdGFjaywgVGFncyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCB7IEFsbG9jYXRpb25TdHJhdGVneSwgRmFyZ2F0ZUNvbXB1dGVFbnZpcm9ubWVudCwgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudCB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2JhdGNoLXN0YWNrJyk7XG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ3ZwYycsIHsgcmVzdHJpY3REZWZhdWx0U2VjdXJpdHlHcm91cDogZmFsc2UgfSk7XG5cbm5ldyBGYXJnYXRlQ29tcHV0ZUVudmlyb25tZW50KHN0YWNrLCAnbWluaW1hbFByb3BzRmFyZ2F0ZScsIHtcbiAgdnBjLFxuICBtYXh2Q3B1czogNTEyLFxufSk7XG5cbm5ldyBGYXJnYXRlQ29tcHV0ZUVudmlyb25tZW50KHN0YWNrLCAnbWF4aW1hbFByb3BzRmFyZ2F0ZScsIHtcbiAgdnBjLFxuICBtYXh2Q3B1czogNTEyLFxuICBjb21wdXRlRW52aXJvbm1lbnROYW1lOiAnbWF4UHJvcHNGYXJnYXRlQ0UnLFxuICByZXBsYWNlQ29tcHV0ZUVudmlyb25tZW50OiB0cnVlLFxuICBzcG90OiB0cnVlLFxuICB0ZXJtaW5hdGVPblVwZGF0ZTogdHJ1ZSxcbiAgdXBkYXRlVGltZW91dDogRHVyYXRpb24ubWludXRlcygzMCksXG4gIHVwZGF0ZVRvTGF0ZXN0SW1hZ2VWZXJzaW9uOiBmYWxzZSxcbn0pO1xuXG5uZXcgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ21pbmltYWxQcm9wc0VjMicsIHtcbiAgdnBjLFxuICBpbWFnZXM6IFt7XG4gICAgaW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpLFxuICB9XSxcbn0pO1xuXG5uZXcgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ0xhdW5jaFRlbXBsYXRlJywge1xuICB2cGMsXG4gIGltYWdlczogW3tcbiAgICBpbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gIH1dLFxuICBhbGxvY2F0aW9uU3RyYXRlZ3k6IEFsbG9jYXRpb25TdHJhdGVneS5CRVNUX0ZJVCxcbiAgbWludkNwdXM6IDI1NixcbiAgbWF4dkNwdXM6IDUxMixcbiAgcmVwbGFjZUNvbXB1dGVFbnZpcm9ubWVudDogdHJ1ZSxcbiAgdGVybWluYXRlT25VcGRhdGU6IGZhbHNlLFxuICBwbGFjZW1lbnRHcm91cDogbmV3IGVjMi5QbGFjZW1lbnRHcm91cChzdGFjaywgJ3BsYWNlbWVudEdyb3VwJyksXG4gIHVwZGF0ZVRpbWVvdXQ6IER1cmF0aW9uLmhvdXJzKDEpLFxuICBsYXVuY2hUZW1wbGF0ZTogbmV3IExhdW5jaFRlbXBsYXRlKHN0YWNrLCAnbGF1bmNoVGVtcGxhdGUnKSxcbn0pO1xuXG5uZXcgTWFuYWdlZEVjMkVjc0NvbXB1dGVFbnZpcm9ubWVudChzdGFjaywgJ1Nwb3RFYzInLCB7XG4gIHZwYyxcbiAgaW1hZ2VzOiBbe1xuICAgIGltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoKSxcbiAgfV0sXG4gIHNwb3Q6IHRydWUsXG4gIHNwb3RCaWRQZXJjZW50YWdlOiA5NSxcbiAgc3BvdEZsZWV0Um9sZTogbmV3IFJvbGUoc3RhY2ssICdTcG90RmxlZXRSb2xlJywge1xuICAgIGFzc3VtZWRCeTogbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2JhdGNoLmFtYXpvbmF3cy5jb20nKSxcbiAgfSksXG59KTtcblxubmV3IE1hbmFnZWRFYzJFY3NDb21wdXRlRW52aXJvbm1lbnQoc3RhY2ssICdBbGxvY2F0aW9uU3RyYXRlZ3lTUE9UX0NBUEFDSVRZJywge1xuICB2cGMsXG4gIGltYWdlczogW3tcbiAgICBpbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gIH1dLFxuICBzcG90OiB0cnVlLFxuICBzcG90QmlkUGVyY2VudGFnZTogOTUsXG4gIGFsbG9jYXRpb25TdHJhdGVneTogQWxsb2NhdGlvblN0cmF0ZWd5LlNQT1RfQ0FQQUNJVFlfT1BUSU1JWkVELFxufSk7XG5cbmNvbnN0IHRhZ2dlZEVjMkVjcyA9IG5ldyBNYW5hZ2VkRWMyRWNzQ29tcHV0ZUVudmlyb25tZW50KHN0YWNrLCAndGFnZ2VkQ0UnLCB7XG4gIHZwYyxcbiAgaW1hZ2VzOiBbe1xuICAgIGltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoKSxcbiAgfV0sXG59KTtcblxuVGFncy5vZih0YWdnZWRFYzJFY3MpLmFkZCgnZm9vJywgJ2JhcicpO1xuVGFncy5vZih0YWdnZWRFYzJFY3MpLmFkZCgnc3VwZXInLCAnc2FsYW1hbmRlcicpO1xuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ0JhdGNoTWFuYWdlZENvbXB1dGVFbnZpcm9ubWVudFRlc3QnLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==