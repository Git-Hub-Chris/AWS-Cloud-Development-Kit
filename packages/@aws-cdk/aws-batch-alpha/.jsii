{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "aws-cdk-lib": "^0.0.0",
    "constructs": "^10.0.0"
  },
  "dependencyClosure": {
    "@aws-cdk/asset-awscli-v1": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.AwsCliV1",
          "packageId": "Amazon.CDK.Asset.AwsCliV1"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-awscli-go",
          "packageName": "awscliv1"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-awscli-v1",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.awscli.v1"
        },
        "js": {
          "npm": "@aws-cdk/asset-awscli-v1"
        },
        "python": {
          "distName": "aws-cdk.asset-awscli-v1",
          "module": "aws_cdk.asset_awscli_v1"
        }
      }
    },
    "@aws-cdk/asset-kubectl-v20": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.KubectlV20",
          "packageId": "Amazon.CDK.Asset.KubectlV20"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-kubectl-go",
          "packageName": "kubectlv20"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-kubectl-v20",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.kubectl.v20"
        },
        "js": {
          "npm": "@aws-cdk/asset-kubectl-v20"
        },
        "python": {
          "distName": "aws-cdk.asset-kubectl-v20",
          "module": "aws_cdk.asset_kubectl_v20"
        }
      }
    },
    "@aws-cdk/asset-node-proxy-agent-v6": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.NodeProxyAgentV6",
          "packageId": "Amazon.CDK.Asset.NodeProxyAgentV6"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-node-proxy-agent-go",
          "packageName": "nodeproxyagentv6"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-node-proxy-agent-v6",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.node.proxy.agent.v6"
        },
        "js": {
          "npm": "@aws-cdk/asset-node-proxy-agent-v6"
        },
        "python": {
          "distName": "aws-cdk.asset-node-proxy-agent-v6",
          "module": "aws_cdk.asset_node_proxy_agent_v6"
        }
      }
    },
    "aws-cdk-lib": {
      "submodules": {
        "aws-cdk-lib.alexa_ask": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Alexa.Ask"
            },
            "java": {
              "package": "software.amazon.awscdk.alexa.ask"
            },
            "python": {
              "module": "aws_cdk.alexa_ask"
            }
          }
        },
        "aws-cdk-lib.assertions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assertions"
            },
            "java": {
              "package": "software.amazon.awscdk.assertions"
            },
            "python": {
              "module": "aws_cdk.assertions"
            }
          }
        },
        "aws-cdk-lib.assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.assets"
            },
            "python": {
              "module": "aws_cdk.assets"
            }
          }
        },
        "aws-cdk-lib.aws_accessanalyzer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AccessAnalyzer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.accessanalyzer"
            },
            "python": {
              "module": "aws_cdk.aws_accessanalyzer"
            }
          }
        },
        "aws-cdk-lib.aws_acmpca": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ACMPCA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.acmpca"
            },
            "python": {
              "module": "aws_cdk.aws_acmpca"
            }
          }
        },
        "aws-cdk-lib.aws_amazonmq": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmazonMQ"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amazonmq"
            },
            "python": {
              "module": "aws_cdk.aws_amazonmq"
            }
          }
        },
        "aws-cdk-lib.aws_amplify": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Amplify"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplify"
            },
            "python": {
              "module": "aws_cdk.aws_amplify"
            }
          }
        },
        "aws-cdk-lib.aws_amplifyuibuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmplifyUIBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplifyuibuilder"
            },
            "python": {
              "module": "aws_cdk.aws_amplifyuibuilder"
            }
          }
        },
        "aws-cdk-lib.aws_apigateway": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APIGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigateway"
            },
            "python": {
              "module": "aws_cdk.aws_apigateway"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Apigatewayv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigatewayv2"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2"
            }
          }
        },
        "aws-cdk-lib.aws_appconfig": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppConfig"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appconfig"
            },
            "python": {
              "module": "aws_cdk.aws_appconfig"
            }
          }
        },
        "aws-cdk-lib.aws_appflow": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppFlow"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appflow"
            },
            "python": {
              "module": "aws_cdk.aws_appflow"
            }
          }
        },
        "aws-cdk-lib.aws_appintegrations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppIntegrations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appintegrations"
            },
            "python": {
              "module": "aws_cdk.aws_appintegrations"
            }
          }
        },
        "aws-cdk-lib.aws_applicationautoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationautoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_applicationautoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_applicationinsights": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationInsights"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationinsights"
            },
            "python": {
              "module": "aws_cdk.aws_applicationinsights"
            }
          }
        },
        "aws-cdk-lib.aws_appmesh": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppMesh"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appmesh"
            },
            "python": {
              "module": "aws_cdk.aws_appmesh"
            }
          }
        },
        "aws-cdk-lib.aws_apprunner": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppRunner"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apprunner"
            },
            "python": {
              "module": "aws_cdk.aws_apprunner"
            }
          }
        },
        "aws-cdk-lib.aws_appstream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppStream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appstream"
            },
            "python": {
              "module": "aws_cdk.aws_appstream"
            }
          }
        },
        "aws-cdk-lib.aws_appsync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appsync"
            },
            "python": {
              "module": "aws_cdk.aws_appsync"
            }
          }
        },
        "aws-cdk-lib.aws_aps": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.aps"
            },
            "python": {
              "module": "aws_cdk.aws_aps"
            }
          }
        },
        "aws-cdk-lib.aws_athena": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Athena"
            },
            "java": {
              "package": "software.amazon.awscdk.services.athena"
            },
            "python": {
              "module": "aws_cdk.aws_athena"
            }
          }
        },
        "aws-cdk-lib.aws_auditmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AuditManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.auditmanager"
            },
            "python": {
              "module": "aws_cdk.aws_auditmanager"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_common": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.Common"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.common"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_common"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_hooktargets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_hooktargets"
            }
          }
        },
        "aws-cdk-lib.aws_autoscalingplans": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScalingPlans"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscalingplans"
            },
            "python": {
              "module": "aws_cdk.aws_autoscalingplans"
            }
          }
        },
        "aws-cdk-lib.aws_backup": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Backup"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backup"
            },
            "python": {
              "module": "aws_cdk.aws_backup"
            }
          }
        },
        "aws-cdk-lib.aws_backupgateway": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.BackupGateway"
            },
            "java": {
              "package": "services.backupgateway"
            },
            "python": {
              "module": "aws_cdk.aws_backupgateway"
            }
          }
        },
        "aws-cdk-lib.aws_batch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Batch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.batch"
            },
            "python": {
              "module": "aws_cdk.aws_batch"
            }
          }
        },
        "aws-cdk-lib.aws_billingconductor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.BillingConductor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.billingconductor"
            },
            "python": {
              "module": "aws_cdk.aws_billingconductor"
            }
          }
        },
        "aws-cdk-lib.aws_budgets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Budgets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.budgets"
            },
            "python": {
              "module": "aws_cdk.aws_budgets"
            }
          }
        },
        "aws-cdk-lib.aws_cassandra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cassandra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cassandra"
            },
            "python": {
              "module": "aws_cdk.aws_cassandra"
            }
          }
        },
        "aws-cdk-lib.aws_ce": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CE"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ce"
            },
            "python": {
              "module": "aws_cdk.aws_ce"
            }
          }
        },
        "aws-cdk-lib.aws_certificatemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CertificateManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.certificatemanager"
            },
            "python": {
              "module": "aws_cdk.aws_certificatemanager"
            }
          }
        },
        "aws-cdk-lib.aws_chatbot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Chatbot"
            },
            "java": {
              "package": "software.amazon.awscdk.services.chatbot"
            },
            "python": {
              "module": "aws_cdk.aws_chatbot"
            }
          }
        },
        "aws-cdk-lib.aws_cleanrooms": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.CleanRooms"
            },
            "java": {
              "package": "services.cleanrooms"
            },
            "python": {
              "module": "aws_cdk.aws_cleanrooms"
            }
          }
        },
        "aws-cdk-lib.aws_cloud9": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cloud9"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloud9"
            },
            "python": {
              "module": "aws_cdk.aws_cloud9"
            }
          }
        },
        "aws-cdk-lib.aws_cloudformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudformation"
            },
            "python": {
              "module": "aws_cdk.aws_cloudformation"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront.experimental": {},
        "aws-cdk-lib.aws_cloudfront_origins": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront.Origins"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront.origins"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront_origins"
            }
          }
        },
        "aws-cdk-lib.aws_cloudtrail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudTrail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudtrail"
            },
            "python": {
              "module": "aws_cdk.aws_cloudtrail"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch.actions"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codeartifact": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeArtifact"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeartifact"
            },
            "python": {
              "module": "aws_cdk.aws_codeartifact"
            }
          }
        },
        "aws-cdk-lib.aws_codebuild": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeBuild"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codebuild"
            },
            "python": {
              "module": "aws_cdk.aws_codebuild"
            }
          }
        },
        "aws-cdk-lib.aws_codecommit": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeCommit"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codecommit"
            },
            "python": {
              "module": "aws_cdk.aws_codecommit"
            }
          }
        },
        "aws-cdk-lib.aws_codedeploy": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeDeploy"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codedeploy"
            },
            "python": {
              "module": "aws_cdk.aws_codedeploy"
            }
          }
        },
        "aws-cdk-lib.aws_codeguruprofiler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruProfiler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeguruprofiler"
            },
            "python": {
              "module": "aws_cdk.aws_codeguruprofiler"
            }
          }
        },
        "aws-cdk-lib.aws_codegurureviewer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruReviewer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codegurureviewer"
            },
            "python": {
              "module": "aws_cdk.aws_codegurureviewer"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline.actions"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codestar": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Codestar"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestar"
            },
            "python": {
              "module": "aws_cdk.aws_codestar"
            }
          }
        },
        "aws-cdk-lib.aws_codestarconnections": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarConnections"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarconnections"
            },
            "python": {
              "module": "aws_cdk.aws_codestarconnections"
            }
          }
        },
        "aws-cdk-lib.aws_codestarnotifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarNotifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarnotifications"
            },
            "python": {
              "module": "aws_cdk.aws_codestarnotifications"
            }
          }
        },
        "aws-cdk-lib.aws_cognito": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cognito"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cognito"
            },
            "python": {
              "module": "aws_cdk.aws_cognito"
            }
          }
        },
        "aws-cdk-lib.aws_comprehend": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Comprehend"
            },
            "java": {
              "package": "software.amazon.awscdk.services.comprehend"
            },
            "python": {
              "module": "aws_cdk.aws_comprehend"
            }
          }
        },
        "aws-cdk-lib.aws_config": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Config"
            },
            "java": {
              "package": "software.amazon.awscdk.services.config"
            },
            "python": {
              "module": "aws_cdk.aws_config"
            }
          }
        },
        "aws-cdk-lib.aws_connect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Connect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connect"
            },
            "python": {
              "module": "aws_cdk.aws_connect"
            }
          }
        },
        "aws-cdk-lib.aws_connectcampaigns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ConnectCampaigns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connectcampaigns"
            },
            "python": {
              "module": "aws_cdk.aws_connectcampaigns"
            }
          }
        },
        "aws-cdk-lib.aws_controltower": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ControlTower"
            },
            "java": {
              "package": "software.amazon.awscdk.services.controltower"
            },
            "python": {
              "module": "aws_cdk.aws_controltower"
            }
          }
        },
        "aws-cdk-lib.aws_cur": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CUR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cur"
            },
            "python": {
              "module": "aws_cdk.aws_cur"
            }
          }
        },
        "aws-cdk-lib.aws_customerprofiles": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CustomerProfiles"
            },
            "java": {
              "package": "software.amazon.awscdk.services.customerprofiles"
            },
            "python": {
              "module": "aws_cdk.aws_customerprofiles"
            }
          }
        },
        "aws-cdk-lib.aws_databrew": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataBrew"
            },
            "java": {
              "package": "software.amazon.awscdk.services.databrew"
            },
            "python": {
              "module": "aws_cdk.aws_databrew"
            }
          }
        },
        "aws-cdk-lib.aws_datapipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataPipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datapipeline"
            },
            "python": {
              "module": "aws_cdk.aws_datapipeline"
            }
          }
        },
        "aws-cdk-lib.aws_datasync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datasync"
            },
            "python": {
              "module": "aws_cdk.aws_datasync"
            }
          }
        },
        "aws-cdk-lib.aws_dax": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DAX"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dax"
            },
            "python": {
              "module": "aws_cdk.aws_dax"
            }
          }
        },
        "aws-cdk-lib.aws_detective": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Detective"
            },
            "java": {
              "package": "software.amazon.awscdk.services.detective"
            },
            "python": {
              "module": "aws_cdk.aws_detective"
            }
          }
        },
        "aws-cdk-lib.aws_devicefarm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DeviceFarm"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devicefarm"
            },
            "python": {
              "module": "aws_cdk.aws_devicefarm"
            }
          }
        },
        "aws-cdk-lib.aws_devopsguru": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DevOpsGuru"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devopsguru"
            },
            "python": {
              "module": "aws_cdk.aws_devopsguru"
            }
          }
        },
        "aws-cdk-lib.aws_directoryservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DirectoryService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.directoryservice"
            },
            "python": {
              "module": "aws_cdk.aws_directoryservice"
            }
          }
        },
        "aws-cdk-lib.aws_dlm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DLM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dlm"
            },
            "python": {
              "module": "aws_cdk.aws_dlm"
            }
          }
        },
        "aws-cdk-lib.aws_dms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dms"
            },
            "python": {
              "module": "aws_cdk.aws_dms"
            }
          }
        },
        "aws-cdk-lib.aws_docdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdb"
            },
            "python": {
              "module": "aws_cdk.aws_docdb"
            }
          }
        },
        "aws-cdk-lib.aws_docdbelastic": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDBElastic"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdbelastic"
            },
            "python": {
              "module": "aws_cdk.aws_docdbelastic"
            }
          }
        },
        "aws-cdk-lib.aws_dynamodb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DynamoDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dynamodb"
            },
            "python": {
              "module": "aws_cdk.aws_dynamodb"
            }
          }
        },
        "aws-cdk-lib.aws_ec2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EC2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ec2"
            },
            "python": {
              "module": "aws_cdk.aws_ec2"
            }
          }
        },
        "aws-cdk-lib.aws_ecr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr"
            },
            "python": {
              "module": "aws_cdk.aws_ecr"
            }
          }
        },
        "aws-cdk-lib.aws_ecr_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ecr.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr.assets"
            },
            "python": {
              "module": "aws_cdk.aws_ecr_assets"
            }
          }
        },
        "aws-cdk-lib.aws_ecs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs"
            },
            "python": {
              "module": "aws_cdk.aws_ecs"
            }
          }
        },
        "aws-cdk-lib.aws_ecs_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_ecs_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_efs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EFS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.efs"
            },
            "python": {
              "module": "aws_cdk.aws_efs"
            }
          }
        },
        "aws-cdk-lib.aws_eks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EKS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eks"
            },
            "python": {
              "module": "aws_cdk.aws_eks"
            }
          }
        },
        "aws-cdk-lib.aws_elasticache": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElastiCache"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticache"
            },
            "python": {
              "module": "aws_cdk.aws_elasticache"
            }
          }
        },
        "aws-cdk-lib.aws_elasticbeanstalk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticBeanstalk"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticbeanstalk"
            },
            "python": {
              "module": "aws_cdk.aws_elasticbeanstalk"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancing": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancing"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancing"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.actions"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_actions"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.targets"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_targets"
            }
          }
        },
        "aws-cdk-lib.aws_elasticsearch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Elasticsearch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticsearch"
            },
            "python": {
              "module": "aws_cdk.aws_elasticsearch"
            }
          }
        },
        "aws-cdk-lib.aws_emr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emr"
            },
            "python": {
              "module": "aws_cdk.aws_emr"
            }
          }
        },
        "aws-cdk-lib.aws_emrcontainers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRContainers"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrcontainers"
            },
            "python": {
              "module": "aws_cdk.aws_emrcontainers"
            }
          }
        },
        "aws-cdk-lib.aws_emrserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrserverless"
            },
            "python": {
              "module": "aws_cdk.aws_emrserverless"
            }
          }
        },
        "aws-cdk-lib.aws_events": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events"
            },
            "python": {
              "module": "aws_cdk.aws_events"
            }
          }
        },
        "aws-cdk-lib.aws_events_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events.targets"
            },
            "python": {
              "module": "aws_cdk.aws_events_targets"
            }
          }
        },
        "aws-cdk-lib.aws_eventschemas": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EventSchemas"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eventschemas"
            },
            "python": {
              "module": "aws_cdk.aws_eventschemas"
            }
          }
        },
        "aws-cdk-lib.aws_evidently": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Evidently"
            },
            "java": {
              "package": "software.amazon.awscdk.services.evidently"
            },
            "python": {
              "module": "aws_cdk.aws_evidently"
            }
          }
        },
        "aws-cdk-lib.aws_finspace": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FinSpace"
            },
            "java": {
              "package": "software.amazon.awscdk.services.finspace"
            },
            "python": {
              "module": "aws_cdk.aws_finspace"
            }
          }
        },
        "aws-cdk-lib.aws_fis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fis"
            },
            "python": {
              "module": "aws_cdk.aws_fis"
            }
          }
        },
        "aws-cdk-lib.aws_fms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fms"
            },
            "python": {
              "module": "aws_cdk.aws_fms"
            }
          }
        },
        "aws-cdk-lib.aws_forecast": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Forecast"
            },
            "java": {
              "package": "software.amazon.awscdk.services.forecast"
            },
            "python": {
              "module": "aws_cdk.aws_forecast"
            }
          }
        },
        "aws-cdk-lib.aws_frauddetector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FraudDetector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.frauddetector"
            },
            "python": {
              "module": "aws_cdk.aws_frauddetector"
            }
          }
        },
        "aws-cdk-lib.aws_fsx": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FSx"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fsx"
            },
            "python": {
              "module": "aws_cdk.aws_fsx"
            }
          }
        },
        "aws-cdk-lib.aws_gamelift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GameLift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.gamelift"
            },
            "python": {
              "module": "aws_cdk.aws_gamelift"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator_endpoints": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator.Endpoints"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator.endpoints"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator_endpoints"
            }
          }
        },
        "aws-cdk-lib.aws_glue": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Glue"
            },
            "java": {
              "package": "software.amazon.awscdk.services.glue"
            },
            "python": {
              "module": "aws_cdk.aws_glue"
            }
          }
        },
        "aws-cdk-lib.aws_grafana": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Grafana"
            },
            "java": {
              "package": "software.amazon.awscdk.services.grafana"
            },
            "python": {
              "module": "aws_cdk.aws_grafana"
            }
          }
        },
        "aws-cdk-lib.aws_greengrass": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Greengrass"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrass"
            },
            "python": {
              "module": "aws_cdk.aws_greengrass"
            }
          }
        },
        "aws-cdk-lib.aws_greengrassv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GreengrassV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrassv2"
            },
            "python": {
              "module": "aws_cdk.aws_greengrassv2"
            }
          }
        },
        "aws-cdk-lib.aws_groundstation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GroundStation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.groundstation"
            },
            "python": {
              "module": "aws_cdk.aws_groundstation"
            }
          }
        },
        "aws-cdk-lib.aws_guardduty": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GuardDuty"
            },
            "java": {
              "package": "software.amazon.awscdk.services.guardduty"
            },
            "python": {
              "module": "aws_cdk.aws_guardduty"
            }
          }
        },
        "aws-cdk-lib.aws_healthlake": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.HealthLake"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthlake"
            },
            "python": {
              "module": "aws_cdk.aws_healthlake"
            }
          }
        },
        "aws-cdk-lib.aws_iam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iam"
            },
            "python": {
              "module": "aws_cdk.aws_iam"
            }
          }
        },
        "aws-cdk-lib.aws_identitystore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IdentityStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.identitystore"
            },
            "python": {
              "module": "aws_cdk.aws_identitystore"
            }
          }
        },
        "aws-cdk-lib.aws_imagebuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ImageBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.imagebuilder"
            },
            "python": {
              "module": "aws_cdk.aws_imagebuilder"
            }
          }
        },
        "aws-cdk-lib.aws_inspector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Inspector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspector"
            },
            "python": {
              "module": "aws_cdk.aws_inspector"
            }
          }
        },
        "aws-cdk-lib.aws_inspectorv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InspectorV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspectorv2"
            },
            "python": {
              "module": "aws_cdk.aws_inspectorv2"
            }
          }
        },
        "aws-cdk-lib.aws_internetmonitor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InternetMonitor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.internetmonitor"
            },
            "python": {
              "module": "aws_cdk.aws_internetmonitor"
            }
          }
        },
        "aws-cdk-lib.aws_iot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot"
            },
            "python": {
              "module": "aws_cdk.aws_iot"
            }
          }
        },
        "aws-cdk-lib.aws_iot1click": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT1Click"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot1click"
            },
            "python": {
              "module": "aws_cdk.aws_iot1click"
            }
          }
        },
        "aws-cdk-lib.aws_iotanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_iotanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_iotcoredeviceadvisor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTCoreDeviceAdvisor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotcoredeviceadvisor"
            },
            "python": {
              "module": "aws_cdk.aws_iotcoredeviceadvisor"
            }
          }
        },
        "aws-cdk-lib.aws_iotevents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTEvents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotevents"
            },
            "python": {
              "module": "aws_cdk.aws_iotevents"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleethub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleethub"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleethub"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleetwise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleetwise"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleetwise"
            }
          }
        },
        "aws-cdk-lib.aws_iotsitewise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTSiteWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotsitewise"
            },
            "python": {
              "module": "aws_cdk.aws_iotsitewise"
            }
          }
        },
        "aws-cdk-lib.aws_iotthingsgraph": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTThingsGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotthingsgraph"
            },
            "python": {
              "module": "aws_cdk.aws_iotthingsgraph"
            }
          }
        },
        "aws-cdk-lib.aws_iottwinmaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTTwinMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iottwinmaker"
            },
            "python": {
              "module": "aws_cdk.aws_iottwinmaker"
            }
          }
        },
        "aws-cdk-lib.aws_iotwireless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTWireless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotwireless"
            },
            "python": {
              "module": "aws_cdk.aws_iotwireless"
            }
          }
        },
        "aws-cdk-lib.aws_ivs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ivs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivs"
            },
            "python": {
              "module": "aws_cdk.aws_ivs"
            }
          }
        },
        "aws-cdk-lib.aws_ivschat": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IVSChat"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivschat"
            },
            "python": {
              "module": "aws_cdk.aws_ivschat"
            }
          }
        },
        "aws-cdk-lib.aws_kafkaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KafkaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kafkaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_kafkaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_kendra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kendra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendra"
            },
            "python": {
              "module": "aws_cdk.aws_kendra"
            }
          }
        },
        "aws-cdk-lib.aws_kendraranking": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KendraRanking"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendraranking"
            },
            "python": {
              "module": "aws_cdk.aws_kendraranking"
            }
          }
        },
        "aws-cdk-lib.aws_kinesis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kinesis"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesis"
            },
            "python": {
              "module": "aws_cdk.aws_kinesis"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalyticsv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalyticsV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalyticsv2"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalyticsv2"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisfirehose": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisFirehose"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisfirehose"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisfirehose"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisvideo": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisVideo"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisvideo"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisvideo"
            }
          }
        },
        "aws-cdk-lib.aws_kms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kms"
            },
            "python": {
              "module": "aws_cdk.aws_kms"
            }
          }
        },
        "aws-cdk-lib.aws_lakeformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LakeFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lakeformation"
            },
            "python": {
              "module": "aws_cdk.aws_lakeformation"
            }
          }
        },
        "aws-cdk-lib.aws_lambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda"
            },
            "python": {
              "module": "aws_cdk.aws_lambda"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_event_sources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.EventSources"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.eventsources"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_event_sources"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_nodejs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Nodejs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.nodejs"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_nodejs"
            }
          }
        },
        "aws-cdk-lib.aws_lex": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lex"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lex"
            },
            "python": {
              "module": "aws_cdk.aws_lex"
            }
          }
        },
        "aws-cdk-lib.aws_licensemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LicenseManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.licensemanager"
            },
            "python": {
              "module": "aws_cdk.aws_licensemanager"
            }
          }
        },
        "aws-cdk-lib.aws_lightsail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lightsail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lightsail"
            },
            "python": {
              "module": "aws_cdk.aws_lightsail"
            }
          }
        },
        "aws-cdk-lib.aws_location": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Location"
            },
            "java": {
              "package": "software.amazon.awscdk.services.location"
            },
            "python": {
              "module": "aws_cdk.aws_location"
            }
          }
        },
        "aws-cdk-lib.aws_logs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs"
            },
            "python": {
              "module": "aws_cdk.aws_logs"
            }
          }
        },
        "aws-cdk-lib.aws_logs_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_logs_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutequipment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutEquipment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutequipment"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutequipment"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutmetrics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutMetrics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutmetrics"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutmetrics"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutvision": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutVision"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutvision"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutvision"
            }
          }
        },
        "aws-cdk-lib.aws_m2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.M2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.m2"
            },
            "python": {
              "module": "aws_cdk.aws_m2"
            }
          }
        },
        "aws-cdk-lib.aws_macie": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Macie"
            },
            "java": {
              "package": "software.amazon.awscdk.services.macie"
            },
            "python": {
              "module": "aws_cdk.aws_macie"
            }
          }
        },
        "aws-cdk-lib.aws_managedblockchain": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ManagedBlockchain"
            },
            "java": {
              "package": "software.amazon.awscdk.services.managedblockchain"
            },
            "python": {
              "module": "aws_cdk.aws_managedblockchain"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconvert": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConvert"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconvert"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconvert"
            }
          }
        },
        "aws-cdk-lib.aws_medialive": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaLive"
            },
            "java": {
              "package": "software.amazon.awscdk.services.medialive"
            },
            "python": {
              "module": "aws_cdk.aws_medialive"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackage": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaPackage"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackage"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackage"
            }
          }
        },
        "aws-cdk-lib.aws_mediastore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediastore"
            },
            "python": {
              "module": "aws_cdk.aws_mediastore"
            }
          }
        },
        "aws-cdk-lib.aws_mediatailor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaTailor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediatailor"
            },
            "python": {
              "module": "aws_cdk.aws_mediatailor"
            }
          }
        },
        "aws-cdk-lib.aws_memorydb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MemoryDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.memorydb"
            },
            "python": {
              "module": "aws_cdk.aws_memorydb"
            }
          }
        },
        "aws-cdk-lib.aws_msk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MSK"
            },
            "java": {
              "package": "software.amazon.awscdk.services.msk"
            },
            "python": {
              "module": "aws_cdk.aws_msk"
            }
          }
        },
        "aws-cdk-lib.aws_mwaa": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MWAA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mwaa"
            },
            "python": {
              "module": "aws_cdk.aws_mwaa"
            }
          }
        },
        "aws-cdk-lib.aws_neptune": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Neptune"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptune"
            },
            "python": {
              "module": "aws_cdk.aws_neptune"
            }
          }
        },
        "aws-cdk-lib.aws_networkfirewall": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkFirewall"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkfirewall"
            },
            "python": {
              "module": "aws_cdk.aws_networkfirewall"
            }
          }
        },
        "aws-cdk-lib.aws_networkmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkmanager"
            },
            "python": {
              "module": "aws_cdk.aws_networkmanager"
            }
          }
        },
        "aws-cdk-lib.aws_nimblestudio": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NimbleStudio"
            },
            "java": {
              "package": "software.amazon.awscdk.services.nimblestudio"
            },
            "python": {
              "module": "aws_cdk.aws_nimblestudio"
            }
          }
        },
        "aws-cdk-lib.aws_oam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Oam"
            },
            "java": {
              "package": "software.amazon.awscdk.services.oam"
            },
            "python": {
              "module": "aws_cdk.aws_oam"
            }
          }
        },
        "aws-cdk-lib.aws_omics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Omics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.omics"
            },
            "python": {
              "module": "aws_cdk.aws_omics"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchserverless"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchserverless"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchservice"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchservice"
            }
          }
        },
        "aws-cdk-lib.aws_opsworks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworks"
            },
            "python": {
              "module": "aws_cdk.aws_opsworks"
            }
          }
        },
        "aws-cdk-lib.aws_opsworkscm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorksCM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworkscm"
            },
            "python": {
              "module": "aws_cdk.aws_opsworkscm"
            }
          }
        },
        "aws-cdk-lib.aws_organizations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Organizations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.organizations"
            },
            "python": {
              "module": "aws_cdk.aws_organizations"
            }
          }
        },
        "aws-cdk-lib.aws_osis": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.OSIS"
            },
            "java": {
              "package": "services.osis"
            },
            "python": {
              "module": "aws_cdk.aws_osis"
            }
          }
        },
        "aws-cdk-lib.aws_panorama": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Panorama"
            },
            "java": {
              "package": "software.amazon.awscdk.services.panorama"
            },
            "python": {
              "module": "aws_cdk.aws_panorama"
            }
          }
        },
        "aws-cdk-lib.aws_personalize": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Personalize"
            },
            "java": {
              "package": "software.amazon.awscdk.services.personalize"
            },
            "python": {
              "module": "aws_cdk.aws_personalize"
            }
          }
        },
        "aws-cdk-lib.aws_pinpoint": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pinpoint"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpoint"
            },
            "python": {
              "module": "aws_cdk.aws_pinpoint"
            }
          }
        },
        "aws-cdk-lib.aws_pinpointemail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.PinpointEmail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpointemail"
            },
            "python": {
              "module": "aws_cdk.aws_pinpointemail"
            }
          }
        },
        "aws-cdk-lib.aws_pipes": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pipes"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pipes"
            },
            "python": {
              "module": "aws_cdk.aws_pipes"
            }
          }
        },
        "aws-cdk-lib.aws_proton": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Proton"
            },
            "java": {
              "package": "services.proton"
            },
            "python": {
              "module": "aws_cdk.aws_proton"
            }
          }
        },
        "aws-cdk-lib.aws_qldb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QLDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.qldb"
            },
            "python": {
              "module": "aws_cdk.aws_qldb"
            }
          }
        },
        "aws-cdk-lib.aws_quicksight": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QuickSight"
            },
            "java": {
              "package": "software.amazon.awscdk.services.quicksight"
            },
            "python": {
              "module": "aws_cdk.aws_quicksight"
            }
          }
        },
        "aws-cdk-lib.aws_ram": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ram"
            },
            "python": {
              "module": "aws_cdk.aws_ram"
            }
          }
        },
        "aws-cdk-lib.aws_rds": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RDS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rds"
            },
            "python": {
              "module": "aws_cdk.aws_rds"
            }
          }
        },
        "aws-cdk-lib.aws_redshift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Redshift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshift"
            },
            "python": {
              "module": "aws_cdk.aws_redshift"
            }
          }
        },
        "aws-cdk-lib.aws_redshiftserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RedshiftServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshiftserverless"
            },
            "python": {
              "module": "aws_cdk.aws_redshiftserverless"
            }
          }
        },
        "aws-cdk-lib.aws_refactorspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RefactorSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.refactorspaces"
            },
            "python": {
              "module": "aws_cdk.aws_refactorspaces"
            }
          }
        },
        "aws-cdk-lib.aws_rekognition": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Rekognition"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rekognition"
            },
            "python": {
              "module": "aws_cdk.aws_rekognition"
            }
          }
        },
        "aws-cdk-lib.aws_resiliencehub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResilienceHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resiliencehub"
            },
            "python": {
              "module": "aws_cdk.aws_resiliencehub"
            }
          }
        },
        "aws-cdk-lib.aws_resourceexplorer2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceExplorer2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourceexplorer2"
            },
            "python": {
              "module": "aws_cdk.aws_resourceexplorer2"
            }
          }
        },
        "aws-cdk-lib.aws_resourcegroups": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceGroups"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourcegroups"
            },
            "python": {
              "module": "aws_cdk.aws_resourcegroups"
            }
          }
        },
        "aws-cdk-lib.aws_robomaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RoboMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.robomaker"
            },
            "python": {
              "module": "aws_cdk.aws_robomaker"
            }
          }
        },
        "aws-cdk-lib.aws_rolesanywhere": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RolesAnywhere"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rolesanywhere"
            },
            "python": {
              "module": "aws_cdk.aws_rolesanywhere"
            }
          }
        },
        "aws-cdk-lib.aws_route53": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53"
            },
            "python": {
              "module": "aws_cdk.aws_route53"
            }
          }
        },
        "aws-cdk-lib.aws_route53_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_route53_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_route53_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.targets"
            },
            "python": {
              "module": "aws_cdk.aws_route53_targets"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoverycontrol": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryControl"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoverycontrol"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoverycontrol"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoveryreadiness": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryReadiness"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoveryreadiness"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoveryreadiness"
            }
          }
        },
        "aws-cdk-lib.aws_route53resolver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53Resolver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53resolver"
            },
            "python": {
              "module": "aws_cdk.aws_route53resolver"
            }
          }
        },
        "aws-cdk-lib.aws_rum": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RUM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rum"
            },
            "python": {
              "module": "aws_cdk.aws_rum"
            }
          }
        },
        "aws-cdk-lib.aws_s3": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3"
            },
            "python": {
              "module": "aws_cdk.aws_s3"
            }
          }
        },
        "aws-cdk-lib.aws_s3_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.assets"
            },
            "python": {
              "module": "aws_cdk.aws_s3_assets"
            }
          }
        },
        "aws-cdk-lib.aws_s3_deployment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Deployment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.deployment"
            },
            "python": {
              "module": "aws_cdk.aws_s3_deployment"
            }
          }
        },
        "aws-cdk-lib.aws_s3_notifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Notifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.notifications"
            },
            "python": {
              "module": "aws_cdk.aws_s3_notifications"
            }
          }
        },
        "aws-cdk-lib.aws_s3objectlambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3ObjectLambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3objectlambda"
            },
            "python": {
              "module": "aws_cdk.aws_s3objectlambda"
            }
          }
        },
        "aws-cdk-lib.aws_s3outposts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3Outposts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3outposts"
            },
            "python": {
              "module": "aws_cdk.aws_s3outposts"
            }
          }
        },
        "aws-cdk-lib.aws_sagemaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Sagemaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sagemaker"
            },
            "python": {
              "module": "aws_cdk.aws_sagemaker"
            }
          }
        },
        "aws-cdk-lib.aws_sam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sam"
            },
            "python": {
              "module": "aws_cdk.aws_sam"
            }
          }
        },
        "aws-cdk-lib.aws_scheduler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Scheduler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.scheduler"
            },
            "python": {
              "module": "aws_cdk.aws_scheduler"
            }
          }
        },
        "aws-cdk-lib.aws_sdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sdb"
            },
            "python": {
              "module": "aws_cdk.aws_sdb"
            }
          }
        },
        "aws-cdk-lib.aws_secretsmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecretsManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.secretsmanager"
            },
            "python": {
              "module": "aws_cdk.aws_secretsmanager"
            }
          }
        },
        "aws-cdk-lib.aws_securityhub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecurityHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.securityhub"
            },
            "python": {
              "module": "aws_cdk.aws_securityhub"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalog": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalog"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalog"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalog"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalogappregistry": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalogappregistry"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalogappregistry"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalogappregistry"
            }
          }
        },
        "aws-cdk-lib.aws_servicediscovery": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ServiceDiscovery"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicediscovery"
            },
            "python": {
              "module": "aws_cdk.aws_servicediscovery"
            }
          }
        },
        "aws-cdk-lib.aws_ses": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses"
            },
            "python": {
              "module": "aws_cdk.aws_ses"
            }
          }
        },
        "aws-cdk-lib.aws_ses_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses.actions"
            },
            "python": {
              "module": "aws_cdk.aws_ses_actions"
            }
          }
        },
        "aws-cdk-lib.aws_shield": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Shield"
            },
            "java": {
              "package": "services.shield"
            },
            "python": {
              "module": "aws_cdk.aws_shield"
            }
          }
        },
        "aws-cdk-lib.aws_signer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Signer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.signer"
            },
            "python": {
              "module": "aws_cdk.aws_signer"
            }
          }
        },
        "aws-cdk-lib.aws_simspaceweaver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SimSpaceWeaver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.simspaceweaver"
            },
            "python": {
              "module": "aws_cdk.aws_simspaceweaver"
            }
          }
        },
        "aws-cdk-lib.aws_sns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns"
            },
            "python": {
              "module": "aws_cdk.aws_sns"
            }
          }
        },
        "aws-cdk-lib.aws_sns_subscriptions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS.Subscriptions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns.subscriptions"
            },
            "python": {
              "module": "aws_cdk.aws_sns_subscriptions"
            }
          }
        },
        "aws-cdk-lib.aws_sqs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SQS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sqs"
            },
            "python": {
              "module": "aws_cdk.aws_sqs"
            }
          }
        },
        "aws-cdk-lib.aws_ssm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssm"
            },
            "python": {
              "module": "aws_cdk.aws_ssm"
            }
          }
        },
        "aws-cdk-lib.aws_ssmcontacts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMContacts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmcontacts"
            },
            "python": {
              "module": "aws_cdk.aws_ssmcontacts"
            }
          }
        },
        "aws-cdk-lib.aws_ssmincidents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMIncidents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmincidents"
            },
            "python": {
              "module": "aws_cdk.aws_ssmincidents"
            }
          }
        },
        "aws-cdk-lib.aws_sso": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSO"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sso"
            },
            "python": {
              "module": "aws_cdk.aws_sso"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions_tasks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions.Tasks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions.tasks"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions_tasks"
            }
          }
        },
        "aws-cdk-lib.aws_supportapp": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SupportApp"
            },
            "java": {
              "package": "software.amazon.awscdk.services.supportapp"
            },
            "python": {
              "module": "aws_cdk.aws_supportapp"
            }
          }
        },
        "aws-cdk-lib.aws_synthetics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Synthetics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.synthetics"
            },
            "python": {
              "module": "aws_cdk.aws_synthetics"
            }
          }
        },
        "aws-cdk-lib.aws_systemsmanagersap": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SystemsManagerSAP"
            },
            "java": {
              "package": "software.amazon.awscdk.services.systemsmanagersap"
            },
            "python": {
              "module": "aws_cdk.aws_systemsmanagersap"
            }
          }
        },
        "aws-cdk-lib.aws_timestream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Timestream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.timestream"
            },
            "python": {
              "module": "aws_cdk.aws_timestream"
            }
          }
        },
        "aws-cdk-lib.aws_transfer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Transfer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.transfer"
            },
            "python": {
              "module": "aws_cdk.aws_transfer"
            }
          }
        },
        "aws-cdk-lib.aws_verifiedpermissions": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.VerifiedPermissions"
            },
            "java": {
              "package": "services.verifiedpermissions"
            },
            "python": {
              "module": "aws_cdk.aws_verifiedpermissions"
            }
          }
        },
        "aws-cdk-lib.aws_voiceid": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VoiceID"
            },
            "java": {
              "package": "software.amazon.awscdk.services.voiceid"
            },
            "python": {
              "module": "aws_cdk.aws_voiceid"
            }
          }
        },
        "aws-cdk-lib.aws_vpclattice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VpcLattice"
            },
            "java": {
              "package": "software.amazon.awscdk.services.vpclattice"
            },
            "python": {
              "module": "aws_cdk.aws_vpclattice"
            }
          }
        },
        "aws-cdk-lib.aws_waf": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAF"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf"
            },
            "python": {
              "module": "aws_cdk.aws_waf"
            }
          }
        },
        "aws-cdk-lib.aws_wafregional": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFRegional"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf.regional"
            },
            "python": {
              "module": "aws_cdk.aws_wafregional"
            }
          }
        },
        "aws-cdk-lib.aws_wafv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wafv2"
            },
            "python": {
              "module": "aws_cdk.aws_wafv2"
            }
          }
        },
        "aws-cdk-lib.aws_wisdom": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Wisdom"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wisdom"
            },
            "python": {
              "module": "aws_cdk.aws_wisdom"
            }
          }
        },
        "aws-cdk-lib.aws_workspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WorkSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspaces"
            },
            "python": {
              "module": "aws_cdk.aws_workspaces"
            }
          }
        },
        "aws-cdk-lib.aws_xray": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.XRay"
            },
            "java": {
              "package": "software.amazon.awscdk.services.xray"
            },
            "python": {
              "module": "aws_cdk.aws_xray"
            }
          }
        },
        "aws-cdk-lib.cloud_assembly_schema": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudAssembly.Schema"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudassembly.schema"
            },
            "python": {
              "module": "aws_cdk.cloud_assembly_schema"
            }
          }
        },
        "aws-cdk-lib.cloudformation_include": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudFormation.Include"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudformation.include"
            },
            "python": {
              "module": "aws_cdk.cloudformation_include"
            }
          }
        },
        "aws-cdk-lib.custom_resources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CustomResources"
            },
            "java": {
              "package": "software.amazon.awscdk.customresources"
            },
            "python": {
              "module": "aws_cdk.custom_resources"
            }
          }
        },
        "aws-cdk-lib.cx_api": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CXAPI"
            },
            "java": {
              "package": "software.amazon.awscdk.cxapi"
            },
            "python": {
              "module": "aws_cdk.cx_api"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_awscli": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.AwsCli"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.awscli"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_awscli"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_kubectl": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.Kubectl"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.kubectl"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_kubectl"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_node_proxy_agent": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.NodeProxyAgent"
            },
            "java": {
              "package": "software.amazon.awscdk.lambda.layer.node.proxy.agent"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_node_proxy_agent"
            }
          }
        },
        "aws-cdk-lib.pipelines": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Pipelines"
            },
            "java": {
              "package": "software.amazon.awscdk.pipelines"
            },
            "python": {
              "module": "aws_cdk.pipelines"
            }
          }
        },
        "aws-cdk-lib.region_info": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.RegionInfo"
            },
            "java": {
              "package": "software.amazon.awscdk.regioninfo"
            },
            "python": {
              "module": "aws_cdk.region_info"
            }
          }
        },
        "aws-cdk-lib.triggers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Triggers"
            },
            "java": {
              "package": "software.amazon.awscdk.triggers"
            },
            "python": {
              "module": "aws_cdk.triggers"
            }
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK.Lib"
        },
        "go": {
          "moduleName": "github.com/aws/aws-cdk-go",
          "packageName": "awscdk"
        },
        "java": {
          "maven": {
            "artifactId": "aws-cdk-lib",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "aws-cdk-lib"
        },
        "python": {
          "distName": "aws-cdk-lib",
          "module": "aws_cdk"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::Batch",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "5.1.12 (build 0675712)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "batch"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-batch-alpha",
  "readme": {
    "markdown": "# AWS Batch Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Developer Preview](https://img.shields.io/badge/cdk--constructs-developer--preview-informational.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are in **developer preview** before they\n> become stable. We will only make breaking changes to address unforeseen API issues. Therefore,\n> these APIs are not subject to [Semantic Versioning](https://semver.org/), and breaking changes\n> will be announced in release notes. This means that while you may use them, you may need to\n> update your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\nAWS Batch is a batch processing tool for efficiently running hundreds of thousands computing jobs in AWS.\nBatch can dynamically provision [Amazon EC2](https://aws.amazon.com/ec2/) Instances to meet the resource requirements of submitted jobs\nand simplifies the planning, scheduling, and executions of your batch workloads. Batch achieves this through four different resources:\n\n* ComputeEnvironments: Contain the resources used to execute Jobs\n* JobDefinitions: Define a type of Job that can be submitted\n* JobQueues: Route waiting Jobs to ComputeEnvironments\n* SchedulingPolicies: Applied to Queues to control how and when Jobs exit the JobQueue and enter the ComputeEnvironment\n\n`ComputeEnvironment`s can be managed or unmanaged. Batch will automatically provision EC2 Instances in a managed `ComputeEnvironment` and will\nnot provision any Instances in an unmanaged `ComputeEnvironment`. Managed `ComputeEnvironment`s can use ECS, Fargate, or EKS resources to spin up\nEC2 Instances in (ensure your EKS Cluster has [been configured](https://docs.aws.amazon.com/batch/latest/userguide/getting-started-eks.html)\nto support a Batch ComputeEnvironment before linking it). You can use Launch Templates and Placement Groups to configure exactly how these resources\nwill be provisioned.\n\n`JobDefinition`s can use either ECS resources or EKS resources. ECS `JobDefinition`s can use multiple containers to execute distributed workloads.\nEKS `JobDefinition`s can only execute a single container. Submitted Jobs use `JobDefinition`s as templates.\n\n`JobQueue`s must link at least one `ComputeEnvironment`. Jobs exit the Queue in FIFO order unless a `SchedulingPolicy` is specified.\n\n`SchedulingPolicy`s tell the Scheduler how to choose which Jobs should be executed next by the ComputeEnvironment.\n\n## Use Cases & Examples\n\n### Cost Optimization\n\n#### Spot Instances\n\nSpot instances are significantly discounted EC2 instances that can be reclaimed at any time by AWS.\nWorkloads that are fault-tolerant or stateless can take advantage of spot pricing.\nTo use spot spot instances, set `spot` to `true` on a managed Ec2 or Fargate Compute Environment:\n\n```ts\nconst vpc = new ec2.Vpc(this, 'VPC');\nnew batch.FargateComputeEnvironment(this, 'myFargateComputeEnv', {\n  vpc,\n  spot: true,\n});\n```\n\nBatch allows you to specify the percentage of the on-demand instance that the current spot price\nmust be to provision the instance using the `spotBidPercentage`.\nThis defaults to 100%, which is the recommended value.\nThis value cannot be specified for `FargateComputeEnvironment`s\nand only applies to `ManagedEc2EcsComputeEnvironment`s.\nThe following code configures a Compute Environment to only use spot instances that\nare at most 20% the price of the on-demand instance price:\n\n```ts\nconst vpc = new ec2.Vpc(this, 'VPC');\nnew batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n   vpc,\n   spot: true,\n   spotBidPercentage: 20,\n});\n```\n\nFor stateful or otherwise non-interruption-tolerant workflows, omit `spot` or set it to `false` to only provision on-demand instances.\n\n#### Choosing Your Instance Types\n\nBatch allows you to choose the instance types or classes that will run your workload.\nThis example configures your `ComputeEnvironment` to use only the `M5AD.large` instance:\n\n```ts\nconst vpc = new ec2.Vpc(this, 'VPC');\n\nnew batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  vpc,\n  instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.M5AD, ec2.InstanceSize.LARGE)],\n});\n```\n\nBatch allows you to specify only the instance class and to let it choose the size, which you can do like this:\n\n```ts\nconst vpc = new ec2.Vpc(this, 'VPC');\n\ndeclare const computeEnv: batch.IManagedEc2EcsComputeEnvironment\ncomputeEnv.addInstanceClass(ec2.InstanceClass.M5AD);\n// Or, specify it on the constructor:\nnew batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  vpc,\n  instanceClasses: [ec2.InstanceClass.R4],\n});\n```\n\nUnless you explicitly specify `useOptimalInstanceClasses: false`, this compute environment will use `'optimal'` instances,\nwhich tells Batch to pick an instance from the C4, M4, and R4 instance families.\n*Note*: Batch does not allow specifying instance types or classes with different architectures.\nFor example, `InstanceClass.A1` cannot be specified alongside `'optimal'`,\nbecause `A1` uses ARM and `'optimal'` uses x86_64.\nYou can specify both `'optimal'` alongside several different instance types in the same compute environment:\n\n```ts\ndeclare const vpc: ec2.IVpc;\n\nconst computeEnv = new batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  instanceTypes: [ec2.InstanceType.of(ec2.InstanceClass.M5AD, ec2.InstanceSize.LARGE)],\n  useOptimalInstanceClasses: true, // default\n  vpc,\n});\n// Note: this is equivalent to specifying\ncomputeEnv.addInstanceType(ec2.InstanceType.of(ec2.InstanceClass.M5AD, ec2.InstanceSize.LARGE));\ncomputeEnv.addInstanceClass(ec2.InstanceClass.C4);\ncomputeEnv.addInstanceClass(ec2.InstanceClass.M4);\ncomputeEnv.addInstanceClass(ec2.InstanceClass.R4);\n```\n\n#### Allocation Strategies\n\n| Allocation Strategy           | Optimized for              | Downsides                     |\n| -----------------------       | -------------              | ----------------------------- |\n| BEST_FIT                      | Cost                       | May limit throughput          |\n| BEST_FIT_PROGRESSIVE          | Throughput                 | May increase cost             |\n| SPOT_CAPACITY_OPTIMIZED       | Least interruption         | Only useful on Spot instances |\n| SPOT_PRICE_CAPACITY_OPTIMIZED | Least interruption + Price | Only useful on Spot instances |\n\nBatch provides different Allocation Strategies to help it choose which instances to provision.\nIf your workflow tolerates interruptions, you should enable `spot` on your `ComputeEnvironment`\nand use `SPOT_PRICE_CAPACITY_OPTIMIZED` (this is the default if `spot` is enabled).\nThis will tell Batch to choose the instance types from the ones you’ve specified that have\nthe most spot capacity available to minimize the chance of interruption and have the lowest price.\nTo get the most benefit from your spot instances,\nyou should allow Batch to choose from as many different instance types as possible.\nIf you only care about minimal interruptions and not want Batch to optimize for cost, use\n`SPOT_CAPACITY_OPTIMIZED`. `SPOT_PRICE_CAPACITY_OPTIMIZED` is recommended over `SPOT_CAPACITY_OPTIMIZED`\nfor most use cases.\n\nIf your workflow does not tolerate interruptions and you want to minimize your costs at the expense\nof potentially longer waiting times, use `AllocationStrategy.BEST_FIT`.\nThis will choose the lowest-cost instance type that fits all the jobs in the queue.\nIf instances of that type are not available,\nthe queue will not choose a new type; instead, it will wait for the instance to become available.\nThis can stall your `Queue`, with your compute environment only using part of its max capacity\n(or none at all) until the `BEST_FIT` instance becomes available.\n\nIf you are running a workflow that does not tolerate interruptions and you want to maximize throughput,\nyou can use `AllocationStrategy.BEST_FIT_PROGRESSIVE`.\nThis is the default Allocation Strategy if `spot` is `false` or unspecified.\nThis strategy will examine the Jobs in the queue and choose whichever instance type meets the requirements\nof the jobs in the queue and with the lowest cost per vCPU, just as `BEST_FIT`.\nHowever, if not all of the capacity can be filled with this instance type,\nit will choose a new next-best instance type to run any jobs that couldn’t fit into the `BEST_FIT` capacity.\nTo make the most use of this allocation strategy,\nit is recommended to use as many instance classes as is feasible for your workload.\nThis example shows a `ComputeEnvironment` that uses `BEST_FIT_PROGRESSIVE`\nwith `'optimal'` and `InstanceClass.M5` instance types:\n\n```ts\ndeclare const vpc: ec2.IVpc;\n\nconst computeEnv = new batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  vpc,\n  instanceClasses: [ec2.InstanceClass.M5],\n});\n```\n\nThis example shows a `ComputeEnvironment` that uses `BEST_FIT` with `'optimal'` instances:\n\n```ts\ndeclare const vpc: ec2.IVpc;\n\nconst computeEnv = new batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  vpc,\n  allocationStrategy: batch.AllocationStrategy.BEST_FIT,\n});\n```\n\n*Note*: `allocationStrategy` cannot be specified on Fargate Compute Environments.\n\n### Controlling vCPU allocation\n\nYou can specify the maximum and minimum vCPUs a managed `ComputeEnvironment` can have at any given time.\nBatch will *always* maintain `minvCpus` worth of instances in your ComputeEnvironment, even if it is not executing any jobs,\nand even if it is disabled. Batch will scale the instances up to `maxvCpus` worth of instances as\njobs exit the JobQueue and enter the ComputeEnvironment. If you use `AllocationStrategy.BEST_FIT_PROGRESSIVE`,\n`AllocationStrategy.SPOT_PRICE_CAPACITY_OPTIMIZED`, or `AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`,\nbatch may exceed `maxvCpus`; it will never exceed `maxvCpus` by more than a single instance type. This example configures a\n`minvCpus` of 10 and a `maxvCpus` of 100:\n\n```ts\ndeclare const vpc: ec2.IVpc;\n\nnew batch.ManagedEc2EcsComputeEnvironment(this, 'myEc2ComputeEnv', {\n  vpc,\n  instanceClasses: [ec2.InstanceClass.R4],\n  minvCpus: 10,\n  maxvCpus: 100,\n});\n```\n\n### Tagging Instances\n\nYou can tag any instances launched by your managed EC2 ComputeEnvironments by using the CDK `Tags` API:\n\n```ts\nimport { Tags } from 'aws-cdk-lib';\n\ndeclare const vpc: ec2.IVpc;\n\nconst tagCE = new batch.ManagedEc2EcsComputeEnvironment(this, 'CEThatMakesTaggedInstnaces', {\n  vpc,\n});\n\nTags.of(tagCE).add('super', 'salamander');\n```\n\nUnmanaged `ComputeEnvironment`s do not support `maxvCpus` or `minvCpus` because you must provision and manage the instances yourself;\nthat is, Batch will not scale them up and down as needed.\n\n### Sharing a ComputeEnvironment between multiple JobQueues\n\nMultiple `JobQueue`s can share the same `ComputeEnvironment`.\nIf multiple Queues are attempting to submit Jobs to the same `ComputeEnvironment`,\nBatch will pick the Job from the Queue with the highest priority.\nThis example creates two `JobQueue`s that share a `ComputeEnvironment`:\n\n```ts\ndeclare const vpc: ec2.IVpc;\nconst sharedComputeEnv = new batch.FargateComputeEnvironment(this, 'spotEnv', {\n  vpc,\n  spot: true,\n});\nconst lowPriorityQueue = new batch.JobQueue(this, 'JobQueue', {\n   priority: 1,\n});\nconst highPriorityQueue = new batch.JobQueue(this, 'JobQueue', {\n   priority: 10,\n});\nlowPriorityQueue.addComputeEnvironment(sharedComputeEnv, 1);\nhighPriorityQueue.addComputeEnvironment(sharedComputeEnv, 1);\n```\n\n### Fairshare Scheduling\n\nBatch `JobQueue`s execute Jobs submitted to them in FIFO order unless you specify a `SchedulingPolicy`.\nFIFO queuing can cause short-running jobs to be starved while long-running jobs fill the compute environment.\nTo solve this, Jobs can be associated with a share.\n\nShares consist of a `shareIdentifier` and a `weightFactor`, which is inversely correlated with the vCPU allocated to that share identifier.\nWhen submitting a Job, you can specify its `shareIdentifier` to associate that particular job with that share.\nLet's see how the scheduler uses this information to schedule jobs.\n\nFor example, if there are two shares defined as follows:\n\n| Share Identifier | Weight Factor |\n| ---------------- | ------------- |\n| A                | 1             |\n| B                | 1             |\n\nThe weight factors share the following relationship:\n\n```math\nA_{vCpus} / A_{Weight} = B_{vCpus} / B_{Weight}\n```\n\nwhere `BvCpus` is the number of vCPUs allocated to jobs with share identifier `'B'`, and `B_weight` is the weight factor of `B`.\n\nThe total number of vCpus allocated to a share is equal to the amount of jobs in that share times the number of vCpus necessary for every job.\nLet's say that each A job needs 32 VCpus (`A_requirement` = 32) and each B job needs 64 vCpus (`B_requirement` = 64):\n\n```math\nA_{vCpus} = A_{Jobs} * A_{Requirement}\n```\n\n```math\nB_{vCpus} = B_{Jobs} * B_{Requirement}\n```\n\nWe have:\n\n```math\nA_{vCpus} / A_{Weight} = B_{vCpus} / B_{Weight}\n```\n\n```math\nA_{Jobs} * A_{Requirement} / A_{Weight} = B_{Jobs} * B_{Requirement} / B_{Weight}\n```\n\n```math\nA_{Jobs} * 32 / 1 = B_{Jobs} * 64 / 1\n```\n\n```math\nA_{Jobs} * 32 = B_{Jobs} * 64\n```\n\n```math\nA_{Jobs} = B_{Jobs} * 2\n```\n\nThus the scheduler will schedule two `'A'` jobs for each `'B'` job.\n\nYou can control the weight factors to change these ratios, but note that\nweight factors are inversely correlated with the vCpus allocated to the corresponding share.\n\nThis example would be configured like this:\n\n```ts\nconst fairsharePolicy = new batch.FairshareSchedulingPolicy(this, 'myFairsharePolicy');\n\nfairsharePolicy.addShare({\n  shareIdentifier: 'A',\n  weightFactor: 1,\n});\nfairsharePolicy.addShare({\n  shareIdentifier: 'B',\n  weightFactor: 1,\n});\nnew batch.JobQueue(this, 'JobQueue', {\n  schedulingPolicy: fairsharePolicy,\n});\n```\n\n*Note*: The scheduler will only consider the current usage of the compute environment unless you specify `shareDecay`.\nFor example, a `shareDecay` of 5 minutes in the above example means that at any given point in time, twice as many `'A'` jobs\nwill be scheduled for each `'B'` job, but only for the past 5 minutes. If `'B'` jobs run longer than 5 minutes, then\nthe scheduler is allowed to put more than two `'A'` jobs for each `'B'` job, because the usage of those long-running\n`'B'` jobs will no longer be considered after 5 minutes. `shareDecay` linearly decreases the usage of\nlong running jobs for calculation purposes. For example if share decay is 60 seconds,\nthen jobs that run for 30 seconds have their usage considered to be only 50% of what it actually is,\nbut after a whole minute the scheduler pretends they don't exist for fairness calculations.\n\nThe following code specifies a `shareDecay` of 5 minutes:\n\n```ts\nimport * as cdk from 'aws-cdk-lib'\nconst fairsharePolicy = new batch.FairshareSchedulingPolicy(this, 'myFairsharePolicy', {\n   shareDecay: cdk.Duration.minutes(5),\n});\n```\n\nIf you have high priority jobs that should always be executed as soon as they arrive,\nyou can define a `computeReservation` to specify the percentage of the\nmaximum vCPU capacity that should be reserved for shares that are *not in the queue*.\nThe actual reserved percentage is defined by Batch as:\n\n```math\n (\\frac{computeReservation}{100}) ^ {ActiveFairShares}\n```\n\nwhere `ActiveFairShares` is the number of shares for which there exists\nat least one job in the queue with a unique share identifier.\n\nThis is best illustrated with an example.\nSuppose there are three shares with share identifiers `A`, `B` and `C` respectively\nand we specify the `computeReservation` to be 75%. The queue is currently empty,\nand no other shares exist.\n\nThere are no active fair shares, since the queue is empty.\nThus (75/100)^0 = 1 = 100% of the maximum vCpus are reserved for all shares.\n\nA job with identifier `A` enters the queue.\n\nThe number of active fair shares is now 1, hence\n(75/100)^1 = .75 = 75% of the maximum vCpus are reserved for all shares that do not have the identifier `A`;\nfor this example, this is `B` and `C`,\n(but if jobs are submitted with a share identifier not covered by this fairshare policy, those would be considered just as `B` and `C` are).\n\nNow a `B` job enters the queue. The number of active fair shares is now 2,\nso (75/100)^2 = .5625 = 56.25% of the maximum vCpus are reserved for all shares that do not have the identifier `A` or `B`.\n\nNow a second `A` job enters the queue. The number of active fair shares is still 2,\nso the percentage reserved is still 56.25%\n\nNow a `C` job enters the queue. The number of active fair shares is now 3,\nso (75/100)^3 = .421875 = 42.1875% of the maximum vCpus are reserved for all shares that do not have the identifier `A`, `B`, or `C`.\n\nIf there are no other shares that your jobs can specify, this means that 42.1875% of your capacity will never be used!\n\nNow, `A`, `B`, and `C` can only consume 100% - 42.1875% = 57.8125% of the maximum vCpus.\nNote that the this percentage is **not** split between `A`, `B`, and `C`.\nInstead, the scheduler will use their `weightFactor`s to decide which jobs to schedule;\nthe only difference is that instead of competing for 100% of the max capacity, jobs compete for 57.8125% of the max capacity.\n\nThis example specifies a `computeReservation` of 75% that will behave as explained in the example above:\n\n```ts\nnew batch.FairshareSchedulingPolicy(this, 'myFairsharePolicy', {\n  computeReservation: 75,\n  shares: [\n    { weightFactor: 1, shareIdentifier: 'A' },\n    { weightFactor: 0.5, shareIdentifier: 'B' },\n    { weightFactor: 2, shareIdentifier: 'C' },\n  ],\n});\n```\n\nYou can specify a `priority` on your `JobDefinition`s to tell the scheduler to prioritize certain jobs that share the same share identifier.\n\n### Configuring Job Retry Policies\n\nCertain workflows may result in Jobs failing due to intermittent issues.\nJobs can specify retry policies to respond to different failures with different actions.\nThere are three different ways information about the way a Job exited can be conveyed;\n\n* `exitCode`: the exit code returned from the process executed by the container. Will only match non-zero exit codes.\n* `reason`: any middleware errors, like your Docker registry being down.\n* `statusReason`: infrastructure errors, most commonly your spot instance being reclaimed.\n\nFor most use cases, only one of these will be associated with a particular action at a time.\nTo specify common `exitCode`s, `reason`s, or `statusReason`s, use the corresponding value from\nthe `Reason` class. This example shows some common failure reasons:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\n\nconst jobDefn = new batch.EcsJobDefinition(this, 'JobDefn', {\n   container: new batch.EcsEc2ContainerDefinition(this, 'containerDefn', {\n    image: ecs.ContainerImage.fromRegistry('public.ecr.aws/amazonlinux/amazonlinux:latest'),\n    memory: cdk.Size.mebibytes(2048),\n    cpu: 256,\n  }),\n  retryAttempts: 5,\n  retryStrategies: [\n    batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.CANNOT_PULL_CONTAINER),\n  ],\n});\njobDefn.addRetryStrategy(\n  batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.SPOT_INSTANCE_RECLAIMED),\n);\njobDefn.addRetryStrategy(\n  batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.CANNOT_PULL_CONTAINER),\n);\njobDefn.addRetryStrategy(\n  batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.custom({\n    onExitCode: '40*',\n    onReason: 'some reason',\n  })),\n);\n```\n\nWhen specifying a custom reason,\nyou can specify a glob string to match each of these and react to different failures accordingly.\nUp to five different retry strategies can be configured for each Job,\nand each strategy can match against some or all of `exitCode`, `reason`, and `statusReason`.\nYou can optionally configure the number of times a job will be retried,\nbut you cannot configure different retry counts for different strategies; they all share the same count.\nIf multiple conditions are specified in a given retry strategy,\nthey must all match for the action to be taken; the conditions are ANDed together, not ORed.\n\n### Running single-container ECS workflows\n\nBatch can run jobs on ECS or EKS. ECS jobs can be defined as single container or multinode.\nThis example creates a `JobDefinition` that runs a single container with ECS:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as efs from 'aws-cdk-lib/aws-efs';\n\ndeclare const myFileSystem: efs.IFileSystem;\ndeclare const myJobRole: iam.Role;\nmyFileSystem.grantRead(myJobRole);\n\nconst jobDefn = new batch.EcsJobDefinition(this, 'JobDefn', {\n  container: new batch.EcsEc2ContainerDefinition(this, 'containerDefn', {\n    image: ecs.ContainerImage.fromRegistry('public.ecr.aws/amazonlinux/amazonlinux:latest'),\n    memory: cdk.Size.mebibytes(2048),\n    cpu: 256,\n    volumes: [batch.EcsVolume.efs({\n      name: 'myVolume',\n      fileSystem: myFileSystem,\n      containerPath: '/Volumes/myVolume',\n      useJobRole: true,\n    })],\n    jobRole: myJobRole,\n  }),\n});\n```\n\nFor workflows that need persistent storage, batch supports mounting `Volume`s to the container.\nYou can both provision the volume and mount it to the container in a single operation:\n\n```ts\nimport * as efs from 'aws-cdk-lib/aws-efs';\n\ndeclare const myFileSystem: efs.IFileSystem;\ndeclare const jobDefn: batch.EcsJobDefinition;\n\njobDefn.container.addVolume(batch.EcsVolume.efs({\n  name: 'myVolume',\n  fileSystem: myFileSystem,\n  containerPath: '/Volumes/myVolume',\n}));\n```\n\n### Secrets\n\nYou can expose SecretsManager Secret ARNs or SSM Parameters to your container as environment variables.\nThe following example defines the `MY_SECRET_ENV_VAR` environment variable that contains the\nARN of the Secret defined by `mySecret`:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const mySecret: secretsmanager.ISecret;\n\nconst jobDefn = new batch.EcsJobDefinition(this, 'JobDefn', {\n  container: new batch.EcsEc2ContainerDefinition(this, 'containerDefn', {\n    image: ecs.ContainerImage.fromRegistry('public.ecr.aws/amazonlinux/amazonlinux:latest'),\n    memory: cdk.Size.mebibytes(2048),\n    cpu: 256,\n    secrets: {\n      MY_SECRET_ENV_VAR: batch.Secret.fromSecretsManager(mySecret),\n    }\n  }),\n});\n```\n\n### Running Kubernetes Workflows\n\nBatch also supports running workflows on EKS. The following example creates a `JobDefinition` that runs on EKS:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\nconst jobDefn = new batch.EksJobDefinition(this, 'eksf2', {\n  container: new batch.EksContainerDefinition(this, 'container', {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    volumes: [batch.EksVolume.emptyDir({\n      name: 'myEmptyDirVolume',\n      mountPath: '/mount/path',\n      medium: batch.EmptyDirMediumType.MEMORY,\n      readonly: true,\n      sizeLimit: cdk.Size.mebibytes(2048),\n    })],\n  }),\n});\n```\n\nYou can mount `Volume`s to these containers in a single operation:\n\n```ts\ndeclare const jobDefn: batch.EksJobDefinition;\njobDefn.container.addVolume(batch.EksVolume.emptyDir({\n  name: 'emptyDir',\n  mountPath: '/Volumes/emptyDir',\n}));\njobDefn.container.addVolume(batch.EksVolume.hostPath({\n  name: 'hostPath',\n  hostPath: '/sys',\n  mountPath: '/Volumes/hostPath',\n}));\njobDefn.container.addVolume(batch.EksVolume.secret({\n  name: 'secret',\n  optional: true,\n  mountPath: '/Volumes/secret',\n  secretName: 'mySecret',\n}));\n```\n\n### Running Distributed Workflows\n\nSome workflows benefit from parallellization and are most powerful when run in a distributed environment,\nsuch as certain numerical calculations or simulations. Batch offers `MultiNodeJobDefinition`s,\nwhich allow a single job to run on multiple instances in parallel, for this purpose.\nMessage Passing Interface (MPI) is often used with these workflows.\nYou must configure your containers to use MPI properly,\nbut Batch allows different nodes running different containers to communicate easily with one another.\nYou must configure your containers to use certain environment variables that Batch will provide them,\nwhich lets them know which one is the main node, among other information.\nFor an in-depth example on using MPI to perform numerical computations on Batch,\nsee this [blog post](https://aws.amazon.com/blogs/compute/building-a-tightly-coupled-molecular-dynamics-workflow-with-multi-node-parallel-jobs-in-aws-batch/)\nIn particular, the environment variable that tells the containers which one is the main node can be configured on your `MultiNodeJobDefinition` as follows:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\nconst multiNodeJob = new batch.MultiNodeJobDefinition(this, 'JobDefinition', {\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R4, ec2.InstanceSize.LARGE),\n  containers: [{\n    container: new batch.EcsEc2ContainerDefinition(this, 'mainMPIContainer', {\n      image: ecs.ContainerImage.fromRegistry('yourregsitry.com/yourMPIImage:latest'),\n      cpu: 256,\n      memory: cdk.Size.mebibytes(2048),\n    }),\n    startNode: 0,\n    endNode: 5,\n  }],\n});\n// convenience method\nmultiNodeJob.addContainer({\n  startNode: 6,\n  endNode: 10,\n  container: new batch.EcsEc2ContainerDefinition(this, 'multiContainer', {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    cpu: 256,\n    memory: cdk.Size.mebibytes(2048),\n  }),\n});\n```\n\nIf you need to set the control node to an index other than 0, specify it in directly:\n\n```ts\nconst multiNodeJob = new batch.MultiNodeJobDefinition(this, 'JobDefinition', {\n  mainNode: 5,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R4, ec2.InstanceSize.LARGE),\n});\n```\n\n### Pass Parameters to a Job\n\nBatch allows you define parameters in your `JobDefinition`, which can be referenced in the container command. For example:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\nnew batch.EcsJobDefinition(this, 'JobDefn', {\n  parameters: { echoParam: 'foobar' },\n  container: new batch.EcsEc2ContainerDefinition(this, 'containerDefn', {\n    image: ecs.ContainerImage.fromRegistry('public.ecr.aws/amazonlinux/amazonlinux:latest'),\n    memory: cdk.Size.mebibytes(2048),\n    cpu: 256,\n    command: [\n      'echo',\n      'Ref::echoParam',\n    ],\n  }),\n});\n```\n\n### Understanding Progressive Allocation Strategies\n\nAWS Batch uses an [allocation strategy](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) to determine what compute resource will efficiently handle incoming job requests. By default, **BEST_FIT** will pick an available compute instance based on vCPU requirements. If none exist, the job will wait until resources become available. However, with this strategy, you may have jobs waiting in the queue unnecessarily despite having more powerful instances available. Below is an example of how that situation might look like:\n\n```plaintext\nCompute Environment:\n\n1. m5.xlarge => 4 vCPU\n2. m5.2xlarge => 8 vCPU\n```\n\n```plaintext\nJob Queue:\n---------\n| A | B |\n---------\n\nJob Requirements:\nA => 4 vCPU - ALLOCATED TO m5.xlarge\nB => 2 vCPU - WAITING\n```\n\nIn this situation, Batch will allocate **Job A** to compute resource #1 because it is the most cost efficient resource that matches the vCPU requirement. However, with this `BEST_FIT` strategy, **Job B** will not be allocated to our other available compute resource even though it is strong enough to handle it. Instead, it will wait until the first job is finished processing or wait a similar `m5.xlarge` resource to be provisioned.\n\nThe alternative would be to use the `BEST_FIT_PROGRESSIVE` strategy in order for the remaining job to be handled in larger containers regardless of vCPU requirement and costs.\n\n### Permissions\n\nYou can grant any Principal the `batch:submitJob` permission on both a job definition and a job queue like this:\n\n```ts\nimport * as cdk from 'aws-cdk-lib';\nimport * as iam from 'aws-cdk-lib/aws-iam';\n\ndeclare const vpc: ec2.IVpc;\n\nconst ecsJob = new batch.EcsJobDefinition(this, 'JobDefn', {\n  container: new batch.EcsEc2ContainerDefinition(this, 'containerDefn', {\n    image: ecs.ContainerImage.fromRegistry('public.ecr.aws/amazonlinux/amazonlinux:latest'),\n    memory: cdk.Size.mebibytes(2048),\n    cpu: 256,\n  }),\n});\n\nconst queue = new batch.JobQueue(this, 'JobQueue', {\n  computeEnvironments: [{\n    computeEnvironment: new batch.ManagedEc2EcsComputeEnvironment(this, 'managedEc2CE', {\n      vpc,\n    }),\n    order: 1,\n  }],\n  priority: 10,\n});\n\nconst user = new iam.User(this, 'MyUser');\necsJob.grantSubmitJob(user, queue);\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-batch-alpha",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Batch.Alpha",
      "packageId": "Amazon.CDK.AWS.Batch.Alpha"
    },
    "go": {
      "moduleName": "github.com/aws/aws-cdk-go",
      "packageName": "awscdkbatchalpha"
    },
    "java": {
      "maven": {
        "artifactId": "batch-alpha",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.batch.alpha"
    },
    "js": {
      "npm": "@aws-cdk/aws-batch-alpha"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 2"
      ],
      "distName": "aws-cdk.aws-batch-alpha",
      "module": "aws_cdk.aws_batch_alpha"
    }
  },
  "types": {
    "@aws-cdk/aws-batch-alpha.Action": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The Action to take when all specified conditions in a RetryStrategy are met."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Action",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 159
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The job will not retry."
          },
          "name": "EXIT"
        },
        {
          "docs": {
            "remarks": "It can be retried up to the number of times specified in `retryAttempts`.",
            "stability": "experimental",
            "summary": "The job will retry."
          },
          "name": "RETRY"
        }
      ],
      "name": "Action",
      "symbolId": "lib/job-definition-base:Action"
    },
    "@aws-cdk/aws-batch-alpha.AllocationStrategy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "see": "https://aws.amazon.com/blogs/compute/optimizing-for-cost-availability-and-throughput-by-selecting-your-aws-batch-allocation-strategy/",
        "stability": "experimental",
        "summary": "Determines how this compute environment chooses instances to spawn."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 423
      },
      "members": [
        {
          "docs": {
            "remarks": "If instances of that type are not available, the queue will not choose a new type;\ninstead, it will wait for the instance to become available.\nThis can stall your `Queue`, with your compute environment only using part of its max capacity\n(or none at all) until the `BEST_FIT` instance becomes available.\nThis allocation strategy keeps costs lower but can limit scaling.\n`BEST_FIT` isn't supported when updating compute environments",
            "stability": "experimental",
            "summary": "Batch chooses the lowest-cost instance type that fits all the jobs in the queue."
          },
          "name": "BEST_FIT"
        },
        {
          "docs": {
            "remarks": "This strategy will examine the Jobs in the queue and choose whichever instance type meets the requirements\nof the jobs in the queue and with the lowest cost per vCPU, just as `BEST_FIT`.\nHowever, if not all of the capacity can be filled with this instance type,\nit will choose a new next-best instance type to run any jobs that couldn’t fit into the `BEST_FIT` capacity.\nTo make the most use of this allocation strategy,\nit is recommended to use as many instance classes as is feasible for your workload.",
            "stability": "experimental",
            "summary": "This is the default Allocation Strategy if `spot` is `false` or unspecified."
          },
          "name": "BEST_FIT_PROGRESSIVE"
        },
        {
          "docs": {
            "remarks": "This will tell Batch to choose the instance types from the ones you’ve specified that have\nthe most spot capacity available to minimize the chance of interruption.\nTo get the most benefit from your spot instances,\nyou should allow Batch to choose from as many different instance types as possible.",
            "stability": "experimental",
            "summary": "If your workflow tolerates interruptions, you should enable `spot` on your `ComputeEnvironment` and use `SPOT_CAPACITY_OPTIMIZED` (this is the default if `spot` is enabled)."
          },
          "name": "SPOT_CAPACITY_OPTIMIZED"
        },
        {
          "docs": {
            "remarks": "The Batch team recommends this over `SPOT_CAPACITY_OPTIMIZED` in most instances.",
            "stability": "experimental",
            "summary": "The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price."
          },
          "name": "SPOT_PRICE_CAPACITY_OPTIMIZED"
        }
      ],
      "name": "AllocationStrategy",
      "symbolId": "lib/managed-compute-environment:AllocationStrategy"
    },
    "@aws-cdk/aws-batch-alpha.ComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props common to all ComputeEnvironments."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ComputeEnvironmentProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compute-environment-base.ts",
        "line": 50
      },
      "name": "ComputeEnvironmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- generated by CloudFormation",
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 56
          },
          "name": "computeEnvironmentName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 81
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a serviceRole will be created for managed CEs, none for unmanaged CEs",
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 64
          },
          "name": "serviceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/compute-environment-base:ComputeEnvironmentProps"
    },
    "@aws-cdk/aws-batch-alpha.CustomReason": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The corresponding Action will only be taken if *all* of the conditions specified here are met."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.CustomReason",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 173
      },
      "name": "CustomReason",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- will not match on the exit code",
            "remarks": "For example, `'40*'` will match 400, 404, 40123456789012",
            "stability": "experimental",
            "summary": "A glob string that will match on the job exit code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 179
          },
          "name": "onExitCode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- will not match on the reason",
            "stability": "experimental",
            "summary": "A glob string that will match on the reason returned by the exiting job For example, `'CannotPullContainerError*'` indicates that container needed to start the job could not be pulled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 195
          },
          "name": "onReason",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- will not match on the status reason",
            "remarks": "For example, `'Host EC2*'` indicates that the spot instance has been reclaimed.",
            "stability": "experimental",
            "summary": "A glob string that will match on the statusReason returned by the exiting job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 187
          },
          "name": "onStatusReason",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/job-definition-base:CustomReason"
    },
    "@aws-cdk/aws-batch-alpha.Device": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A container instance host device."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Device",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 143
      },
      "name": "Device",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path for the device on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 154
          },
          "name": "hostPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Same path as the host",
            "stability": "experimental",
            "summary": "The path inside the container at which to expose the host device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 149
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Readonly",
            "remarks": "By default, the container has permissions for read, write, and mknod for the device.",
            "stability": "experimental",
            "summary": "The explicit permissions to provide to the container for the device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 162
          },
          "name": "permissions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.DevicePermission"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/linux-parameters:Device"
    },
    "@aws-cdk/aws-batch-alpha.DevicePermission": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Permissions for device access."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.DevicePermission",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 191
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Read."
          },
          "name": "READ"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Write."
          },
          "name": "WRITE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make a node."
          },
          "name": "MKNOD"
        }
      ],
      "name": "DevicePermission",
      "symbolId": "lib/linux-parameters:DevicePermission"
    },
    "@aws-cdk/aws-batch-alpha.DnsPolicy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy",
        "stability": "experimental",
        "summary": "The DNS Policy for the pod used by the Job Definition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.DnsPolicy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/eks-job-definition.ts",
        "line": 100
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Pod inherits the name resolution configuration from the node that the Pods run on."
          },
          "name": "DEFAULT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Any DNS query that does not match the configured cluster domain suffix, such as `\"www.kubernetes.io\"`, is forwarded to an upstream nameserver by the DNS server. Cluster administrators may have extra stub-domain and upstream DNS servers configured."
          },
          "name": "CLUSTER_FIRST"
        },
        {
          "docs": {
            "remarks": "Otherwise, Pods running with `hostNetwork` and `CLUSTER_FIRST` will fallback to the behavior of the `DEFAULT` policy.",
            "stability": "experimental",
            "summary": "For Pods running with `hostNetwork`, you should explicitly set its DNS policy to `CLUSTER_FIRST_WITH_HOST_NET`."
          },
          "name": "CLUSTER_FIRST_WITH_HOST_NET"
        }
      ],
      "name": "DnsPolicy",
      "symbolId": "lib/eks-job-definition:DnsPolicy"
    },
    "@aws-cdk/aws-batch-alpha.EcsContainerDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure an EcsContainerDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsContainerDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 472
      },
      "name": "EcsContainerDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Each vCPU is equivalent to 1,024 CPU shares.\nFor containers running on EC2 resources, you must specify at least one vCPU.",
            "stability": "experimental",
            "summary": "The number of vCPUs reserved for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 483
          },
          "name": "cpu",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 476
          },
          "name": "image",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If your container attempts to exceed the memory specified, the container is terminated.\nYou must specify at least 4 MiB of memory for a job.",
            "stability": "experimental",
            "summary": "The memory hard limit present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 490
          },
          "name": "memory",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no command",
            "see": "https://docs.docker.com/engine/reference/builder/#cmd",
            "stability": "experimental",
            "summary": "The command that's passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 499
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "remarks": "Cannot start with `AWS_BATCH`.\nWe don't recommend using plaintext environment variables for sensitive information, such as credential data.",
            "stability": "experimental",
            "summary": "The environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 508
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a Role will be created",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html",
            "stability": "experimental",
            "summary": "The role used by Amazon ECS container and AWS Fargate agents to make AWS API calls on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 517
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no job role",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html",
            "stability": "experimental",
            "summary": "The role that the container can assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 526
          },
          "name": "jobRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "experimental",
            "summary": "Linux-specific modifications that are applied to the container, such as details for device mappings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 533
          },
          "name": "linuxParameters",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.LinuxParameters"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the log configuration of the Docker daemon",
            "stability": "experimental",
            "summary": "The loging configuration for this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 540
          },
          "name": "logging",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Gives the container readonly access to its root filesystem."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 547
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no secrets",
            "remarks": "Allows your job definitions\nto reference the secret by the environment variable name defined in this property.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html",
            "stability": "experimental",
            "summary": "A map from environment variable names to the secrets for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 557
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no user",
            "stability": "experimental",
            "summary": "The user name to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 564
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no volumes",
            "remarks": "Automatically added to the job definition.",
            "stability": "experimental",
            "summary": "The volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 571
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsContainerDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EcsEc2ContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A container orchestrated by ECS that uses EC2 resources."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsEc2ContainerDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-container-definition.ts",
          "line": 900
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EcsEc2ContainerDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
        "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 895
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a ulimit to this container."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 934
          },
          "name": "addUlimit",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
          "parameters": [
            {
              "name": "ulimit",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Ulimit"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a Volume to this container."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 706
          },
          "name": "addVolume",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              }
            }
          ]
        }
      ],
      "name": "EcsEc2ContainerDefinition",
      "properties": [
        {
          "docs": {
            "remarks": "Each vCPU is equivalent to 1,024 CPU shares.\nFor containers running on EC2 resources, you must specify at least one vCPU.",
            "stability": "experimental",
            "summary": "The number of vCPUs reserved for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 579
          },
          "name": "cpu",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role used by Amazon ECS container and AWS Fargate agents to make AWS API calls on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 583
          },
          "name": "executionRole",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 578
          },
          "name": "image",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "docs": {
            "remarks": "If your container attempts to exceed the memory specified, the container is terminated.\nYou must specify at least 4 MiB of memory for a job.",
            "stability": "experimental",
            "summary": "The memory hard limit present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 580
          },
          "name": "memory",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Limits to set for the user this docker container will run as."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 897
          },
          "name": "ulimits",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Ulimit"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Automatically added to the job definition.",
            "stability": "experimental",
            "summary": "The volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 590
          },
          "name": "volumes",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command that's passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 581
          },
          "name": "command",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Cannot start with `AWS_BATCH`.\nWe don't recommend using plaintext environment variables for sensitive information, such as credential data.",
            "stability": "experimental",
            "summary": "The environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 582
          },
          "name": "environment",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "remarks": "Make sure that the number of GPUs reserved for all containers in a job doesn't exceed\nthe number of available GPUs on the compute resource that the job is launched on.",
            "stability": "experimental",
            "summary": "The number of physical GPUs to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 898
          },
          "name": "gpu",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role that the container can assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 584
          },
          "name": "jobRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Linux-specific modifications that are applied to the container, such as details for device mappings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 585
          },
          "name": "linuxParameters",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.LinuxParameters"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The configuration of the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 586
          },
          "name": "logDriverConfig",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.LogDriverConfig"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 896
          },
          "name": "privileged",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Gives the container readonly access to its root filesystem."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 587
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Allows your job definitions\nto reference the secret by the environment variable name defined in this property.",
            "stability": "experimental",
            "summary": "A map from environment variable names to the secrets for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 588
          },
          "name": "secrets",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The user name to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 589
          },
          "name": "user",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsEc2ContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.EcsEc2ContainerDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure an EcsEc2ContainerDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsEc2ContainerDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EcsContainerDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 867
      },
      "name": "EcsEc2ContainerDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no gpus",
            "remarks": "Make sure that the number of GPUs reserved for all containers in a job doesn't exceed\nthe number of available GPUs on the compute resource that the job is launched on.",
            "stability": "experimental",
            "summary": "The number of physical GPUs to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 889
          },
          "name": "gpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 873
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no ulimits",
            "stability": "experimental",
            "summary": "Limits to set for the user this docker container will run as."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 880
          },
          "name": "ulimits",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Ulimit"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsEc2ContainerDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EcsFargateContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A container orchestrated by ECS that uses Fargate resources."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsFargateContainerDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-container-definition.ts",
          "line": 1022
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EcsFargateContainerDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition",
        "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 1017
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a Volume to this container."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 706
          },
          "name": "addVolume",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              }
            }
          ]
        }
      ],
      "name": "EcsFargateContainerDefinition",
      "properties": [
        {
          "docs": {
            "remarks": "Each vCPU is equivalent to 1,024 CPU shares.\nFor containers running on EC2 resources, you must specify at least one vCPU.",
            "stability": "experimental",
            "summary": "The number of vCPUs reserved for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 579
          },
          "name": "cpu",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role used by Amazon ECS container and AWS Fargate agents to make AWS API calls on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 583
          },
          "name": "executionRole",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 578
          },
          "name": "image",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "docs": {
            "remarks": "If your container attempts to exceed the memory specified, the container is terminated.\nYou must specify at least 4 MiB of memory for a job.",
            "stability": "experimental",
            "summary": "The memory hard limit present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 580
          },
          "name": "memory",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "remarks": "Automatically added to the job definition.",
            "stability": "experimental",
            "summary": "The volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 590
          },
          "name": "volumes",
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet\n(for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet.",
            "stability": "experimental",
            "summary": "Indicates whether the job has a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 1019
          },
          "name": "assignPublicIp",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command that's passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 581
          },
          "name": "command",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Cannot start with `AWS_BATCH`.\nWe don't recommend using plaintext environment variables for sensitive information, such as credential data.",
            "stability": "experimental",
            "summary": "The environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 582
          },
          "name": "environment",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The size for ephemeral storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 1020
          },
          "name": "ephemeralStorageSize",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Which version of Fargate to use when running this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 1018
          },
          "name": "fargatePlatformVersion",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.FargatePlatformVersion"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role that the container can assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 584
          },
          "name": "jobRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Linux-specific modifications that are applied to the container, such as details for device mappings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 585
          },
          "name": "linuxParameters",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.LinuxParameters"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The configuration of the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 586
          },
          "name": "logDriverConfig",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.LogDriverConfig"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Gives the container readonly access to its root filesystem."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 587
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Allows your job definitions\nto reference the secret by the environment variable name defined in this property.",
            "stability": "experimental",
            "summary": "A map from environment variable names to the secrets for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 588
          },
          "name": "secrets",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The user name to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 589
          },
          "name": "user",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsFargateContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.EcsFargateContainerDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure an EcsFargateContainerDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsFargateContainerDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EcsContainerDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 987
      },
      "name": "EcsFargateContainerDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet\n(for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet.",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html",
            "stability": "experimental",
            "summary": "Indicates whether the job has a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 997
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 20 GiB",
            "stability": "experimental",
            "summary": "The size for ephemeral storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 1011
          },
          "name": "ephemeralStorageSize",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LATEST",
            "stability": "experimental",
            "summary": "Which version of Fargate to use when running this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 1004
          },
          "name": "fargatePlatformVersion",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.FargatePlatformVersion"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsFargateContainerDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EcsJobDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::JobDefinition"
        },
        "stability": "experimental",
        "summary": "A JobDefinition that uses ECS orchestration."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsJobDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-job-definition.ts",
          "line": 84
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EcsJobDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IJobDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-job-definition.ts",
        "line": 58
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import a JobDefinition by its arn."
          },
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 62
          },
          "name": "fromJobDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "jobDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IJobDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a RetryStrategy to this JobDefinition."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 259
          },
          "name": "addRetryStrategy",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "parameters": [
            {
              "name": "strategy",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Grants the `batch:submitJob` permission to the identity on both this job definition and the `queue`."
          },
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 110
          },
          "name": "grantSubmitJob",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            },
            {
              "name": "queue",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.IJobQueue"
              }
            }
          ]
        }
      ],
      "name": "EcsJobDefinition",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The container that this job will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 78
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 81
          },
          "name": "jobDefinitionArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 82
          },
          "name": "jobDefinitionName",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines the retry behavior for this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 243
          },
          "name": "retryStrategies",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The default parameters passed to the container These parameters can be referenced in the `command` that you give to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 241
          },
          "name": "parameters",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether to propogate tags from the JobDefinition to the ECS task that Batch spawns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 79
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "The job is retried on failure the same number of attempts as the value.",
            "stability": "experimental",
            "summary": "The number of times to retry a job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 242
          },
          "name": "retryAttempts",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "Only used in Fairshare Scheduling\nto decide which job to run first when there are multiple jobs\nwith the same share identifier.",
            "stability": "experimental",
            "summary": "The priority of this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 244
          },
          "name": "schedulingPriority",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "After the amount of time you specify passes,\nBatch terminates your jobs if they aren't finished.",
            "stability": "experimental",
            "summary": "The timeout time for jobs that are submitted with this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 245
          },
          "name": "timeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/ecs-job-definition:EcsJobDefinition"
    },
    "@aws-cdk/aws-batch-alpha.EcsJobDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for EcsJobDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsJobDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.JobDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-job-definition.ts",
        "line": 38
      },
      "name": "EcsJobDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The container that this job will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 42
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to propogate tags from the JobDefinition to the ECS task that Batch spawns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-job-definition.ts",
            "line": 50
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-job-definition:EcsJobDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EcsMachineImage": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A Batch MachineImage that is compatible with ECS."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImage",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 367
      },
      "name": "EcsMachineImage",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- chosen by batch",
            "stability": "experimental",
            "summary": "The machine image to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 361
          },
          "name": "image",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IMachineImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'ECS_AL2' for non-gpu instances, 'ECS_AL2_NVIDIA' for gpu instances",
            "stability": "experimental",
            "summary": "Tells Batch which instance type to launch this image on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 373
          },
          "name": "imageType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImageType"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:EcsMachineImage"
    },
    "@aws-cdk/aws-batch-alpha.EcsMachineImageType": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Maps the image to instance types."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImageType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 391
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tells Batch that this machine image runs on non-GPU instances."
          },
          "name": "ECS_AL2"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tells Batch that this machine image runs on GPU instances."
          },
          "name": "ECS_AL2_NVIDIA"
        }
      ],
      "name": "EcsMachineImageType",
      "symbolId": "lib/managed-compute-environment:EcsMachineImageType"
    },
    "@aws-cdk/aws-batch-alpha.EcsVolume": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a Volume that can be mounted to a container that uses ECS."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-container-definition.ts",
          "line": 162
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EcsVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 126
      },
      "methods": [
        {
          "docs": {
            "remarks": "this volume can grow and shrink as needed",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html",
            "stability": "experimental",
            "summary": "Creates a Volume that uses an AWS Elastic File System (EFS);"
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 132
          },
          "name": "efs",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EfsVolumeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EfsVolume"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This volume will persist on the host at the specified `hostPath`.\nIf the `hostPath` is not specified, Docker will choose the host path. In this case,\nthe data may not persist after the containers that use it stop running.",
            "stability": "experimental",
            "summary": "Creates a Host volume."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 141
          },
          "name": "host",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.HostVolumeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.HostVolume"
            }
          },
          "static": true
        }
      ],
      "name": "EcsVolume",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path on the container that this volume will be mounted to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 153
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 148
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether or not the container has readonly access to this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 160
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsVolume"
    },
    "@aws-cdk/aws-batch-alpha.EcsVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to configure an EcsVolume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EcsVolumeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 104
      },
      "name": "EcsVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the path on the container where this volume is mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 113
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 108
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "if set, the container will have readonly access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 120
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EcsVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.EfsVolume": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "@aws-cdk/aws-batch-alpha.EcsVolume",
      "docs": {
        "remarks": "this volume can grow and shrink as needed",
        "stability": "experimental",
        "summary": "A Volume that uses an AWS Elastic File System (EFS);"
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EfsVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-container-definition.ts",
          "line": 297
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EfsVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 233
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns true if x is an EfsVolume, false otherwise."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 237
          },
          "name": "isEfsVolume",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "EfsVolume",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The EFS File System that supports this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 244
          },
          "name": "fileSystem",
          "type": {
            "fqn": "aws-cdk-lib.aws_efs.IFileSystem"
          }
        },
        {
          "docs": {
            "default": "- no accessPointId",
            "remarks": "If an access point is specified, `rootDirectory` must either be omitted or set to `/`\nwhich enforces the path set on the EFS access point.\nIf an access point is used, `enableTransitEncryption` must be `true`.",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html",
            "stability": "experimental",
            "summary": "The Amazon EFS access point ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 285
          },
          "name": "accessPointId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html",
            "stability": "experimental",
            "summary": "Enables encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 263
          },
          "name": "enableTransitEncryption",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "default": "- root of the EFS File System",
            "remarks": "If this parameter is omitted, the root of the Amazon EFS volume is used instead.\nSpecifying `/` has the same effect as omitting this parameter.\nThe maximum length is 4,096 characters.",
            "stability": "experimental",
            "summary": "The directory within the Amazon EFS file system to mount as the root directory inside the host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 254
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- chosen by the EFS Mount Helper",
            "remarks": "The value must be between 0 and 65,535.",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html",
            "stability": "experimental",
            "summary": "The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 273
          },
          "name": "transitEncryptionPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "default": "false",
            "remarks": "If specified, `enableTransitEncryption` must be `true`.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints",
            "stability": "experimental",
            "summary": "Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 295
          },
          "name": "useJobRole",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EfsVolume"
    },
    "@aws-cdk/aws-batch-alpha.EfsVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for configuring an EfsVolume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EfsVolumeOptions",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EcsVolumeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 172
      },
      "name": "EfsVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The EFS File System that supports this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 176
          },
          "name": "fileSystem",
          "type": {
            "fqn": "aws-cdk-lib.aws_efs.IFileSystem"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no accessPointId",
            "remarks": "If an access point is specified, `rootDirectory` must either be omitted or set to `/`\nwhich enforces the path set on the EFS access point.\nIf an access point is used, `enableTransitEncryption` must be `true`.",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html",
            "stability": "experimental",
            "summary": "The Amazon EFS access point ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 217
          },
          "name": "accessPointId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html",
            "stability": "experimental",
            "summary": "Enables encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 195
          },
          "name": "enableTransitEncryption",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- root of the EFS File System",
            "remarks": "If this parameter is omitted, the root of the Amazon EFS volume is used instead.\nSpecifying `/` has the same effect as omitting this parameter.\nThe maximum length is 4,096 characters.",
            "stability": "experimental",
            "summary": "The directory within the Amazon EFS file system to mount as the root directory inside the host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 186
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- chosen by the EFS Mount Helper",
            "remarks": "The value must be between 0 and 65,535.",
            "see": "https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html",
            "stability": "experimental",
            "summary": "The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 205
          },
          "name": "transitEncryptionPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If specified, `enableTransitEncryption` must be `true`.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints",
            "stability": "experimental",
            "summary": "Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 227
          },
          "name": "useJobRole",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:EfsVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.EksContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A container that can be run with EKS orchestration on EC2 resources."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-container-definition.ts",
          "line": 555
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEksContainerDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 533
      },
      "methods": [
        {
          "docs": {
            "remarks": "Automatically added to the Pod.",
            "stability": "experimental",
            "summary": "Mount a Volume to this container."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 579
          },
          "name": "addVolume",
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksVolume"
              }
            }
          ]
        }
      ],
      "name": "EksContainerDefinition",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 534
          },
          "name": "image",
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "docs": {
            "remarks": "Automatically added to the Pod.",
            "stability": "experimental",
            "summary": "The Volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 551
          },
          "name": "volumes",
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksVolume"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "If this isn't specified, the CMD of the container image is used.\nThis corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to \"$(NAME1)\" and the NAME1 environment variable doesn't exist,\nthe command string will remain \"$(NAME1).\" $$ is replaced with $, and the resulting string isn't expanded.\nor example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists.",
            "stability": "experimental",
            "summary": "An array of arguments to the entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 535
          },
          "name": "args",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "This isn't run within a shell.\nIf this isn't specified, the `ENTRYPOINT` of the container image is used.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to `\"$(NAME1)\"` and the `NAME1` environment variable doesn't exist,\nthe command string will remain `\"$(NAME1).\"` `$$` is replaced with `$` and the resulting string isn't expanded.\nFor example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists.\n\nThe entrypoint can't be updated.",
            "stability": "experimental",
            "summary": "The entrypoint for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 536
          },
          "name": "command",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "stability": "experimental",
            "summary": "The hard limit of CPUs to present to this container. Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 542
          },
          "name": "cpuLimit",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 543
          },
          "name": "cpuReservation",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "*Note*: Environment variables cannot start with \"AWS_BATCH\".\nThis naming convention is reserved for variables that AWS Batch sets.",
            "stability": "experimental",
            "summary": "The environment variables to pass to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 537
          },
          "name": "env",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "stability": "experimental",
            "summary": "The hard limit of GPUs to present to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 544
          },
          "name": "gpuLimit",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 545
          },
          "name": "gpuReservation",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The image pull policy for this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 538
          },
          "name": "imagePullPolicy",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ImagePullPolicy"
          }
        },
        {
          "docs": {
            "remarks": "If your container attempts to exceed the allocated memory, it will be terminated.\n\nMust be larger that 4 MiB\n\nAt least one of `memoryLimit` and `memoryReservation` is required\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "stability": "experimental",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 540
          },
          "name": "memoryLimit",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "remarks": "Your container will be given at least this much memory, but may consume more.\n\nMust be larger that 4 MiB\n\nWhen system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of `memoryLimit` and `memoryReservation` is required.\nIf both are specified, then `memoryLimit` must be equal to `memoryReservation`\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "stability": "experimental",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 541
          },
          "name": "memoryReservation",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 539
          },
          "name": "name",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "The level of permissions are similar to the root user permissions.\n\nThis parameter maps to `privileged` policy in the Privileged pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "stability": "experimental",
            "summary": "If specified, gives this container elevated permissions on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 546
          },
          "name": "privileged",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "This parameter maps to `ReadOnlyRootFilesystem` policy in the Volumes and file systems pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "stability": "experimental",
            "summary": "If specified, gives this container readonly access to its root file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 547
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If this parameter isn't specified, the default is the group that's specified in the image metadata.\nThis parameter maps to `RunAsGroup` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "stability": "experimental",
            "summary": "If specified, the container is run as the specified group ID (`gid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 548
          },
          "name": "runAsGroup",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "Otherwise, no such rule is enforced.\nThis parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "stability": "experimental",
            "summary": "If specified, the container is run as a user with a `uid` other than 0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 549
          },
          "name": "runAsRoot",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "This parameter maps to `RunAsUser` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "stability": "experimental",
            "summary": "If specified, this container is run as the specified user ID (`uid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 550
          },
          "name": "runAsUser",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EksContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.EksContainerDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure an EksContainerDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 287
      },
      "name": "EksContainerDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 291
          },
          "name": "image",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no args",
            "remarks": "If this isn't specified, the CMD of the container image is used.\nThis corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to \"$(NAME1)\" and the NAME1 environment variable doesn't exist,\nthe command string will remain \"$(NAME1).\" $$ is replaced with $, and the resulting string isn't expanded.\nor example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists.",
            "see": "https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/",
            "stability": "experimental",
            "summary": "An array of arguments to the entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 308
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no command",
            "remarks": "This isn't run within a shell.\nIf this isn't specified, the `ENTRYPOINT` of the container image is used.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to `\"$(NAME1)\"` and the `NAME1` environment variable doesn't exist,\nthe command string will remain `\"$(NAME1).\"` `$$` is replaced with `$` and the resulting string isn't expanded.\nFor example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists.\n\nThe entrypoint can't be updated.",
            "see": "https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint",
            "stability": "experimental",
            "summary": "The entrypoint for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 327
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No CPU limit",
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The hard limit of CPUs to present to this container. Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 411
          },
          "name": "cpuLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No CPUs reserved",
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 426
          },
          "name": "cpuReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "remarks": "*Note*: Environment variables cannot start with \"AWS_BATCH\".\nThis naming convention is reserved for variables that AWS Batch sets.",
            "stability": "experimental",
            "summary": "The environment variables to pass to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 337
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPU limit",
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The hard limit of GPUs to present to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 439
          },
          "name": "gpuLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPUs reserved",
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 453
          },
          "name": "gpuReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `ALWAYS` if the `:latest` tag is specified, `IF_NOT_PRESENT` otherwise",
            "see": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
            "stability": "experimental",
            "summary": "The image pull policy for this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 346
          },
          "name": "imagePullPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ImagePullPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit",
            "remarks": "If your container attempts to exceed the allocated memory, it will be terminated.\n\nMust be larger that 4 MiB\n\nAt least one of `memoryLimit` and `memoryReservation` is required\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html",
            "stability": "experimental",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 371
          },
          "name": "memoryLimit",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved",
            "remarks": "Your container will be given at least this much memory, but may consume more.\n\nMust be larger that 4 MiB\n\nWhen system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of `memoryLimit` and `memoryReservation` is required.\nIf both are specified, then `memoryLimit` must be equal to `memoryReservation`\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html",
            "stability": "experimental",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 396
          },
          "name": "memoryReservation",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": ": `'Default'`",
            "stability": "experimental",
            "summary": "The name of this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 353
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "The level of permissions are similar to the root user permissions.\n\nThis parameter maps to `privileged` policy in the Privileged pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems",
            "stability": "experimental",
            "summary": "If specified, gives this container elevated permissions on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 467
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This parameter maps to `ReadOnlyRootFilesystem` policy in the Volumes and file systems pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems",
            "stability": "experimental",
            "summary": "If specified, gives this container readonly access to its root file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 480
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "If this parameter isn't specified, the default is the group that's specified in the image metadata.\nThis parameter maps to `RunAsGroup` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, the container is run as the specified group ID (`gid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 493
          },
          "name": "runAsGroup",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the container is *not* required to run as a non-root user",
            "remarks": "Otherwise, no such rule is enforced.\nThis parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, the container is run as a user with a `uid` other than 0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 505
          },
          "name": "runAsRoot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the user that is specified in the image metadata.",
            "remarks": "This parameter maps to `RunAsUser` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, this container is run as the specified user ID (`uid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 517
          },
          "name": "runAsUser",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no volumes",
            "remarks": "Automatically added to the Pod.",
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/",
            "stability": "experimental",
            "summary": "The Volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 527
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksVolume"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EksContainerDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EksJobDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::JobDefinition"
        },
        "stability": "experimental",
        "summary": "A JobDefinition that uses Eks orchestration."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksJobDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-job-definition.ts",
          "line": 151
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EksJobDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
        "@aws-cdk/aws-batch-alpha.IJobDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-job-definition.ts",
        "line": 125
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an EksJobDefinition by its arn."
          },
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 129
          },
          "name": "fromEksJobDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "eksJobDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IEksJobDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a RetryStrategy to this JobDefinition."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 259
          },
          "name": "addRetryStrategy",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "parameters": [
            {
              "name": "strategy",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              }
            }
          ]
        }
      ],
      "name": "EksJobDefinition",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The container this Job Definition will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 143
          },
          "name": "container",
          "overrides": "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinition"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 148
          },
          "name": "jobDefinitionArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 149
          },
          "name": "jobDefinitionName",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines the retry behavior for this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 243
          },
          "name": "retryStrategies",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The DNS Policy of the pod used by this Job Definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 144
          },
          "name": "dnsPolicy",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.DnsPolicy"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The default parameters passed to the container These parameters can be referenced in the `command` that you give to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 241
          },
          "name": "parameters",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "remarks": "The job is retried on failure the same number of attempts as the value.",
            "stability": "experimental",
            "summary": "The number of times to retry a job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 242
          },
          "name": "retryAttempts",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "Only used in Fairshare Scheduling\nto decide which job to run first when there are multiple jobs\nwith the same share identifier.",
            "stability": "experimental",
            "summary": "The priority of this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 244
          },
          "name": "schedulingPriority",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "service accounts are Kubernetes method of identification and authentication,\nroughly analogous to IAM users.",
            "stability": "experimental",
            "summary": "The name of the service account that's used to run the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 146
          },
          "name": "serviceAccount",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "After the amount of time you specify passes,\nBatch terminates your jobs if they aren't finished.",
            "stability": "experimental",
            "summary": "The timeout time for jobs that are submitted with this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 245
          },
          "name": "timeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "remarks": "Otherwise, the Kubernetes pod networking model is enabled.\nMost AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.",
            "stability": "experimental",
            "summary": "If specified, the Pod used by this Job Definition will use the host's network IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 145
          },
          "name": "useHostNetwork",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-job-definition:EksJobDefinition"
    },
    "@aws-cdk/aws-batch-alpha.EksJobDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for EksJobDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksJobDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.JobDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-job-definition.ts",
        "line": 54
      },
      "name": "EksJobDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The container this Job Definition will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 58
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "`DnsPolicy.CLUSTER_FIRST`",
            "see": "https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy",
            "stability": "experimental",
            "summary": "The DNS Policy of the pod used by this Job Definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 67
          },
          "name": "dnsPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.DnsPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the default service account of the container",
            "remarks": "service accounts are Kubernetes method of identification and authentication,\nroughly analogous to IAM users.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html",
            "stability": "experimental",
            "summary": "The name of the service account that's used to run the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 92
          },
          "name": "serviceAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Otherwise, the Kubernetes pod networking model is enabled.\nMost AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.",
            "see": "https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking",
            "stability": "experimental",
            "summary": "If specified, the Pod used by this Job Definition will use the host's network IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 79
          },
          "name": "useHostNetwork",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-job-definition:EksJobDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.EksMachineImage": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A Batch MachineImage that is compatible with EKS."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksMachineImage",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 379
      },
      "name": "EksMachineImage",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- chosen by batch",
            "stability": "experimental",
            "summary": "The machine image to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 361
          },
          "name": "image",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IMachineImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'EKS_AL2' for non-gpu instances, 'EKS_AL2_NVIDIA' for gpu instances",
            "stability": "experimental",
            "summary": "Tells Batch which instance type to launch this image on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 385
          },
          "name": "imageType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EksMachineImageType"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:EksMachineImage"
    },
    "@aws-cdk/aws-batch-alpha.EksMachineImageType": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Maps the image to instance types."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksMachineImageType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 406
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tells Batch that this machine image runs on non-GPU instances."
          },
          "name": "EKS_AL2"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tells Batch that this machine image runs on GPU instances."
          },
          "name": "EKS_AL2_NVIDIA"
        }
      ],
      "name": "EksMachineImageType",
      "symbolId": "lib/managed-compute-environment:EksMachineImageType"
    },
    "@aws-cdk/aws-batch-alpha.EksVolume": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A Volume that can be mounted to a container supported by EKS."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-container-definition.ts",
          "line": 717
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EksVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 668
      },
      "methods": [
        {
          "docs": {
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
            "stability": "experimental",
            "summary": "Creates a Kubernetes EmptyDir volume."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 674
          },
          "name": "emptyDir",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirVolumeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirVolume"
            }
          },
          "static": true
        },
        {
          "docs": {
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
            "stability": "experimental",
            "summary": "Creates a Kubernetes HostPath volume."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 682
          },
          "name": "hostPath",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.HostPathVolumeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.HostPathVolume"
            }
          },
          "static": true
        },
        {
          "docs": {
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/#secret",
            "stability": "experimental",
            "summary": "Creates a Kubernetes Secret volume."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 690
          },
          "name": "secret",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.SecretPathVolumeOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.SecretPathVolume"
            }
          },
          "static": true
        }
      ],
      "name": "EksVolume",
      "properties": [
        {
          "docs": {
            "remarks": "The name must be a valid DNS subdomain name.",
            "see": "https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names",
            "stability": "experimental",
            "summary": "The name of this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 700
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- the container is not mounted",
            "stability": "experimental",
            "summary": "The path on the container where the container is mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 707
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "false",
            "remarks": "Otherwise, the container has read/write access.",
            "stability": "experimental",
            "summary": "If specified, the container has readonly access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 715
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EksVolume"
    },
    "@aws-cdk/aws-batch-alpha.EksVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to configure an EksVolume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EksVolumeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 640
      },
      "name": "EksVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The name must be a valid DNS subdomain name.",
            "see": "https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names",
            "stability": "experimental",
            "summary": "The name of this volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 647
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the volume is not mounted",
            "stability": "experimental",
            "summary": "The path on the container where the volume is mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 654
          },
          "name": "mountPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Otherwise, the container has read/write access.",
            "stability": "experimental",
            "summary": "If specified, the container has readonly access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 662
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EksVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.EmptyDirMediumType": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "What medium the volume will live in."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirMediumType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 748
      },
      "members": [
        {
          "docs": {
            "remarks": "Items written here will survive node reboots.",
            "stability": "experimental",
            "summary": "Use the disk storage of the node."
          },
          "name": "DISK"
        },
        {
          "docs": {
            "remarks": "Items written here will *not* survive node reboots.",
            "stability": "experimental",
            "summary": "Use the `tmpfs` volume that is backed by RAM of the node."
          },
          "name": "MEMORY"
        }
      ],
      "name": "EmptyDirMediumType",
      "symbolId": "lib/eks-container-definition:EmptyDirMediumType"
    },
    "@aws-cdk/aws-batch-alpha.EmptyDirVolume": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "@aws-cdk/aws-batch-alpha.EksVolume",
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
        "stability": "experimental",
        "summary": "A Kubernetes EmptyDir volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-container-definition.ts",
          "line": 789
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 767
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns `true` if `x` is an EmptyDirVolume, `false` otherwise."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 771
          },
          "name": "isEmptyDirVolume",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "EmptyDirVolume",
      "properties": [
        {
          "docs": {
            "default": "`EmptyDirMediumType.DISK`",
            "stability": "experimental",
            "summary": "The storage type to use for this Volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 780
          },
          "name": "medium",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirMediumType"
          }
        },
        {
          "docs": {
            "default": "- no size limit",
            "stability": "experimental",
            "summary": "The maximum size for this Volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 787
          },
          "name": "sizeLimit",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EmptyDirVolume"
    },
    "@aws-cdk/aws-batch-alpha.EmptyDirVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
        "stability": "experimental",
        "summary": "Options for a Kubernetes EmptyDir volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirVolumeOptions",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EksVolumeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 729
      },
      "name": "EmptyDirVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "`EmptyDirMediumType.DISK`",
            "stability": "experimental",
            "summary": "The storage type to use for this Volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 735
          },
          "name": "medium",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EmptyDirMediumType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no size limit",
            "stability": "experimental",
            "summary": "The maximum size for this Volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 742
          },
          "name": "sizeLimit",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:EmptyDirVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::SchedulingPolicy"
        },
        "remarks": "The Faireshare Scheduling Policy ensures that each share gets a certain amount of vCPUs.\nThe scheduler does this by deciding how many Jobs of each share to schedule *relative to how many jobs of\neach share are currently being executed by the ComputeEnvironment*. The weight factors associated with\neach share determine the ratio of vCPUs allocated; see the readme for a more in-depth discussion of\nfairshare policies.",
        "stability": "experimental",
        "summary": "Represents a Fairshare Scheduling Policy. Instructs the scheduler to allocate ComputeEnvironment vCPUs based on Job shareIdentifiers."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/scheduling-policy.ts",
          "line": 212
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicyProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy",
        "@aws-cdk/aws-batch-alpha.ISchedulingPolicy"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/scheduling-policy.ts",
        "line": 191
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reference an exisiting Scheduling Policy by its ARN."
          },
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 195
          },
          "name": "fromFairshareSchedulingPolicyArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fairshareSchedulingPolicyArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a share this to this Fairshare SchedulingPolicy."
          },
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 242
          },
          "name": "addShare",
          "parameters": [
            {
              "name": "share",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Share"
              }
            }
          ]
        }
      ],
      "name": "FairshareSchedulingPolicy",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The arn of this scheduling policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 209
          },
          "name": "schedulingPolicyArn",
          "overrides": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this scheduling policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 210
          },
          "name": "schedulingPolicyName",
          "overrides": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "*Note*: It is possible to submit Jobs to the queue with Share Identifiers that\nare not recognized by the Scheduling Policy.",
            "stability": "experimental",
            "summary": "The shares that this Scheduling Policy applies to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 208
          },
          "name": "shares",
          "overrides": "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Share"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "The percentage reserved is defined by the Scheduler as:\n`(computeReservation/100)^ActiveFairShares` where `ActiveFairShares` is the number of active fair share identifiers.\n\nFor example, a computeReservation value of 50 indicates that AWS Batch reserves 50% of the\nmaximum available vCPU if there's only one fair share identifier.\nIt reserves 25% if there are two fair share identifiers.\nIt reserves 12.5% if there are three fair share identifiers.\n\nA computeReservation value of 25 indicates that AWS Batch should reserve 25% of the\nmaximum available vCPU if there's only one fair share identifier,\n6.25% if there are two fair share identifiers,\nand 1.56% if there are three fair share identifiers.",
            "stability": "experimental",
            "summary": "Used to calculate the percentage of the maximum available vCPU to reserve for share identifiers not present in the Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 206
          },
          "name": "computeReservation",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "The usage is used to calculate a fair share percentage for each fair share identifier currently in the Queue.\nA value of zero (0) indicates that only current usage is measured.\nThe decay is linear and gives preference to newer jobs.\n\nThe maximum supported value is 604800 seconds (1 week).",
            "stability": "experimental",
            "summary": "The amount of time to use to measure the usage of each job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 207
          },
          "name": "shareDecay",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/scheduling-policy:FairshareSchedulingPolicy"
    },
    "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicyProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Fairshare SchedulingPolicy configuration."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/scheduling-policy.ts",
        "line": 136
      },
      "name": "FairshareSchedulingPolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no vCPU is reserved",
            "remarks": "The percentage reserved is defined by the Scheduler as:\n`(computeReservation/100)^ActiveFairShares` where `ActiveFairShares` is the number of active fair share identifiers.\n\nFor example, a computeReservation value of 50 indicates that AWS Batch reserves 50% of the\nmaximum available vCPU if there's only one fair share identifier.\nIt reserves 25% if there are two fair share identifiers.\nIt reserves 12.5% if there are three fair share identifiers.\n\nA computeReservation value of 25 indicates that AWS Batch should reserve 25% of the\nmaximum available vCPU if there's only one fair share identifier,\n6.25% if there are two fair share identifiers,\nand 1.56% if there are three fair share identifiers.",
            "stability": "experimental",
            "summary": "Used to calculate the percentage of the maximum available vCPU to reserve for share identifiers not present in the Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 155
          },
          "name": "computeReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generated by CloudFormation",
            "stability": "experimental",
            "summary": "The name of this SchedulingPolicy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 34
          },
          "name": "schedulingPolicyName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0: only the current job usage is considered",
            "remarks": "The usage is used to calculate a fair share percentage for each fair share identifier currently in the Queue.\nA value of zero (0) indicates that only current usage is measured.\nThe decay is linear and gives preference to newer jobs.\n\nThe maximum supported value is 604800 seconds (1 week).",
            "stability": "experimental",
            "summary": "The amount of time to use to measure the usage of each job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 167
          },
          "name": "shareDecay",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no shares",
            "remarks": "*Note*: It is possible to submit Jobs to the queue with Share Identifiers that\nare not recognized by the Scheduling Policy.",
            "stability": "experimental",
            "summary": "The shares that this Scheduling Policy applies to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 176
          },
          "name": "shares",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Share"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/scheduling-policy:FairshareSchedulingPolicyProps"
    },
    "@aws-cdk/aws-batch-alpha.FargateComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::ComputeEnvironment"
        },
        "stability": "experimental",
        "summary": "A ManagedComputeEnvironment that uses ECS orchestration on Fargate instances."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.FargateComputeEnvironment",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/managed-compute-environment.ts",
          "line": 1096
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.FargateComputeEnvironmentProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IFargateComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 1072
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reference an existing FargateComputeEnvironment by its arn."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 1076
          },
          "name": "fromFargateComputeEnvironmentArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fargateComputeEnvironmentArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IFargateComputeEnvironment"
            }
          },
          "static": true
        }
      ],
      "name": "FargateComputeEnvironment",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this compute environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 1094
          },
          "name": "computeEnvironmentArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 1093
          },
          "name": "computeEnvironmentName",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The network connections associated with this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 210
          },
          "name": "connections",
          "overrides": "aws-cdk-lib.aws_ec2.IConnectable",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.Connections"
          }
        },
        {
          "docs": {
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 92
          },
          "name": "enabled",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "*Note*: if this Compute Environment uses EC2 resources (not Fargate) with either `AllocationStrategy.BEST_FIT_PROGRESSIVE` or\n`AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`, or `AllocationStrategy.BEST_FIT` with Spot instances,\nThe scheduler may exceed this number by at most one of the instances specified in `instanceTypes`\nor `instanceClasses`.",
            "stability": "experimental",
            "summary": "The maximum vCpus this `ManagedComputeEnvironment` can scale up to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 201
          },
          "name": "maxvCpus",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The security groups this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 206
          },
          "name": "securityGroups",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "TagManager to set, remove and format tags."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 208
          },
          "name": "tags",
          "overrides": "aws-cdk-lib.ITaggable",
          "type": {
            "fqn": "aws-cdk-lib.TagManager"
          }
        },
        {
          "docs": {
            "remarks": "To enable more properties to be updated,\nset this property to `false`. When changing the value of this property to false,\ndo not change any other properties at the same time.\nIf other properties are changed at the same time,\nand the change needs to be rolled back but it can't,\nit's possible for the stack to go into the UPDATE_ROLLBACK_FAILED state.\nYou can't update a stack that is in the UPDATE_ROLLBACK_FAILED state.\nHowever, if you can continue to roll it back,\nyou can return the stack to its original settings and then try to update it again.\n\nThe properties which require a replacement of the Compute Environment are:",
            "stability": "experimental",
            "summary": "Specifies whether this Compute Environment is replaced if an update is made that requires replacing its instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 202
          },
          "name": "replaceComputeEnvironment",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 91
          },
          "name": "serviceRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "Spot instances are less expensive EC2 instances that can be\nreclaimed by EC2 at any time; your job will be given two minutes\nof notice before reclamation.",
            "stability": "experimental",
            "summary": "Whether or not to use spot instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 203
          },
          "name": "spot",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If this is enabled, any terminated jobs may be retried, depending on the job's\nretry policy.",
            "stability": "experimental",
            "summary": "Whether or not any running jobs will be immediately terminated when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 205
          },
          "name": "terminateOnUpdate",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If so,\nwhen an infrastructure update is triggered, any running jobs\nwill be allowed to run until `updateTimeout` has expired.",
            "stability": "experimental",
            "summary": "Only meaningful if `terminateOnUpdate` is `false`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 204
          },
          "name": "updateTimeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "remarks": "If you specify a specific AMI, this property will be ignored.",
            "stability": "experimental",
            "summary": "Whether or not the AMI is updated to the latest one supported by Batch when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 207
          },
          "name": "updateToLatestImageVersion",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:FargateComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.FargateComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for a FargateComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.FargateComputeEnvironmentProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ManagedComputeEnvironmentProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 1065
      },
      "name": "FargateComputeEnvironmentProps",
      "symbolId": "lib/managed-compute-environment:FargateComputeEnvironmentProps"
    },
    "@aws-cdk/aws-batch-alpha.HostPathVolume": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "@aws-cdk/aws-batch-alpha.EksVolume",
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
        "stability": "experimental",
        "summary": "A Kubernetes HostPath volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.HostPathVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-container-definition.ts",
          "line": 840
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.HostPathVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 823
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "returns `true` if `x` is a HostPathVolume, `false` otherwise."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 827
          },
          "name": "isHostPathVolume",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "HostPathVolume",
      "properties": [
        {
          "docs": {
            "remarks": "*Note*: HothPath Volumes present many security risks, and should be avoided when possible.",
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
            "stability": "experimental",
            "summary": "The path of the file or directory on the host to mount into containers on the pod."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 838
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:HostPathVolume"
    },
    "@aws-cdk/aws-batch-alpha.HostPathVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
        "stability": "experimental",
        "summary": "Options for a kubernetes HostPath volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.HostPathVolumeOptions",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EksVolumeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 807
      },
      "name": "HostPathVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "*Note*: HothPath Volumes present many security risks, and should be avoided when possible.",
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath",
            "stability": "experimental",
            "summary": "The path of the file or directory on the host to mount into containers on the pod."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 815
          },
          "name": "hostPath",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:HostPathVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.HostVolume": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "@aws-cdk/aws-batch-alpha.EcsVolume",
      "docs": {
        "remarks": "This volume will persist on the host at the specified `hostPath`.\nIf the `hostPath` is not specified, Docker will choose the host path. In this case,\nthe data may not persist after the containers that use it stop running.",
        "stability": "experimental",
        "summary": "Creates a Host volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.HostVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/ecs-container-definition.ts",
          "line": 346
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.HostVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 333
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "returns `true` if `x` is a `HostVolume`, `false` otherwise."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 337
          },
          "name": "isHostVolume",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "HostVolume",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path on the host machine this container will have access to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 344
          },
          "name": "hostPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:HostVolume"
    },
    "@aws-cdk/aws-batch-alpha.HostVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for configuring an ECS HostVolume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.HostVolumeOptions",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EcsVolumeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 318
      },
      "name": "HostVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Docker will choose the host path.\nThe data may not persist after the containers that use it stop running.",
            "stability": "experimental",
            "summary": "The path on the host machine this container will have access to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 325
          },
          "name": "hostPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:HostVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.IComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a ComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compute-environment-base.ts",
        "line": 8
      },
      "name": "IComputeEnvironment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of this compute environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 21
          },
          "name": "computeEnvironmentArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 14
          },
          "name": "computeEnvironmentName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 44
          },
          "name": "enabled",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a serviceRole will be created for managed CEs, none for unmanaged CEs",
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 29
          },
          "name": "serviceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/compute-environment-base:IComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A container that can be run with ECS orchestration."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 361
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a Volume to this container."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 466
          },
          "name": "addVolume",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              }
            }
          ]
        }
      ],
      "name": "IEcsContainerDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Each vCPU is equivalent to 1,024 CPU shares.\nFor containers running on EC2 resources, you must specify at least one vCPU.",
            "stability": "experimental",
            "summary": "The number of vCPUs reserved for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 372
          },
          "name": "cpu",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html",
            "stability": "experimental",
            "summary": "The role used by Amazon ECS container and AWS Fargate agents to make AWS API calls on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 402
          },
          "name": "executionRole",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 365
          },
          "name": "image",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If your container attempts to exceed the memory specified, the container is terminated.\nYou must specify at least 4 MiB of memory for a job.",
            "stability": "experimental",
            "summary": "The memory hard limit present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 379
          },
          "name": "memory",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no volumes",
            "remarks": "Automatically added to the job definition.",
            "stability": "experimental",
            "summary": "The volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 454
          },
          "name": "volumes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsVolume"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://docs.docker.com/engine/reference/builder/#cmd",
            "stability": "experimental",
            "summary": "The command that's passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 386
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "remarks": "Cannot start with `AWS_BATCH`.\nWe don't recommend using plaintext environment variables for sensitive information, such as credential data.",
            "stability": "experimental",
            "summary": "The environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 395
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no jobRole",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html",
            "stability": "experimental",
            "summary": "The role that the container can assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 411
          },
          "name": "jobRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "experimental",
            "summary": "Linux-specific modifications that are applied to the container, such as details for device mappings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 418
          },
          "name": "linuxParameters",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.LinuxParameters"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The configuration of the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 423
          },
          "name": "logDriverConfig",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.LogDriverConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Gives the container readonly access to its root filesystem."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 430
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no secrets",
            "remarks": "Allows your job definitions\nto reference the secret by the environment variable name defined in this property.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html",
            "stability": "experimental",
            "summary": "A map from environment variable names to the secrets for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 440
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no user",
            "stability": "experimental",
            "summary": "The user name to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 447
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:IEcsContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A container orchestrated by ECS that uses EC2 resources."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IEcsEc2ContainerDefinition",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 836
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a ulimit to this container."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 861
          },
          "name": "addUlimit",
          "parameters": [
            {
              "name": "ulimit",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Ulimit"
              }
            }
          ]
        }
      ],
      "name": "IEcsEc2ContainerDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Limits to set for the user this docker container will run as."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 847
          },
          "name": "ulimits",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Ulimit"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no gpus",
            "remarks": "Make sure that the number of GPUs reserved for all containers in a job doesn't exceed\nthe number of available GPUs on the compute resource that the job is launched on.",
            "stability": "experimental",
            "summary": "The number of physical GPUs to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 856
          },
          "name": "gpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 842
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:IEcsEc2ContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A container orchestrated by ECS that uses Fargate resources and is orchestrated by ECS."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IEcsFargateContainerDefinition",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 957
      },
      "name": "IEcsFargateContainerDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet\n(for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet.",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html",
            "stability": "experimental",
            "summary": "Indicates whether the job has a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 967
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 20 GiB",
            "stability": "experimental",
            "summary": "The size for ephemeral storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 981
          },
          "name": "ephemeralStorageSize",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LATEST",
            "stability": "experimental",
            "summary": "Which version of Fargate to use when running this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 974
          },
          "name": "fargatePlatformVersion",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.FargatePlatformVersion"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:IEcsFargateContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IEksContainerDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A container that can be run with EKS orchestration on EC2 resources."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IEksContainerDefinition",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 13
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Automatically added to the Pod.",
            "stability": "experimental",
            "summary": "Mount a Volume to this container."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 250
          },
          "name": "addVolume",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksVolume"
              }
            }
          ]
        }
      ],
      "name": "IEksContainerDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The image that this container will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 17
          },
          "name": "image",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Automatically added to the Pod.",
            "see": "https://kubernetes.io/docs/concepts/storage/volumes/",
            "stability": "experimental",
            "summary": "The Volumes to mount to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 245
          },
          "name": "volumes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksVolume"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If this isn't specified, the CMD of the container image is used.\nThis corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to \"$(NAME1)\" and the NAME1 environment variable doesn't exist,\nthe command string will remain \"$(NAME1).\" $$ is replaced with $, and the resulting string isn't expanded.\nor example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists.",
            "see": "https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/",
            "stability": "experimental",
            "summary": "An array of arguments to the entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 32
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This isn't run within a shell.\nIf this isn't specified, the `ENTRYPOINT` of the container image is used.\nEnvironment variable references are expanded using the container's environment.\nIf the referenced environment variable doesn't exist, the reference in the command isn't changed.\nFor example, if the reference is to `\"$(NAME1)\"` and the `NAME1` environment variable doesn't exist,\nthe command string will remain `\"$(NAME1).\"` `$$` is replaced with `$` and the resulting string isn't expanded.\nFor example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists.\n\nThe entrypoint can't be updated.",
            "see": "https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint",
            "stability": "experimental",
            "summary": "The entrypoint for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 49
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No CPU limit",
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The hard limit of CPUs to present to this container. Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 131
          },
          "name": "cpuLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No CPUs reserved",
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nAt least one of `cpuReservation` and `cpuLimit` is required.\nIf both are specified, then `cpuLimit` must be at least as large as `cpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 146
          },
          "name": "cpuReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "*Note*: Environment variables cannot start with \"AWS_BATCH\".\nThis naming convention is reserved for variables that AWS Batch sets.",
            "stability": "experimental",
            "summary": "The environment variables to pass to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 57
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPU limit",
            "remarks": "If your container attempts to exceed this limit, it will be terminated.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The hard limit of GPUs to present to this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 159
          },
          "name": "gpuLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPUs reserved",
            "remarks": "The container will given at least this many CPUs, but may consume more.\n\nIf both `gpuReservation` and `gpuLimit` are specified, then `gpuLimit` must be equal to `gpuReservation`.",
            "see": "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "stability": "experimental",
            "summary": "The soft limit of CPUs to reserve for the container Must be an even multiple of 0.25."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 173
          },
          "name": "gpuReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `ALWAYS` if the `:latest` tag is specified, `IF_NOT_PRESENT` otherwise",
            "see": "https://kubernetes.io/docs/concepts/containers/images/#updating-images",
            "stability": "experimental",
            "summary": "The image pull policy for this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 66
          },
          "name": "imagePullPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ImagePullPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit",
            "remarks": "If your container attempts to exceed the allocated memory, it will be terminated.\n\nMust be larger that 4 MiB\n\nAt least one of `memoryLimit` and `memoryReservation` is required\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html",
            "stability": "experimental",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 91
          },
          "name": "memoryLimit",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved",
            "remarks": "Your container will be given at least this much memory, but may consume more.\n\nMust be larger that 4 MiB\n\nWhen system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of `memoryLimit` and `memoryReservation` is required.\nIf both are specified, then `memoryLimit` must be equal to `memoryReservation`\n\n*Note*: To maximize your resource utilization, provide your jobs with as much memory as possible\nfor the specific instance type that you are using.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html",
            "stability": "experimental",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 116
          },
          "name": "memoryReservation",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": ": `'Default'`",
            "stability": "experimental",
            "summary": "The name of this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 73
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "The level of permissions are similar to the root user permissions.\n\nThis parameter maps to `privileged` policy in the Privileged pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems",
            "stability": "experimental",
            "summary": "If specified, gives this container elevated permissions on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 187
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This parameter maps to `ReadOnlyRootFilesystem` policy in the Volumes and file systems pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems",
            "stability": "experimental",
            "summary": "If specified, gives this container readonly access to its root file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 200
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "If this parameter isn't specified, the default is the group that's specified in the image metadata.\nThis parameter maps to `RunAsGroup` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, the container is run as the specified group ID (`gid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 213
          },
          "name": "runAsGroup",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the container is *not* required to run as a non-root user",
            "remarks": "Otherwise, no such rule is enforced.\nThis parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, the container is run as a user with a `uid` other than 0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 225
          },
          "name": "runAsRoot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the user that is specified in the image metadata.",
            "remarks": "This parameter maps to `RunAsUser` and `MustRunAs` policy in the Users and groups pod security policies in the Kubernetes documentation.\n\n*Note*: this is only compatible with Kubernetes < v1.25",
            "see": "https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups",
            "stability": "experimental",
            "summary": "If specified, this container is run as the specified user ID (`uid`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 237
          },
          "name": "runAsUser",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:IEksContainerDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IEksJobDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A JobDefinition that uses Eks orchestration."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IEksJobDefinition",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IJobDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-job-definition.ts",
        "line": 10
      },
      "name": "IEksJobDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The container this Job Definition will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 14
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.EksContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "`DnsPolicy.CLUSTER_FIRST`",
            "see": "https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy",
            "stability": "experimental",
            "summary": "The DNS Policy of the pod used by this Job Definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 23
          },
          "name": "dnsPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.DnsPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the default service account of the container",
            "remarks": "service accounts are Kubernetes method of identification and authentication,\nroughly analogous to IAM users.",
            "see": "https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html",
            "stability": "experimental",
            "summary": "The name of the service account that's used to run the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 48
          },
          "name": "serviceAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Otherwise, the Kubernetes pod networking model is enabled.\nMost AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.",
            "see": "https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking",
            "stability": "experimental",
            "summary": "If specified, the Pod used by this Job Definition will use the host's network IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-job-definition.ts",
            "line": 35
          },
          "name": "useHostNetwork",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-job-definition:IEksJobDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "remarks": "The Faireshare Scheduling Policy ensures that each share gets a certain amount of vCPUs.\nIt does this by deciding how many Jobs of each share to schedule *relative to how many jobs of\neach share are currently being executed by the ComputeEnvironment*. The weight factors associated with\neach share determine the ratio of vCPUs allocated; see the readme for a more in-depth discussion of\nfairshare policies.",
        "stability": "experimental",
        "summary": "Represents a Fairshare Scheduling Policy. Instructs the scheduler to allocate ComputeEnvironment vCPUs based on Job shareIdentifiers."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IFairshareSchedulingPolicy",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ISchedulingPolicy"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/scheduling-policy.ts",
        "line": 92
      },
      "name": "IFairshareSchedulingPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "*Note*: It is possible to submit Jobs to the queue with Share Identifiers that\nare not recognized by the Scheduling Policy.",
            "stability": "experimental",
            "summary": "The shares that this Scheduling Policy applies to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 130
          },
          "name": "shares",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Share"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no vCPU is reserved",
            "remarks": "The percentage reserved is defined by the Scheduler as:\n`(computeReservation/100)^ActiveFairShares` where `ActiveFairShares` is the number of active fair share identifiers.\n\nFor example, a computeReservation value of 50 indicates that AWS Batch reserves 50% of the\nmaximum available vCPU if there's only one fair share identifier.\nIt reserves 25% if there are two fair share identifiers.\nIt reserves 12.5% if there are three fair share identifiers.\n\nA computeReservation value of 25 indicates that AWS Batch should reserve 25% of the\nmaximum available vCPU if there's only one fair share identifier,\n6.25% if there are two fair share identifiers,\nand 1.56% if there are three fair share identifiers.",
            "stability": "experimental",
            "summary": "Used to calculate the percentage of the maximum available vCPU to reserve for share identifiers not present in the Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 111
          },
          "name": "computeReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0: only the current job usage is considered",
            "remarks": "The usage is used to calculate a fair share percentage for each fair share identifier currently in the Queue.\nA value of zero (0) indicates that only current usage is measured.\nThe decay is linear and gives preference to newer jobs.\n\nThe maximum supported value is 604800 seconds (1 week).",
            "stability": "experimental",
            "summary": "The amount of time to use to measure the usage of each job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 123
          },
          "name": "shareDecay",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/scheduling-policy:IFairshareSchedulingPolicy"
    },
    "@aws-cdk/aws-batch-alpha.IFargateComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A ManagedComputeEnvironment that uses ECS orchestration on Fargate instances."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IFargateComputeEnvironment",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 1060
      },
      "name": "IFargateComputeEnvironment",
      "symbolId": "lib/managed-compute-environment:IFargateComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.IJobDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a JobDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IJobDefinition",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 8
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a RetryStrategy to this JobDefinition."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 70
          },
          "name": "addRetryStrategy",
          "parameters": [
            {
              "name": "strategy",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              }
            }
          ]
        }
      ],
      "name": "IJobDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 14
          },
          "name": "jobDefinitionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 21
          },
          "name": "jobDefinitionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no `RetryStrategy`",
            "stability": "experimental",
            "summary": "Defines the retry behavior for this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 47
          },
          "name": "retryStrategies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters",
            "stability": "experimental",
            "summary": "The default parameters passed to the container These parameters can be referenced in the `command` that you give to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 32
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "The job is retried on failure the same number of attempts as the value.",
            "stability": "experimental",
            "summary": "The number of times to retry a job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 40
          },
          "name": "retryAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Only used in Fairshare Scheduling\nto decide which job to run first when there are multiple jobs\nwith the same share identifier.",
            "stability": "experimental",
            "summary": "The priority of this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 56
          },
          "name": "schedulingPriority",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no timeout",
            "remarks": "After the amount of time you specify passes,\nBatch terminates your jobs if they aren't finished.",
            "stability": "experimental",
            "summary": "The timeout time for jobs that are submitted with this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 65
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/job-definition-base:IJobDefinition"
    },
    "@aws-cdk/aws-batch-alpha.IJobQueue": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a JobQueue."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IJobQueue",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-queue.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The Queue will prefer lower-order `ComputeEnvironment`s.",
            "stability": "experimental",
            "summary": "Add a `ComputeEnvironment` to this Queue."
          },
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 66
          },
          "name": "addComputeEnvironment",
          "parameters": [
            {
              "name": "computeEnvironment",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
              }
            },
            {
              "name": "order",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "IJobQueue",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The job scheduler uses this parameter to determine which compute environment runs a specific job.\nCompute environments must be in the VALID state before you can associate them with a job queue.\nYou can associate up to three compute environments with a job queue.\nAll of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT);\nEC2 and Fargate compute environments can't be mixed.\n\n*Note*: All compute environments that are associated with a job queue must share the same architecture.\nAWS Batch doesn't support mixing compute environment architecture types in a single job queue.",
            "stability": "experimental",
            "summary": "The set of compute environments mapped to a job queue and their order relative to each other."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 37
          },
          "name": "computeEnvironments",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.OrderedComputeEnvironment"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of this job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 24
          },
          "name": "jobQueueArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "remarks": "It can be up to 128 letters long.\nIt can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_)",
            "stability": "experimental",
            "summary": "The name of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 17
          },
          "name": "jobQueueName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Job queues with a higher priority are evaluated first when associated with the same compute environment.\nPriority is determined in descending order.\nFor example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1.",
            "stability": "experimental",
            "summary": "The priority of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 45
          },
          "name": "priority",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Otherwise, new jobs can't be added to the queue, but jobs already in the queue can finish.",
            "stability": "experimental",
            "summary": "If the job queue is enabled, it is able to accept jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 53
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no scheduling policy",
            "remarks": "Instructs the Scheduler how to schedule different jobs.",
            "stability": "experimental",
            "summary": "The SchedulingPolicy for this JobQueue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 60
          },
          "name": "schedulingPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy"
          }
        }
      ],
      "symbolId": "lib/job-queue:IJobQueue"
    },
    "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "remarks": "Batch will provision EC2 Instances to\nmeet the requirements of the jobs executing in this ComputeEnvironment.",
        "stability": "experimental",
        "summary": "Represents a Managed ComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
        "aws-cdk-lib.aws_ec2.IConnectable",
        "aws-cdk-lib.ITaggable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 14
      },
      "name": "IManagedComputeEnvironment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "*Note*: if this Compute Environment uses EC2 resources (not Fargate) with either `AllocationStrategy.BEST_FIT_PROGRESSIVE` or\n`AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`, or `AllocationStrategy.BEST_FIT` with Spot instances,\nThe scheduler may exceed this number by at most one of the instances specified in `instanceTypes`\nor `instanceClasses`.",
            "stability": "experimental",
            "summary": "The maximum vCpus this `ManagedComputeEnvironment` can scale up to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 23
          },
          "name": "maxvCpus",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The security groups this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 78
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "To enable more properties to be updated,\nset this property to `false`. When changing the value of this property to false,\ndo not change any other properties at the same time.\nIf other properties are changed at the same time,\nand the change needs to be rolled back but it can't,\nit's possible for the stack to go into the UPDATE_ROLLBACK_FAILED state.\nYou can't update a stack that is in the UPDATE_ROLLBACK_FAILED state.\nHowever, if you can continue to roll it back,\nyou can return the stack to its original settings and then try to update it again.\n\nThe properties which require a replacement of the Compute Environment are:",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html",
            "stability": "experimental",
            "summary": "Specifies whether this Compute Environment is replaced if an update is made that requires replacing its instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 42
          },
          "name": "replaceComputeEnvironment",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Spot instances are less expensive EC2 instances that can be\nreclaimed by EC2 at any time; your job will be given two minutes\nof notice before reclamation.",
            "stability": "experimental",
            "summary": "Whether or not to use spot instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 52
          },
          "name": "spot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is enabled, any terminated jobs may be retried, depending on the job's\nretry policy.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html",
            "stability": "experimental",
            "summary": "Whether or not any running jobs will be immediately terminated when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 73
          },
          "name": "terminateOnUpdate",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "30 minutes",
            "remarks": "If so,\nwhen an infrastructure update is triggered, any running jobs\nwill be allowed to run until `updateTimeout` has expired.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html",
            "stability": "experimental",
            "summary": "Only meaningful if `terminateOnUpdate` is `false`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 62
          },
          "name": "updateTimeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If you specify a specific AMI, this property will be ignored.",
            "stability": "experimental",
            "summary": "Whether or not the AMI is updated to the latest one supported by Batch when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 93
          },
          "name": "updateToLatestImageVersion",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The VPC Subnets this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 83
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:IManagedComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A ManagedComputeEnvironment that uses ECS orchestration on EC2 instances."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 235
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance class to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 348
          },
          "name": "addInstanceClass",
          "parameters": [
            {
              "name": "instanceClass",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance type to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 343
          },
          "name": "addInstanceType",
          "parameters": [
            {
              "name": "instanceType",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              }
            }
          ]
        }
      ],
      "name": "IManagedEc2EcsComputeEnvironment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.\nBatch will automatically choose the size.",
            "stability": "experimental",
            "summary": "The instance classes that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 287
          },
          "name": "instanceClasses",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 280
          },
          "name": "instanceTypes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `BEST_FIT_PROGRESSIVE` if not using Spot instances,\n`SPOT_CAPACITY_OPTIMIZED` if using Spot instances.",
            "stability": "experimental",
            "summary": "The allocation strategy to use if not enough instances of the best fitting instance type can be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 253
          },
          "name": "allocationStrategy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- ECS_AL2 compatible AMI ids for non-GPU instances, ECS_AL2_NVIDIA compatible AMI ids for GPU instances",
            "remarks": "Leave this `undefined` to allow Batch to choose the latest AMIs it supports for each instance that it launches.",
            "stability": "experimental",
            "summary": "Configure which AMIs this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 244
          },
          "name": "images",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImage"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a role will be created",
            "stability": "experimental",
            "summary": "The execution Role that instances launched by this Compute Environment will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 304
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "no launch template",
            "remarks": "*Note*: if `securityGroups` is specified on both your\nlaunch template and this Compute Environment, **the\n`securityGroup`s on the Compute Environment override the\nones on the launch template.",
            "stability": "experimental",
            "summary": "The Launch Template that this Compute Environment will use to provision EC2 Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 317
          },
          "name": "launchTemplate",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ILaunchTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "stability": "experimental",
            "summary": "The minimum vCPUs that an environment should maintain, even if the compute environment is DISABLED."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 325
          },
          "name": "minvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no placement group",
            "remarks": "If you intend to submit multi-node parallel jobs to this Compute Environment,\nyou should consider creating a cluster placement group and associate it with your compute resources.\nThis keeps your multi-node parallel job on a logical grouping of instances\nwithin a single Availability Zone with high network flow potential.",
            "see": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html",
            "stability": "experimental",
            "summary": "The EC2 placement group to associate with your compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 338
          },
          "name": "placementGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IPlacementGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 100%",
            "remarks": "For example, if your maximum percentage is 20%, the Spot price must be\nless than 20% of the current On-Demand price for that Instance.\nYou always pay the lowest market price and never more than your maximum percentage.\nFor most use cases, Batch recommends leaving this field empty.",
            "stability": "experimental",
            "summary": "The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 265
          },
          "name": "spotBidPercentage",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new Role will be created",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html",
            "stability": "experimental",
            "summary": "The service-linked role that Spot Fleet needs to launch instances on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 274
          },
          "name": "spotFleetRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "The optimal instance type is equivalent to adding the\nC4, M4, and R4 instance classes. You can specify other instance classes\n(of the same architecture) in addition to the optimal instance classes.",
            "stability": "experimental",
            "summary": "Whether or not to use batch's optimal instance type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 297
          },
          "name": "useOptimalInstanceClasses",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:IManagedEc2EcsComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.ISchedulingPolicy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "remarks": "Scheduling Policies tell the Batch\nJob Scheduler how to schedule incoming jobs.",
        "stability": "experimental",
        "summary": "Represents a Scheduling Policy."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/scheduling-policy.ts",
        "line": 9
      },
      "name": "ISchedulingPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The arn of this scheduling policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 22
          },
          "name": "schedulingPolicyArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of this scheduling policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 15
          },
          "name": "schedulingPolicyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/scheduling-policy:ISchedulingPolicy"
    },
    "@aws-cdk/aws-batch-alpha.IUnmanagedComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "remarks": "Batch will not provision instances on your behalf\nin this ComputeEvironment.",
        "stability": "experimental",
        "summary": "Represents an UnmanagedComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.IUnmanagedComputeEnvironment",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/unmanaged-compute-environment.ts",
        "line": 11
      },
      "name": "IUnmanagedComputeEnvironment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "**If this parameter is not provided on a fairshare queue, no capacity is reserved**;\nthat is, the `FairshareSchedulingPolicy` is ignored.",
            "stability": "experimental",
            "summary": "The vCPUs this Compute Environment provides. Used only by the scheduler to schedule jobs in `Queue`s that use `FairshareSchedulingPolicy`s."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 19
          },
          "name": "unmanagedvCPUs",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/unmanaged-compute-environment:IUnmanagedComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.ImagePullPolicy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Determines when the image is pulled from the registry to launch a container."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ImagePullPolicy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 256
      },
      "members": [
        {
          "docs": {
            "remarks": "If the kubelet has a container image with that exact digest cached locally,\nthe kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved digest,\nand uses that image to launch the container.",
            "see": "https://docs.docker.com/engine/reference/commandline/pull/#pull-an-image-by-digest-immutable-identifier",
            "stability": "experimental",
            "summary": "Every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest."
          },
          "name": "ALWAYS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The image is pulled only if it is not already present locally."
          },
          "name": "IF_NOT_PRESENT"
        },
        {
          "docs": {
            "remarks": "If the image is somehow already present locally,\nthe kubelet attempts to start the container; otherwise, startup fails.\nSee pre-pulled images for more details.",
            "see": "https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images",
            "stability": "experimental",
            "summary": "The kubelet does not try fetching the image."
          },
          "name": "NEVER"
        }
      ],
      "name": "ImagePullPolicy",
      "symbolId": "lib/eks-container-definition:ImagePullPolicy"
    },
    "@aws-cdk/aws-batch-alpha.JobDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props common to all JobDefinitions."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.JobDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 76
      },
      "name": "JobDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- generated by CloudFormation",
            "stability": "experimental",
            "summary": "The name of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 82
          },
          "name": "jobDefinitionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters",
            "stability": "experimental",
            "summary": "The default parameters passed to the container These parameters can be referenced in the `command` that you give to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 93
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "The job is retried on failure the same number of attempts as the value.",
            "stability": "experimental",
            "summary": "The number of times to retry a job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 101
          },
          "name": "retryAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no `RetryStrategy`",
            "stability": "experimental",
            "summary": "Defines the retry behavior for this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 108
          },
          "name": "retryStrategies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Only used in Fairshare Scheduling\nto decide which job to run first when there are multiple jobs\nwith the same share identifier.",
            "stability": "experimental",
            "summary": "The priority of this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 117
          },
          "name": "schedulingPriority",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no timeout",
            "remarks": "After the amount of time you specify passes,\nBatch terminates your jobs if they aren't finished.",
            "stability": "experimental",
            "summary": "The timeout time for jobs that are submitted with this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 126
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/job-definition-base:JobDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.JobQueue": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "remarks": "Jobs exit the queue in FIFO order unless a `SchedulingPolicy` is linked.",
        "stability": "experimental",
        "summary": "JobQueues can receive Jobs, which are removed from the queue when sent to the linked ComputeEnvironment(s) to be executed."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.JobQueue",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/job-queue.ts",
          "line": 171
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.JobQueueProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IJobQueue"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/job-queue.ts",
        "line": 143
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "refer to an existing JobQueue by its arn."
          },
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 147
          },
          "name": "fromJobQueueArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "jobQueueArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IJobQueue"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The Queue will prefer lower-order `ComputeEnvironment`s.",
            "stability": "experimental",
            "summary": "Add a `ComputeEnvironment` to this Queue."
          },
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 206
          },
          "name": "addComputeEnvironment",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "parameters": [
            {
              "name": "computeEnvironment",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
              }
            },
            {
              "name": "order",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "JobQueue",
      "properties": [
        {
          "docs": {
            "remarks": "The job scheduler uses this parameter to determine which compute environment runs a specific job.\nCompute environments must be in the VALID state before you can associate them with a job queue.\nYou can associate up to three compute environments with a job queue.\nAll of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT);\nEC2 and Fargate compute environments can't be mixed.\n\n*Note*: All compute environments that are associated with a job queue must share the same architecture.\nAWS Batch doesn't support mixing compute environment architecture types in a single job queue.",
            "stability": "experimental",
            "summary": "The set of compute environments mapped to a job queue and their order relative to each other."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 163
          },
          "name": "computeEnvironments",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.OrderedComputeEnvironment"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 168
          },
          "name": "jobQueueArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "It can be up to 128 letters long.\nIt can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_)",
            "stability": "experimental",
            "summary": "The name of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 169
          },
          "name": "jobQueueName",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Job queues with a higher priority are evaluated first when associated with the same compute environment.\nPriority is determined in descending order.\nFor example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1.",
            "stability": "experimental",
            "summary": "The priority of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 164
          },
          "name": "priority",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "Otherwise, new jobs can't be added to the queue, but jobs already in the queue can finish.",
            "stability": "experimental",
            "summary": "If the job queue is enabled, it is able to accept jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 165
          },
          "name": "enabled",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Instructs the Scheduler how to schedule different jobs.",
            "stability": "experimental",
            "summary": "The SchedulingPolicy for this JobQueue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 166
          },
          "name": "schedulingPolicy",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobQueue",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy"
          }
        }
      ],
      "symbolId": "lib/job-queue:JobQueue"
    },
    "@aws-cdk/aws-batch-alpha.JobQueueProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure a JobQueue."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.JobQueueProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-queue.ts",
        "line": 72
      },
      "name": "JobQueueProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "The job scheduler uses this parameter to determine which compute environment runs a specific job.\nCompute environments must be in the VALID state before you can associate them with a job queue.\nYou can associate up to three compute environments with a job queue.\nAll of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT);\nEC2 and Fargate compute environments can't be mixed.\n\n*Note*: All compute environments that are associated with a job queue must share the same architecture.\nAWS Batch doesn't support mixing compute environment architecture types in a single job queue.",
            "stability": "experimental",
            "summary": "The set of compute environments mapped to a job queue and their order relative to each other."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 86
          },
          "name": "computeEnvironments",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.OrderedComputeEnvironment"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Otherwise, new jobs can't be added to the queue, but jobs already in the queue can finish.",
            "stability": "experimental",
            "summary": "If the job queue is enabled, it is able to accept jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 112
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no name",
            "remarks": "It can be up to 128 letters long.\nIt can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_)",
            "stability": "experimental",
            "summary": "The name of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 104
          },
          "name": "jobQueueName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "Job queues with a higher priority are evaluated first when associated with the same compute environment.\nPriority is determined in descending order.\nFor example, a job queue with a priority of 10 is given scheduling preference over a job queue with a priority of 1.",
            "stability": "experimental",
            "summary": "The priority of the job queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 96
          },
          "name": "priority",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no scheduling policy",
            "remarks": "Instructs the Scheduler how to schedule different jobs.",
            "stability": "experimental",
            "summary": "The SchedulingPolicy for this JobQueue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 119
          },
          "name": "schedulingPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.ISchedulingPolicy"
          }
        }
      ],
      "symbolId": "lib/job-queue:JobQueueProps"
    },
    "@aws-cdk/aws-batch-alpha.LinuxParameters": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Linux-specific options that are applied to the container."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.LinuxParameters",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Constructs a new instance of the LinuxParameters class."
        },
        "locationInModule": {
          "filename": "lib/linux-parameters.ts",
          "line": 87
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.LinuxParametersProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 53
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds one or more host devices to a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 111
          },
          "name": "addDevices",
          "parameters": [
            {
              "name": "device",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Device"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Only works with EC2 launch type.",
            "stability": "experimental",
            "summary": "Specifies the container path, mount options, and size (in MiB) of the tmpfs mount for a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 120
          },
          "name": "addTmpfs",
          "parameters": [
            {
              "name": "tmpfs",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Tmpfs"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the Linux parameters to the Batch version of this resource, which does not have 'capabilities' and requires tmpfs.containerPath to be defined."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 128
          },
          "name": "renderLinuxParameters",
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_batch.CfnJobDefinition.LinuxParametersProperty"
            }
          }
        }
      ],
      "name": "LinuxParameters",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Device mounts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 77
          },
          "name": "devices",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Device"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "TmpFs mounts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 82
          },
          "name": "tmpfs",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.Tmpfs"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether the init process is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 57
          },
          "name": "initProcessEnabled",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The max swap memory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 67
          },
          "name": "maxSwap",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "remarks": "Not valid for Fargate launch type",
            "stability": "experimental",
            "summary": "The shared memory size (in MiB)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 62
          },
          "name": "sharedMemorySize",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The swappiness behavior."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 72
          },
          "name": "swappiness",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/linux-parameters:LinuxParameters"
    },
    "@aws-cdk/aws-batch-alpha.LinuxParametersProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The properties for defining Linux-specific options that are applied to the container."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.LinuxParametersProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 8
      },
      "name": "LinuxParametersProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Specifies whether to run an init process inside the container that forwards signals and reaps processes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 14
          },
          "name": "initProcessEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No swap.",
            "remarks": "This parameter\nwill be translated to the --memory-swap option to docker run.\n\nThis parameter is only supported when you are using the EC2 launch type.\nAccepted values are positive integers.",
            "stability": "experimental",
            "summary": "The total amount of swap memory a container can use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 32
          },
          "name": "maxSwap",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No shared memory.",
            "stability": "experimental",
            "summary": "The value for the size of the /dev/shm volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 21
          },
          "name": "sharedMemorySize",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "60",
            "remarks": "This parameter\nmaps to the --memory-swappiness option to docker run. The swappiness relates\nto the kernel's tendency to swap memory. A value of 0 will cause swapping to\nnot happen unless absolutely necessary. A value of 100 will cause pages to\nbe swapped very aggressively.\n\nThis parameter is only supported when you are using the EC2 launch type.\nAccepted values are whole numbers between 0 and 100. If a value is not\nspecified for maxSwap then this parameter is ignored.",
            "stability": "experimental",
            "summary": "This allows you to tune a container's memory swappiness behavior."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 47
          },
          "name": "swappiness",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/linux-parameters:LinuxParametersProps"
    },
    "@aws-cdk/aws-batch-alpha.ManagedComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for a ManagedComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ManagedComputeEnvironmentProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ComputeEnvironmentProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 99
      },
      "name": "ManagedComputeEnvironmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "VPC in which this Compute Environment will launch Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 169
          },
          "name": "vpc",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "*Note*: if this Compute Environment uses EC2 resources (not Fargate) with either `AllocationStrategy.BEST_FIT_PROGRESSIVE` or\n`AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`, or `AllocationStrategy.BEST_FIT` with Spot instances,\nThe scheduler may exceed this number by at most one of the instances specified in `instanceTypes`\nor `instanceClasses`.",
            "stability": "experimental",
            "summary": "The maximum vCpus this `ManagedComputeEnvironment` can scale up to. Each vCPU is equivalent to 1024 CPU shares."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 111
          },
          "name": "maxvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "To enable more properties to be updated,\nset this property to `false`. When changing the value of this property to false,\ndo not change any other properties at the same time.\nIf other properties are changed at the same time,\nand the change needs to be rolled back but it can't,\nit's possible for the stack to go into the UPDATE_ROLLBACK_FAILED state.\nYou can't update a stack that is in the UPDATE_ROLLBACK_FAILED state.\nHowever, if you can continue to roll it back,\nyou can return the stack to its original settings and then try to update it again.\n\nThe properties which require a replacement of the Compute Environment are:",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html",
            "stability": "experimental",
            "summary": "Specifies whether this Compute Environment is replaced if an update is made that requires replacing its instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 132
          },
          "name": "replaceComputeEnvironment",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "new security groups will be created",
            "stability": "experimental",
            "summary": "The security groups this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 176
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Spot instances are less expensive EC2 instances that can be\nreclaimed by EC2 at any time; your job will be given two minutes\nof notice before reclamation.",
            "stability": "experimental",
            "summary": "Whether or not to use spot instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 142
          },
          "name": "spot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is enabled, any terminated jobs may be retried, depending on the job's\nretry policy.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html",
            "stability": "experimental",
            "summary": "Whether or not any running jobs will be immediately terminated when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 164
          },
          "name": "terminateOnUpdate",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "30 minutes",
            "remarks": "If so,\nwhen an infrastructure update is triggered, any running jobs\nwill be allowed to run until `updateTimeout` has expired.",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html",
            "stability": "experimental",
            "summary": "Only meaningful if `terminateOnUpdate` is `false`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 153
          },
          "name": "updateTimeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If you specify a specific AMI, this property will be ignored.",
            "stability": "experimental",
            "summary": "Whether or not the AMI is updated to the latest one supported by Batch when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 193
          },
          "name": "updateToLatestImageVersion",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "new subnets will be created",
            "stability": "experimental",
            "summary": "The VPC Subnets this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 183
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:ManagedComputeEnvironmentProps"
    },
    "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::ComputeEnvironment"
        },
        "stability": "experimental",
        "summary": "A ManagedComputeEnvironment that uses ECS orchestration on EC2 instances."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironment",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/managed-compute-environment.ts",
          "line": 635
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironmentProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 588
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "refer to an existing ComputeEnvironment by its arn."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 592
          },
          "name": "fromManagedEc2EcsComputeEnvironmentArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "managedEc2EcsComputeEnvironmentArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance class to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 705
          },
          "name": "addInstanceClass",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "parameters": [
            {
              "name": "instanceClass",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance type to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 701
          },
          "name": "addInstanceType",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "parameters": [
            {
              "name": "instanceType",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              }
            }
          ]
        }
      ],
      "name": "ManagedEc2EcsComputeEnvironment",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this compute environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 619
          },
          "name": "computeEnvironmentArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 620
          },
          "name": "computeEnvironmentName",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The network connections associated with this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 210
          },
          "name": "connections",
          "overrides": "aws-cdk-lib.aws_ec2.IConnectable",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.Connections"
          }
        },
        {
          "docs": {
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 92
          },
          "name": "enabled",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.\nBatch will automatically choose the size.",
            "stability": "experimental",
            "summary": "The instance classes that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 627
          },
          "name": "instanceClasses",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 626
          },
          "name": "instanceTypes",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "*Note*: if this Compute Environment uses EC2 resources (not Fargate) with either `AllocationStrategy.BEST_FIT_PROGRESSIVE` or\n`AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`, or `AllocationStrategy.BEST_FIT` with Spot instances,\nThe scheduler may exceed this number by at most one of the instances specified in `instanceTypes`\nor `instanceClasses`.",
            "stability": "experimental",
            "summary": "The maximum vCpus this `ManagedComputeEnvironment` can scale up to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 201
          },
          "name": "maxvCpus",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The security groups this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 206
          },
          "name": "securityGroups",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "TagManager to set, remove and format tags."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 208
          },
          "name": "tags",
          "overrides": "aws-cdk-lib.ITaggable",
          "type": {
            "fqn": "aws-cdk-lib.TagManager"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The allocation strategy to use if not enough instances of the best fitting instance type can be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 623
          },
          "name": "allocationStrategy",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy"
          }
        },
        {
          "docs": {
            "remarks": "Leave this `undefined` to allow Batch to choose the latest AMIs it supports for each instance that it launches.",
            "stability": "experimental",
            "summary": "Configure which AMIs this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 622
          },
          "name": "images",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImage"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The execution Role that instances launched by this Compute Environment will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 628
          },
          "name": "instanceRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "*Note*: if `securityGroups` is specified on both your\nlaunch template and this Compute Environment, **the\n`securityGroup`s on the Compute Environment override the\nones on the launch template.",
            "stability": "experimental",
            "summary": "The Launch Template that this Compute Environment will use to provision EC2 Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 629
          },
          "name": "launchTemplate",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ILaunchTemplate"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The minimum vCPUs that an environment should maintain, even if the compute environment is DISABLED."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 630
          },
          "name": "minvCpus",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "If you intend to submit multi-node parallel jobs to this Compute Environment,\nyou should consider creating a cluster placement group and associate it with your compute resources.\nThis keeps your multi-node parallel job on a logical grouping of instances\nwithin a single Availability Zone with high network flow potential.",
            "stability": "experimental",
            "summary": "The EC2 placement group to associate with your compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 631
          },
          "name": "placementGroup",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IPlacementGroup"
          }
        },
        {
          "docs": {
            "remarks": "To enable more properties to be updated,\nset this property to `false`. When changing the value of this property to false,\ndo not change any other properties at the same time.\nIf other properties are changed at the same time,\nand the change needs to be rolled back but it can't,\nit's possible for the stack to go into the UPDATE_ROLLBACK_FAILED state.\nYou can't update a stack that is in the UPDATE_ROLLBACK_FAILED state.\nHowever, if you can continue to roll it back,\nyou can return the stack to its original settings and then try to update it again.\n\nThe properties which require a replacement of the Compute Environment are:",
            "stability": "experimental",
            "summary": "Specifies whether this Compute Environment is replaced if an update is made that requires replacing its instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 202
          },
          "name": "replaceComputeEnvironment",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 91
          },
          "name": "serviceRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "Spot instances are less expensive EC2 instances that can be\nreclaimed by EC2 at any time; your job will be given two minutes\nof notice before reclamation.",
            "stability": "experimental",
            "summary": "Whether or not to use spot instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 203
          },
          "name": "spot",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "For example, if your maximum percentage is 20%, the Spot price must be\nless than 20% of the current On-Demand price for that Instance.\nYou always pay the lowest market price and never more than your maximum percentage.\nFor most use cases, Batch recommends leaving this field empty.",
            "stability": "experimental",
            "summary": "The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 624
          },
          "name": "spotBidPercentage",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The service-linked role that Spot Fleet needs to launch instances on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 625
          },
          "name": "spotFleetRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedEc2EcsComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "If this is enabled, any terminated jobs may be retried, depending on the job's\nretry policy.",
            "stability": "experimental",
            "summary": "Whether or not any running jobs will be immediately terminated when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 205
          },
          "name": "terminateOnUpdate",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If so,\nwhen an infrastructure update is triggered, any running jobs\nwill be allowed to run until `updateTimeout` has expired.",
            "stability": "experimental",
            "summary": "Only meaningful if `terminateOnUpdate` is `false`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 204
          },
          "name": "updateTimeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "remarks": "If you specify a specific AMI, this property will be ignored.",
            "stability": "experimental",
            "summary": "Whether or not the AMI is updated to the latest one supported by Batch when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 207
          },
          "name": "updateToLatestImageVersion",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:ManagedEc2EcsComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for a ManagedEc2EcsComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironmentProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ManagedComputeEnvironmentProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 469
      },
      "name": "ManagedEc2EcsComputeEnvironmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- `BEST_FIT_PROGRESSIVE` if not using Spot instances,\n`SPOT_CAPACITY_OPTIMIZED` if using Spot instances.",
            "stability": "experimental",
            "summary": "The allocation strategy to use if not enough instances of the best fitting instance type can be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 499
          },
          "name": "allocationStrategy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- ECS_AL2 for non-GPU instances, ECS_AL2_NVIDIA for GPU instances",
            "remarks": "If you specify this property with only `image` specified, then the\n`imageType` will default to `ECS_AL2`. *If your image needs GPU resources,\nspecify `ECS_AL2_NVIDIA`; otherwise, the instances will not be able to properly\njoin the ComputeEnvironment*.",
            "stability": "experimental",
            "summary": "Configure which AMIs this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 490
          },
          "name": "images",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EcsMachineImage"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the instances Batch considers will be used (currently C4, M4, and R4)",
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.\nBatch will automatically choose the instance size.",
            "stability": "experimental",
            "summary": "The instance classes that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 539
          },
          "name": "instanceClasses",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a role will be created",
            "stability": "experimental",
            "summary": "The execution Role that instances launched by this Compute Environment will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 546
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the instances Batch considers will be used (currently C4, M4, and R4)",
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 530
          },
          "name": "instanceTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "no launch template",
            "remarks": "*Note*: if `securityGroups` is specified on both your\nlaunch template and this Compute Environment, **the\n`securityGroup`s on the Compute Environment override the\nones on the launch template.",
            "stability": "experimental",
            "summary": "The Launch Template that this Compute Environment will use to provision EC2 Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 559
          },
          "name": "launchTemplate",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ILaunchTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "stability": "experimental",
            "summary": "The minimum vCPUs that an environment should maintain, even if the compute environment is DISABLED."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 567
          },
          "name": "minvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no placement group",
            "remarks": "If you intend to submit multi-node parallel jobs to this Compute Environment,\nyou should consider creating a cluster placement group and associate it with your compute resources.\nThis keeps your multi-node parallel job on a logical grouping of instances\nwithin a single Availability Zone with high network flow potential.",
            "see": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html",
            "stability": "experimental",
            "summary": "The EC2 placement group to associate with your compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 580
          },
          "name": "placementGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IPlacementGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "100%",
            "remarks": "For example, if your maximum percentage is 20%, the Spot price must be\nless than 20% of the current On-Demand price for that Instance.\nYou always pay the lowest market price and never more than your maximum percentage.\nFor most use cases, Batch recommends leaving this field empty.\n\nImplies `spot == true` if set",
            "stability": "experimental",
            "summary": "The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 513
          },
          "name": "spotBidPercentage",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new role will be created",
            "see": "https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html",
            "stability": "experimental",
            "summary": "The service-linked role that Spot Fleet needs to launch instances on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 522
          },
          "name": "spotFleetRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "The optimal instance type is equivalent to adding the\nC4, M4, and R4 instance classes. You can specify other instance classes\n(of the same architecture) in addition to the optimal instance classes.",
            "stability": "experimental",
            "summary": "Whether or not to use batch's optimal instance type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 478
          },
          "name": "useOptimalInstanceClasses",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:ManagedEc2EcsComputeEnvironmentProps"
    },
    "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::ComputeEnvironment"
        },
        "stability": "experimental",
        "summary": "A ManagedComputeEnvironment that uses ECS orchestration on EC2 instances."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironment",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/managed-compute-environment.ts",
          "line": 982
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironmentProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 963
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance class to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 1052
          },
          "name": "addInstanceClass",
          "parameters": [
            {
              "name": "instanceClass",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an instance type to this compute environment."
          },
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 1048
          },
          "name": "addInstanceType",
          "parameters": [
            {
              "name": "instanceType",
              "type": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              }
            }
          ]
        }
      ],
      "name": "ManagedEc2EksComputeEnvironment",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this compute environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 968
          },
          "name": "computeEnvironmentArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 967
          },
          "name": "computeEnvironmentName",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The network connections associated with this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 210
          },
          "name": "connections",
          "overrides": "aws-cdk-lib.aws_ec2.IConnectable",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.Connections"
          }
        },
        {
          "docs": {
            "remarks": "Please ensure that you have followed the steps at\n\nhttps://docs.aws.amazon.com/batch/latest/userguide/getting-started-eks.html\n\nbefore attempting to deploy a `ManagedEc2EksComputeEnvironment` that uses this cluster.\nIf you do not follow the steps in the link, the deployment fail with a message that the\ncompute environment did not stabilize.",
            "stability": "experimental",
            "summary": "The cluster that backs this Compute Environment. Required for Compute Environments running Kubernetes jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 965
          },
          "name": "eksCluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_eks.ICluster"
          }
        },
        {
          "docs": {
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 92
          },
          "name": "enabled",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 974
          },
          "name": "instanceClasses",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 973
          },
          "name": "instanceTypes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "*Note*: if this Compute Environment uses EC2 resources (not Fargate) with either `AllocationStrategy.BEST_FIT_PROGRESSIVE` or\n`AllocationStrategy.SPOT_CAPACITY_OPTIMIZED`, or `AllocationStrategy.BEST_FIT` with Spot instances,\nThe scheduler may exceed this number by at most one of the instances specified in `instanceTypes`\nor `instanceClasses`.",
            "stability": "experimental",
            "summary": "The maximum vCpus this `ManagedComputeEnvironment` can scale up to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 201
          },
          "name": "maxvCpus",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The security groups this Compute Environment will launch instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 206
          },
          "name": "securityGroups",
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "TagManager to set, remove and format tags."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 208
          },
          "name": "tags",
          "overrides": "aws-cdk-lib.ITaggable",
          "type": {
            "fqn": "aws-cdk-lib.TagManager"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The allocation strategy to use if not enough instances of the best fitting instance type can be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 971
          },
          "name": "allocationStrategy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Configure which AMIs this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 970
          },
          "name": "images",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksMachineImage"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The execution Role that instances launched by this Compute Environment will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 975
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "Cannot be 'default', start with 'kube-', or be longer than 64 characters.",
            "stability": "experimental",
            "summary": "The namespace of the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 964
          },
          "name": "kubernetesNamespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "*Note*: if `securityGroups` is specified on both your\nlaunch template and this Compute Environment, **the\n`securityGroup`s on the Compute Environment override the\nones on the launch template.",
            "stability": "experimental",
            "summary": "The Launch Template that this Compute Environment will use to provision EC2 Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 976
          },
          "name": "launchTemplate",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ILaunchTemplate"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The minimum vCPUs that an environment should maintain, even if the compute environment is DISABLED."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 977
          },
          "name": "minvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "If you intend to submit multi-node parallel jobs to this Compute Environment,\nyou should consider creating a cluster placement group and associate it with your compute resources.\nThis keeps your multi-node parallel job on a logical grouping of instances\nwithin a single Availability Zone with high network flow potential.",
            "stability": "experimental",
            "summary": "The EC2 placement group to associate with your compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 978
          },
          "name": "placementGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IPlacementGroup"
          }
        },
        {
          "docs": {
            "remarks": "To enable more properties to be updated,\nset this property to `false`. When changing the value of this property to false,\ndo not change any other properties at the same time.\nIf other properties are changed at the same time,\nand the change needs to be rolled back but it can't,\nit's possible for the stack to go into the UPDATE_ROLLBACK_FAILED state.\nYou can't update a stack that is in the UPDATE_ROLLBACK_FAILED state.\nHowever, if you can continue to roll it back,\nyou can return the stack to its original settings and then try to update it again.\n\nThe properties which require a replacement of the Compute Environment are:",
            "stability": "experimental",
            "summary": "Specifies whether this Compute Environment is replaced if an update is made that requires replacing its instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 202
          },
          "name": "replaceComputeEnvironment",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 91
          },
          "name": "serviceRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "Spot instances are less expensive EC2 instances that can be\nreclaimed by EC2 at any time; your job will be given two minutes\nof notice before reclamation.",
            "stability": "experimental",
            "summary": "Whether or not to use spot instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 203
          },
          "name": "spot",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "For example, if your maximum percentage is 20%, the Spot price must be\nless than 20% of the current On-Demand price for that Instance.\nYou always pay the lowest market price and never more than your maximum percentage.\nFor most use cases, Batch recommends leaving this field empty.\n\nImplies `spot == true` if set",
            "stability": "experimental",
            "summary": "The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 972
          },
          "name": "spotBidPercentage",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "If this is enabled, any terminated jobs may be retried, depending on the job's\nretry policy.",
            "stability": "experimental",
            "summary": "Whether or not any running jobs will be immediately terminated when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 205
          },
          "name": "terminateOnUpdate",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If so,\nwhen an infrastructure update is triggered, any running jobs\nwill be allowed to run until `updateTimeout` has expired.",
            "stability": "experimental",
            "summary": "Only meaningful if `terminateOnUpdate` is `false`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 204
          },
          "name": "updateTimeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "remarks": "If you specify a specific AMI, this property will be ignored.",
            "stability": "experimental",
            "summary": "Whether or not the AMI is updated to the latest one supported by Batch when an infrastructure update occurs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 207
          },
          "name": "updateToLatestImageVersion",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IManagedComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:ManagedEc2EksComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for a ManagedEc2EksComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironmentProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ManagedComputeEnvironmentProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/managed-compute-environment.ts",
        "line": 835
      },
      "name": "ManagedEc2EksComputeEnvironmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Please ensure that you have followed the steps at\n\nhttps://docs.aws.amazon.com/batch/latest/userguide/getting-started-eks.html\n\nbefore attempting to deploy a `ManagedEc2EksComputeEnvironment` that uses this cluster.\nIf you do not follow the steps in the link, the deployment fail with a message that the\ncompute environment did not stabilize.",
            "stability": "experimental",
            "summary": "The cluster that backs this Compute Environment. Required for Compute Environments running Kubernetes jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 853
          },
          "name": "eksCluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_eks.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The namespace of the Cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 839
          },
          "name": "kubernetesNamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `BEST_FIT_PROGRESSIVE` if not using Spot instances,\n`SPOT_CAPACITY_OPTIMIZED` if using Spot instances.",
            "stability": "experimental",
            "summary": "The allocation strategy to use if not enough instances of the best fitting instance type can be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 883
          },
          "name": "allocationStrategy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.AllocationStrategy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "If `imageKubernetesVersion` is specified,\n- EKS_AL2 for non-GPU instances, EKS_AL2_NVIDIA for GPU instances,\nOtherwise,\n- ECS_AL2 for non-GPU instances, ECS_AL2_NVIDIA for GPU instances,",
            "stability": "experimental",
            "summary": "Configure which AMIs this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 874
          },
          "name": "images",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.EksMachineImage"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the instances Batch considers will be used (currently C4, M4, and R4)",
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.\nBatch will automatically choose the instance size.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 914
          },
          "name": "instanceClasses",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceClass"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a role will be created",
            "stability": "experimental",
            "summary": "The execution Role that instances launched by this Compute Environment will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 921
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the instances Batch considers will be used (currently C4, M4, and R4)",
            "remarks": "Which one is chosen depends on the `AllocationStrategy` used.",
            "stability": "experimental",
            "summary": "The instance types that this Compute Environment can launch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 905
          },
          "name": "instanceTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no launch template",
            "remarks": "*Note*: if `securityGroups` is specified on both your\nlaunch template and this Compute Environment, **the\n`securityGroup`s on the Compute Environment override the\nones on the launch template.**",
            "stability": "experimental",
            "summary": "The Launch Template that this Compute Environment will use to provision EC2 Instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 934
          },
          "name": "launchTemplate",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.ILaunchTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "stability": "experimental",
            "summary": "The minimum vCPUs that an environment should maintain, even if the compute environment is DISABLED."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 942
          },
          "name": "minvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no placement group",
            "remarks": "If you intend to submit multi-node parallel jobs to this Compute Environment,\nyou should consider creating a cluster placement group and associate it with your compute resources.\nThis keeps your multi-node parallel job on a logical grouping of instances\nwithin a single Availability Zone with high network flow potential.",
            "see": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html",
            "stability": "experimental",
            "summary": "The EC2 placement group to associate with your compute resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 955
          },
          "name": "placementGroup",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IPlacementGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 100%",
            "remarks": "For example, if your maximum percentage is 20%, the Spot price must be\nless than 20% of the current On-Demand price for that Instance.\nYou always pay the lowest market price and never more than your maximum percentage.\nFor most use cases, Batch recommends leaving this field empty.\n\nImplies `spot == true` if set",
            "stability": "experimental",
            "summary": "The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 897
          },
          "name": "spotBidPercentage",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "The optimal instance type is equivalent to adding the\nC4, M4, and R4 instance classes. You can specify other instance classes\n(of the same architecture) in addition to the optimal instance classes.",
            "stability": "experimental",
            "summary": "Whether or not to use batch's optimal instance type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/managed-compute-environment.ts",
            "line": 863
          },
          "name": "useOptimalInstanceClasses",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/managed-compute-environment:ManagedEc2EksComputeEnvironmentProps"
    },
    "@aws-cdk/aws-batch-alpha.MultiNodeContainer": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Runs the container on nodes [startNode, endNode]."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeContainer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/multinode-job-definition.ts",
        "line": 47
      },
      "name": "MultiNodeContainer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The container that this node range will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 65
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.IEcsContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The container is run on all nodes in the range [startNode, endNode] (inclusive)",
            "stability": "experimental",
            "summary": "The index of the last node to run this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 60
          },
          "name": "endNode",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The container is run on all nodes in the range [startNode, endNode] (inclusive)",
            "stability": "experimental",
            "summary": "The index of the first node to run this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 53
          },
          "name": "startNode",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/multinode-job-definition:MultiNodeContainer"
    },
    "@aws-cdk/aws-batch-alpha.MultiNodeJobDefinition": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::JobDefinition"
        },
        "stability": "experimental",
        "summary": "A JobDefinition that uses Ecs orchestration to run multiple containers."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeJobDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/multinode-job-definition.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeJobDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IJobDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/multinode-job-definition.ts",
        "line": 109
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "refer to an existing JobDefinition by its arn."
          },
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 113
          },
          "name": "fromJobDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "jobDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IJobDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a container to this multinode job."
          },
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 174
          },
          "name": "addContainer",
          "parameters": [
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeContainer"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a RetryStrategy to this JobDefinition."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 259
          },
          "name": "addRetryStrategy",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "parameters": [
            {
              "name": "strategy",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              }
            }
          ]
        }
      ],
      "name": "MultiNodeJobDefinition",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The containers that this multinode job will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 126
          },
          "name": "containers",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeContainer"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The instance type that this job definition will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 127
          },
          "name": "instanceType",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 131
          },
          "name": "jobDefinitionArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 132
          },
          "name": "jobDefinitionName",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines the retry behavior for this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 243
          },
          "name": "retryStrategies",
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "The main node is responsible for orchestration.",
            "stability": "experimental",
            "summary": "The index of the main node in this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 128
          },
          "name": "mainNode",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The default parameters passed to the container These parameters can be referenced in the `command` that you give to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 241
          },
          "name": "parameters",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether to propogate tags from the JobDefinition to the ECS task that Batch spawns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 129
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "The job is retried on failure the same number of attempts as the value.",
            "stability": "experimental",
            "summary": "The number of times to retry a job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 242
          },
          "name": "retryAttempts",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "Only used in Fairshare Scheduling\nto decide which job to run first when there are multiple jobs\nwith the same share identifier.",
            "stability": "experimental",
            "summary": "The priority of this Job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 244
          },
          "name": "schedulingPriority",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "After the amount of time you specify passes,\nBatch terminates your jobs if they aren't finished.",
            "stability": "experimental",
            "summary": "The timeout time for jobs that are submitted with this job definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 245
          },
          "name": "timeout",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IJobDefinition",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        }
      ],
      "symbolId": "lib/multinode-job-definition:MultiNodeJobDefinition"
    },
    "@aws-cdk/aws-batch-alpha.MultiNodeJobDefinitionProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props to configure a MultiNodeJobDefinition."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeJobDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.JobDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/multinode-job-definition.ts",
        "line": 71
      },
      "name": "MultiNodeJobDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The instance type that this job definition will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 76
          },
          "name": "instanceType",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "see": "https://aws.amazon.com/blogs/compute/building-a-tightly-coupled-molecular-dynamics-workflow-with-multi-node-parallel-jobs-in-aws-batch/",
            "stability": "experimental",
            "summary": "The containers that this multinode job will run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 85
          },
          "name": "containers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.MultiNodeContainer"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "remarks": "The main node is responsible for orchestration.",
            "stability": "experimental",
            "summary": "The index of the main node in this job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 93
          },
          "name": "mainNode",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to propogate tags from the JobDefinition to the ECS task that Batch spawns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/multinode-job-definition.ts",
            "line": 101
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/multinode-job-definition:MultiNodeJobDefinitionProps"
    },
    "@aws-cdk/aws-batch-alpha.OrderedComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "remarks": "The JobQueue will prioritize the lowest-order ComputeEnvironment.",
        "stability": "experimental",
        "summary": "Assigns an order to a ComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.OrderedComputeEnvironment",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/job-queue.ts",
        "line": 126
      },
      "name": "OrderedComputeEnvironment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ComputeEnvironment to link to this JobQueue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 130
          },
          "name": "computeEnvironment",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The order associated with `computeEnvironment`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-queue.ts",
            "line": 135
          },
          "name": "order",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/job-queue:OrderedComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.Reason": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Common job exit reasons."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Reason",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 201
      },
      "methods": [
        {
          "docs": {
            "remarks": "Note that all specified conditions must be met for this reason to match.",
            "stability": "experimental",
            "summary": "A custom Reason that can match on multiple conditions."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 227
          },
          "name": "custom",
          "parameters": [
            {
              "name": "customReasonProps",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.CustomReason"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Reason"
            }
          },
          "static": true
        }
      ],
      "name": "Reason",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Will only match if the Docker container could not be pulled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 212
          },
          "name": "CANNOT_PULL_CONTAINER",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.Reason"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Will match any non-zero exit code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 205
          },
          "name": "NON_ZERO_EXIT_CODE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.Reason"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Will only match if the Spot instance executing the job was reclaimed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 219
          },
          "name": "SPOT_INSTANCE_RECLAIMED",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.Reason"
          }
        }
      ],
      "symbolId": "lib/job-definition-base:Reason"
    },
    "@aws-cdk/aws-batch-alpha.RetryStrategy": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Define how Jobs using this JobDefinition respond to different exit conditions."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/job-definition-base.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "action",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Action"
            }
          },
          {
            "name": "on",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Reason"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/job-definition-base.ts",
        "line": 132
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a new RetryStrategy."
          },
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 136
          },
          "name": "of",
          "parameters": [
            {
              "name": "action",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Action"
              }
            },
            {
              "name": "on",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.Reason"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.RetryStrategy"
            }
          },
          "static": true
        }
      ],
      "name": "RetryStrategy",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The action to take when the job exits with the Reason specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 143
          },
          "name": "action",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.Action"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the job exits with this Reason it will trigger the specified Action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/job-definition-base.ts",
            "line": 148
          },
          "name": "on",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.Reason"
          }
        }
      ],
      "symbolId": "lib/job-definition-base:RetryStrategy"
    },
    "@aws-cdk/aws-batch-alpha.Secret": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A secret environment variable."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Secret",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 36
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 58
          },
          "name": "fromSecretsManager",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 77
          },
          "name": "fromSecretsManagerVersion",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "the version information to reference the secret."
              },
              "name": "versionInfo",
              "type": {
                "fqn": "@aws-cdk/aws-batch-alpha.SecretVersionInfo"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates an environment variable value from a parameter stored in AWS Systems Manager Parameter Store."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 41
          },
          "name": "fromSsmParameter",
          "parameters": [
            {
              "name": "parameter",
              "type": {
                "fqn": "aws-cdk-lib.aws_ssm.IParameter"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Grants reading the secret to a principal."
          },
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 98
          },
          "name": "grantRead",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          }
        }
      ],
      "name": "Secret",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 88
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether this secret uses a specific JSON field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 93
          },
          "name": "hasField",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:Secret"
    },
    "@aws-cdk/aws-batch-alpha.SecretPathVolume": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "@aws-cdk/aws-batch-alpha.EksVolume",
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#secret",
        "stability": "experimental",
        "summary": "Specifies the configuration of a Kubernetes secret volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.SecretPathVolume",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/eks-container-definition.ts",
          "line": 902
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.SecretPathVolumeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 879
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "returns `true` if `x` is a `SecretPathVolume` and `false` otherwise."
          },
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 883
          },
          "name": "isSecretPathVolume",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "SecretPathVolume",
      "properties": [
        {
          "docs": {
            "remarks": "Must be a valid DNS subdomain name.",
            "see": "https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names",
            "stability": "experimental",
            "summary": "The name of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 893
          },
          "name": "secretName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Specifies whether the secret or the secret's keys must be defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 900
          },
          "name": "optional",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:SecretPathVolume"
    },
    "@aws-cdk/aws-batch-alpha.SecretPathVolumeOptions": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "see": "https://kubernetes.io/docs/concepts/storage/volumes/#secret",
        "stability": "experimental",
        "summary": "Options for a Kubernetes SecretPath Volume."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.SecretPathVolumeOptions",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.EksVolumeOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/eks-container-definition.ts",
        "line": 857
      },
      "name": "SecretPathVolumeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be a valid DNS subdomain name.",
            "see": "https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names",
            "stability": "experimental",
            "summary": "The name of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 864
          },
          "name": "secretName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Specifies whether the secret or the secret's keys must be defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/eks-container-definition.ts",
            "line": 871
          },
          "name": "optional",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/eks-container-definition:SecretPathVolumeOptions"
    },
    "@aws-cdk/aws-batch-alpha.SecretVersionInfo": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Specify the secret's version id or version stage."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.SecretVersionInfo",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 18
      },
      "name": "SecretVersionInfo",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- use default version id",
            "stability": "experimental",
            "summary": "version id of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 24
          },
          "name": "versionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use default version stage",
            "stability": "experimental",
            "summary": "version stage of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 30
          },
          "name": "versionStage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:SecretVersionInfo"
    },
    "@aws-cdk/aws-batch-alpha.Share": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "remarks": "All Job Definitions that\ndeclare a share identifier will be considered members of the Share\ndefined by that share identifier.\n\nThe Scheduler divides the maximum available vCPUs of the ComputeEnvironment\namong Jobs in the Queue based on their shareIdentifier and the weightFactor\nassociated with that shareIdentifier.",
        "stability": "experimental",
        "summary": "Represents a group of Job Definitions."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Share",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/scheduling-policy.ts",
        "line": 60
      },
      "name": "Share",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "All jobs that specify this share identifier\nwhen submitted to the queue will be considered as part of this Share.",
            "stability": "experimental",
            "summary": "The identifier of this Share."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 65
          },
          "name": "shareIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The Scheduler decides which jobs to put in the Compute Environment\nsuch that the following ratio is equal for each job:\n\n`sharevCpu / weightFactor`,\n\nwhere `sharevCpu` is the total amount of vCPU given to that particular share; that is,\nthe sum of the vCPU of each job currently in the Compute Environment for that share.\n\nSee the readme of this module for a detailed example that shows how these are used,\nhow it relates to `computeReservation`, and how `shareDecay` affects these calculations.",
            "stability": "experimental",
            "summary": "The weight factor given to this Share."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/scheduling-policy.ts",
            "line": 79
          },
          "name": "weightFactor",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/scheduling-policy:Share"
    },
    "@aws-cdk/aws-batch-alpha.Tmpfs": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The details of a tmpfs mount for a container."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Tmpfs",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 168
      },
      "name": "Tmpfs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The absolute file path where the tmpfs volume is to be mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 172
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The size (in MiB) of the tmpfs volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 177
          },
          "name": "size",
          "type": {
            "fqn": "aws-cdk-lib.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "For more information, see\n[TmpfsMountOptions](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Tmpfs.html).",
            "stability": "experimental",
            "summary": "The list of tmpfs volume mount options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 185
          },
          "name": "mountOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-batch-alpha.TmpfsMountOption"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/linux-parameters:Tmpfs"
    },
    "@aws-cdk/aws-batch-alpha.TmpfsMountOption": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The supported options for a tmpfs mount for a container."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.TmpfsMountOption",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 211
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DEFAULTS"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RO"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RW"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "SUID"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NOSUID"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DEV"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NODEV"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "EXEC"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NOEXEC"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "SYNC"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ASYNC"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DIRSYNC"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "REMOUNT"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MAND"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NOMAND"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NOATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DIRATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NODIRATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "BIND"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RBIND"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "UNBINDABLE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RUNBINDABLE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "PRIVATE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RPRIVATE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "SHARED"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RSHARED"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "SLAVE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RSLAVE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RELATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NORELATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "STRICTATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NOSTRICTATIME"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MODE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "UID"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "GID"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NR_INODES"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NR_BLOCKS"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MPOL"
        }
      ],
      "name": "TmpfsMountOption",
      "symbolId": "lib/linux-parameters:TmpfsMountOption"
    },
    "@aws-cdk/aws-batch-alpha.Ulimit": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "remarks": "Used by the Docker daemon.",
        "stability": "experimental",
        "summary": "Sets limits for a resource with `ulimit` on linux systems."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.Ulimit",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 734
      },
      "name": "Ulimit",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The container will\nbe terminated if it exceeds this limit.",
            "stability": "experimental",
            "summary": "The hard limit for this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 739
          },
          "name": "hardLimit",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource to limit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 744
          },
          "name": "name",
          "type": {
            "fqn": "@aws-cdk/aws-batch-alpha.UlimitName"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The container will\nnot be terminated if it exceeds this limit.",
            "stability": "experimental",
            "summary": "The reservation for this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs-container-definition.ts",
            "line": 750
          },
          "name": "softLimit",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs-container-definition:Ulimit"
    },
    "@aws-cdk/aws-batch-alpha.UlimitName": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The resources to be limited."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.UlimitName",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/ecs-container-definition.ts",
        "line": 756
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "max core dump file size."
          },
          "name": "CORE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max cpu time (seconds) for a process."
          },
          "name": "CPU"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max data segment size."
          },
          "name": "DATA"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max file size."
          },
          "name": "FSIZE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max number of file locks."
          },
          "name": "LOCKS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max locked memory."
          },
          "name": "MEMLOCK"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max POSIX message queue size."
          },
          "name": "MSGQUEUE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max nice value for any process this user is running."
          },
          "name": "NICE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "maximum number of open file descriptors."
          },
          "name": "NOFILE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "maximum number of processes."
          },
          "name": "NPROC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "size of the process' resident set (in pages)."
          },
          "name": "RSS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max realtime priority."
          },
          "name": "RTPRIO"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "timeout for realtime tasks."
          },
          "name": "RTTIME"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max number of pending signals."
          },
          "name": "SIGPENDING"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "max stack size (in bytes)."
          },
          "name": "STACK"
        }
      ],
      "name": "UlimitName",
      "symbolId": "lib/ecs-container-definition:UlimitName"
    },
    "@aws-cdk/aws-batch-alpha.UnmanagedComputeEnvironment": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Batch::ComputeEnvironment"
        },
        "stability": "experimental",
        "summary": "Unmanaged ComputeEnvironments do not provision or manage EC2 instances on your behalf."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.UnmanagedComputeEnvironment",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/unmanaged-compute-environment.ts",
          "line": 68
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.UnmanagedComputeEnvironmentProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.IUnmanagedComputeEnvironment",
        "@aws-cdk/aws-batch-alpha.IComputeEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/unmanaged-compute-environment.ts",
        "line": 44
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an UnmanagedComputeEnvironment by its arn."
          },
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 48
          },
          "name": "fromUnmanagedComputeEnvironmentArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "unmanagedComputeEnvironmentArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-batch-alpha.IUnmanagedComputeEnvironment"
            }
          },
          "static": true
        }
      ],
      "name": "UnmanagedComputeEnvironment",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this compute environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 65
          },
          "name": "computeEnvironmentArn",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the ComputeEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 66
          },
          "name": "computeEnvironmentName",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Enabled ComputeEnvironments can accept jobs from a Queue and\ncan scale instances up or down.\nDisabled ComputeEnvironments cannot accept jobs from a Queue or\nscale instances up or down.\n\nIf you change a ComputeEnvironment from enabled to disabled while it is executing jobs,\nJobs in the `STARTED` or `RUNNING` states will not\nbe interrupted. As jobs complete, the ComputeEnvironment will scale instances down to `minvCpus`.\n\nTo ensure you aren't billed for unused capacity, set `minvCpus` to `0`.",
            "stability": "experimental",
            "summary": "Whether or not this ComputeEnvironment can accept jobs from a Queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 92
          },
          "name": "enabled",
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The role Batch uses to perform actions on your behalf in your account, such as provision instances to run your jobs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compute-environment-base.ts",
            "line": 91
          },
          "name": "serviceRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IComputeEnvironment",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "**If this parameter is not provided on a fairshare queue, no capacity is reserved**;\nthat is, the `FairshareSchedulingPolicy` is ignored.",
            "stability": "experimental",
            "summary": "The vCPUs this Compute Environment provides. Used only by the scheduler to schedule jobs in `Queue`s that use `FairshareSchedulingPolicy`s."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 64
          },
          "name": "unmanagedvCPUs",
          "optional": true,
          "overrides": "@aws-cdk/aws-batch-alpha.IUnmanagedComputeEnvironment",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/unmanaged-compute-environment:UnmanagedComputeEnvironment"
    },
    "@aws-cdk/aws-batch-alpha.UnmanagedComputeEnvironmentProps": {
      "assembly": "@aws-cdk/aws-batch-alpha",
      "datatype": true,
      "docs": {
        "remarks": "Batch will not provision instances on your behalf\nin this ComputeEvironment.",
        "stability": "experimental",
        "summary": "Represents an UnmanagedComputeEnvironment."
      },
      "fqn": "@aws-cdk/aws-batch-alpha.UnmanagedComputeEnvironmentProps",
      "interfaces": [
        "@aws-cdk/aws-batch-alpha.ComputeEnvironmentProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/unmanaged-compute-environment.ts",
        "line": 26
      },
      "name": "UnmanagedComputeEnvironmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "remarks": "**If this parameter is not provided on a fairshare queue, no capacity is reserved**;\nthat is, the `FairshareSchedulingPolicy` is ignored.",
            "stability": "experimental",
            "summary": "The vCPUs this Compute Environment provides. Used only by the scheduler to schedule jobs in `Queue`s that use `FairshareSchedulingPolicy`s."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/unmanaged-compute-environment.ts",
            "line": 36
          },
          "name": "unmanagedvCpus",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/unmanaged-compute-environment:UnmanagedComputeEnvironmentProps"
    }
  },
  "version": "0.0.0",
  "fingerprint": "oTncRAlRM55jMKT9Vxi1eKfuNXfCgiLRFVfCY18w+gM="
}