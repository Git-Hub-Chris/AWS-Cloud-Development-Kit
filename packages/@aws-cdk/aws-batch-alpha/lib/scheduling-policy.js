"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FairshareSchedulingPolicy = exports.SchedulingPolicyBase = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("aws-cdk-lib/core");
const aws_batch_1 = require("aws-cdk-lib/aws-batch");
/**
 * @internal
 */
class SchedulingPolicyBase extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props?.schedulingPolicyName,
        });
    }
}
exports.SchedulingPolicyBase = SchedulingPolicyBase;
/**
 * Represents a Fairshare Scheduling Policy. Instructs the scheduler
 * to allocate ComputeEnvironment vCPUs based on Job shareIdentifiers.
 *
 * The Faireshare Scheduling Policy ensures that each share gets a certain amount of vCPUs.
 * The scheduler does this by deciding how many Jobs of each share to schedule *relative to how many jobs of
 * each share are currently being executed by the ComputeEnvironment*. The weight factors associated with
 * each share determine the ratio of vCPUs allocated; see the readme for a more in-depth discussion of
 * fairshare policies.
 *
 * @resource AWS::Batch::SchedulingPolicy
 */
class FairshareSchedulingPolicy extends SchedulingPolicyBase {
    /**
     * Reference an exisiting Scheduling Policy by its ARN
     */
    static fromFairshareSchedulingPolicyArn(scope, id, fairshareSchedulingPolicyArn) {
        const stack = core_1.Stack.of(scope);
        class Import extends SchedulingPolicyBase {
            constructor() {
                super(...arguments);
                this.schedulingPolicyArn = fairshareSchedulingPolicyArn;
                this.schedulingPolicyName = stack.splitArn(fairshareSchedulingPolicyArn, core_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
                this.shares = [];
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_batch_alpha_FairshareSchedulingPolicyProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, FairshareSchedulingPolicy);
            }
            throw error;
        }
        this.computeReservation = props?.computeReservation;
        this.shareDecay = props?.shareDecay;
        this.shares = props?.shares ?? [];
        const resource = new aws_batch_1.CfnSchedulingPolicy(this, 'Resource', {
            fairsharePolicy: {
                computeReservation: this.computeReservation,
                shareDecaySeconds: this.shareDecay?.toSeconds(),
                shareDistribution: core_1.Lazy.any({
                    produce: () => this.shares?.map((share) => ({
                        shareIdentifier: share.shareIdentifier,
                        weightFactor: share.weightFactor,
                    })),
                }),
            },
            name: props?.schedulingPolicyName,
        });
        this.schedulingPolicyArn = this.getResourceArnAttribute(resource.attrArn, {
            service: 'batch',
            resource: 'scheduling-policy',
            resourceName: this.physicalName,
        });
        this.schedulingPolicyName = this.getResourceNameAttribute(resource.ref);
    }
    /**
     * Add a share this to this Fairshare SchedulingPolicy
     */
    addShare(share) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_batch_alpha_Share(share);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addShare);
            }
            throw error;
        }
        this.shares.push(share);
    }
}
exports.FairshareSchedulingPolicy = FairshareSchedulingPolicy;
_a = JSII_RTTI_SYMBOL_1;
FairshareSchedulingPolicy[_a] = { fqn: "@aws-cdk/aws-batch-alpha.FairshareSchedulingPolicy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGluZy1wb2xpY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2hlZHVsaW5nLXBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBeUY7QUFFekYscURBQTREO0FBa0M1RDs7R0FFRztBQUNILE1BQXNCLG9CQUFxQixTQUFRLGVBQVE7SUFJekQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE2QjtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksRUFBRSxLQUFLLEVBQUUsb0JBQW9CO1NBQzFDLENBQUMsQ0FBQztLQUNKO0NBQ0Y7QUFURCxvREFTQztBQWtJRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQWEseUJBQTBCLFNBQVEsb0JBQW9CO0lBQ2pFOztPQUVHO0lBQ0ksTUFBTSxDQUFDLGdDQUFnQyxDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLDRCQUFvQztRQUMvRyxNQUFNLEtBQUssR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE1BQU0sTUFBTyxTQUFRLG9CQUFvQjtZQUF6Qzs7Z0JBQ2tCLHdCQUFtQixHQUFHLDRCQUE0QixDQUFDO2dCQUNuRCx5QkFBb0IsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLGdCQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxZQUFhLENBQUM7Z0JBQ2pILFdBQU0sR0FBRyxFQUFFLENBQUM7WUFDOUIsQ0FBQztTQUFBO1FBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDOUI7SUFRRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNDO1FBQzlFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDOzs7Ozs7K0NBdEJmLHlCQUF5Qjs7OztRQXVCbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssRUFBRSxrQkFBa0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssRUFBRSxVQUFVLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFJLCtCQUFtQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDekQsZUFBZSxFQUFFO2dCQUNmLGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7Z0JBQzNDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFO2dCQUMvQyxpQkFBaUIsRUFBRSxXQUFJLENBQUMsR0FBRyxDQUFDO29CQUMxQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7d0JBQzFDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTt3QkFDdEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO3FCQUNqQyxDQUFDLENBQUM7aUJBQ0osQ0FBQzthQUNIO1lBQ0QsSUFBSSxFQUFFLEtBQUssRUFBRSxvQkFBb0I7U0FDbEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3hFLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1NBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pFO0lBRUQ7O09BRUc7SUFDSSxRQUFRLENBQUMsS0FBWTs7Ozs7Ozs7OztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6Qjs7QUFyREgsOERBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJuRm9ybWF0LCBEdXJhdGlvbiwgSVJlc291cmNlLCBMYXp5LCBSZXNvdXJjZSwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYi9jb3JlJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQ2ZuU2NoZWR1bGluZ1BvbGljeSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iYXRjaCc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFNjaGVkdWxpbmcgUG9saWN5LiBTY2hlZHVsaW5nIFBvbGljaWVzIHRlbGwgdGhlIEJhdGNoXG4gKiBKb2IgU2NoZWR1bGVyIGhvdyB0byBzY2hlZHVsZSBpbmNvbWluZyBqb2JzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTY2hlZHVsaW5nUG9saWN5IGV4dGVuZHMgSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgc2NoZWR1bGluZyBwb2xpY3lcbiAgICpcbiAgICogQGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVhZG9ubHkgc2NoZWR1bGluZ1BvbGljeU5hbWU6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBUaGUgYXJuIG9mIHRoaXMgc2NoZWR1bGluZyBwb2xpY3lcbiAgICpcbiAgICogQGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVhZG9ubHkgc2NoZWR1bGluZ1BvbGljeUFybjogc3RyaW5nO1xufVxuXG4vKipcbiAqIFByb3BzIHRvIGNvbmZpZ3VyZSBhIFNjaGVkdWxpbmdQb2xpY3lcbiAqL1xuaW50ZXJmYWNlIFNjaGVkdWxpbmdQb2xpY3lQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIFNjaGVkdWxpbmdQb2xpY3lcbiAgICpcbiAgICogQGRlZmF1bHQgLSBnZW5lcmF0ZWQgYnkgQ2xvdWRGb3JtYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHNjaGVkdWxpbmdQb2xpY3lOYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2NoZWR1bGluZ1BvbGljeUJhc2UgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElTY2hlZHVsaW5nUG9saWN5IHtcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHNjaGVkdWxpbmdQb2xpY3lOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBzY2hlZHVsaW5nUG9saWN5QXJuOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTY2hlZHVsaW5nUG9saWN5UHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHBoeXNpY2FsTmFtZTogcHJvcHM/LnNjaGVkdWxpbmdQb2xpY3lOYW1lLFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGdyb3VwIG9mIEpvYiBEZWZpbml0aW9ucy4gQWxsIEpvYiBEZWZpbml0aW9ucyB0aGF0XG4gKiBkZWNsYXJlIGEgc2hhcmUgaWRlbnRpZmllciB3aWxsIGJlIGNvbnNpZGVyZWQgbWVtYmVycyBvZiB0aGUgU2hhcmVcbiAqIGRlZmluZWQgYnkgdGhhdCBzaGFyZSBpZGVudGlmaWVyLlxuICpcbiAqIFRoZSBTY2hlZHVsZXIgZGl2aWRlcyB0aGUgbWF4aW11bSBhdmFpbGFibGUgdkNQVXMgb2YgdGhlIENvbXB1dGVFbnZpcm9ubWVudFxuICogYW1vbmcgSm9icyBpbiB0aGUgUXVldWUgYmFzZWQgb24gdGhlaXIgc2hhcmVJZGVudGlmaWVyIGFuZCB0aGUgd2VpZ2h0RmFjdG9yXG4gKiBhc3NvY2lhdGVkIHdpdGggdGhhdCBzaGFyZUlkZW50aWZpZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hhcmUge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhpcyBTaGFyZS4gQWxsIGpvYnMgdGhhdCBzcGVjaWZ5IHRoaXMgc2hhcmUgaWRlbnRpZmllclxuICAgKiB3aGVuIHN1Ym1pdHRlZCB0byB0aGUgcXVldWUgd2lsbCBiZSBjb25zaWRlcmVkIGFzIHBhcnQgb2YgdGhpcyBTaGFyZS5cbiAgICovXG4gIHJlYWRvbmx5IHNoYXJlSWRlbnRpZmllcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgd2VpZ2h0IGZhY3RvciBnaXZlbiB0byB0aGlzIFNoYXJlLiBUaGUgU2NoZWR1bGVyIGRlY2lkZXMgd2hpY2ggam9icyB0byBwdXQgaW4gdGhlIENvbXB1dGUgRW52aXJvbm1lbnRcbiAgICogc3VjaCB0aGF0IHRoZSBmb2xsb3dpbmcgcmF0aW8gaXMgZXF1YWwgZm9yIGVhY2ggam9iOlxuICAgKlxuICAgKiBgc2hhcmV2Q3B1IC8gd2VpZ2h0RmFjdG9yYCxcbiAgICpcbiAgICogd2hlcmUgYHNoYXJldkNwdWAgaXMgdGhlIHRvdGFsIGFtb3VudCBvZiB2Q1BVIGdpdmVuIHRvIHRoYXQgcGFydGljdWxhciBzaGFyZTsgdGhhdCBpcyxcbiAgICogdGhlIHN1bSBvZiB0aGUgdkNQVSBvZiBlYWNoIGpvYiBjdXJyZW50bHkgaW4gdGhlIENvbXB1dGUgRW52aXJvbm1lbnQgZm9yIHRoYXQgc2hhcmUuXG4gICAqXG4gICAqIFNlZSB0aGUgcmVhZG1lIG9mIHRoaXMgbW9kdWxlIGZvciBhIGRldGFpbGVkIGV4YW1wbGUgdGhhdCBzaG93cyBob3cgdGhlc2UgYXJlIHVzZWQsXG4gICAqIGhvdyBpdCByZWxhdGVzIHRvIGBjb21wdXRlUmVzZXJ2YXRpb25gLCBhbmQgaG93IGBzaGFyZURlY2F5YCBhZmZlY3RzIHRoZXNlIGNhbGN1bGF0aW9ucy5cbiAgICovXG4gIHJlYWRvbmx5IHdlaWdodEZhY3RvcjogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBGYWlyc2hhcmUgU2NoZWR1bGluZyBQb2xpY3kuIEluc3RydWN0cyB0aGUgc2NoZWR1bGVyXG4gKiB0byBhbGxvY2F0ZSBDb21wdXRlRW52aXJvbm1lbnQgdkNQVXMgYmFzZWQgb24gSm9iIHNoYXJlSWRlbnRpZmllcnMuXG4gKlxuICogVGhlIEZhaXJlc2hhcmUgU2NoZWR1bGluZyBQb2xpY3kgZW5zdXJlcyB0aGF0IGVhY2ggc2hhcmUgZ2V0cyBhIGNlcnRhaW4gYW1vdW50IG9mIHZDUFVzLlxuICogSXQgZG9lcyB0aGlzIGJ5IGRlY2lkaW5nIGhvdyBtYW55IEpvYnMgb2YgZWFjaCBzaGFyZSB0byBzY2hlZHVsZSAqcmVsYXRpdmUgdG8gaG93IG1hbnkgam9icyBvZlxuICogZWFjaCBzaGFyZSBhcmUgY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkIGJ5IHRoZSBDb21wdXRlRW52aXJvbm1lbnQqLiBUaGUgd2VpZ2h0IGZhY3RvcnMgYXNzb2NpYXRlZCB3aXRoXG4gKiBlYWNoIHNoYXJlIGRldGVybWluZSB0aGUgcmF0aW8gb2YgdkNQVXMgYWxsb2NhdGVkOyBzZWUgdGhlIHJlYWRtZSBmb3IgYSBtb3JlIGluLWRlcHRoIGRpc2N1c3Npb24gb2ZcbiAqIGZhaXJzaGFyZSBwb2xpY2llcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRmFpcnNoYXJlU2NoZWR1bGluZ1BvbGljeSBleHRlbmRzIElTY2hlZHVsaW5nUG9saWN5IHtcbiAgLyoqXG4gICAqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB2Q1BVIHRvIHJlc2VydmUgZm9yIHNoYXJlIGlkZW50aWZpZXJzIG5vdCBwcmVzZW50IGluIHRoZSBRdWV1ZS5cbiAgICpcbiAgICogVGhlIHBlcmNlbnRhZ2UgcmVzZXJ2ZWQgaXMgZGVmaW5lZCBieSB0aGUgU2NoZWR1bGVyIGFzOlxuICAgKiBgKGNvbXB1dGVSZXNlcnZhdGlvbi8xMDApXkFjdGl2ZUZhaXJTaGFyZXNgIHdoZXJlIGBBY3RpdmVGYWlyU2hhcmVzYCBpcyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBmYWlyIHNoYXJlIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgYSBjb21wdXRlUmVzZXJ2YXRpb24gdmFsdWUgb2YgNTAgaW5kaWNhdGVzIHRoYXQgQVdTIEJhdGNoIHJlc2VydmVzIDUwJSBvZiB0aGVcbiAgICogbWF4aW11bSBhdmFpbGFibGUgdkNQVSBpZiB0aGVyZSdzIG9ubHkgb25lIGZhaXIgc2hhcmUgaWRlbnRpZmllci5cbiAgICogSXQgcmVzZXJ2ZXMgMjUlIGlmIHRoZXJlIGFyZSB0d28gZmFpciBzaGFyZSBpZGVudGlmaWVycy5cbiAgICogSXQgcmVzZXJ2ZXMgMTIuNSUgaWYgdGhlcmUgYXJlIHRocmVlIGZhaXIgc2hhcmUgaWRlbnRpZmllcnMuXG4gICAqXG4gICAqIEEgY29tcHV0ZVJlc2VydmF0aW9uIHZhbHVlIG9mIDI1IGluZGljYXRlcyB0aGF0IEFXUyBCYXRjaCBzaG91bGQgcmVzZXJ2ZSAyNSUgb2YgdGhlXG4gICAqIG1heGltdW0gYXZhaWxhYmxlIHZDUFUgaWYgdGhlcmUncyBvbmx5IG9uZSBmYWlyIHNoYXJlIGlkZW50aWZpZXIsXG4gICAqIDYuMjUlIGlmIHRoZXJlIGFyZSB0d28gZmFpciBzaGFyZSBpZGVudGlmaWVycyxcbiAgICogYW5kIDEuNTYlIGlmIHRoZXJlIGFyZSB0aHJlZSBmYWlyIHNoYXJlIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIHZDUFUgaXMgcmVzZXJ2ZWRcbiAgICovXG4gIHJlYWRvbmx5IGNvbXB1dGVSZXNlcnZhdGlvbj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGFtb3VudCBvZiB0aW1lIHRvIHVzZSB0byBtZWFzdXJlIHRoZSB1c2FnZSBvZiBlYWNoIGpvYi5cbiAgICogVGhlIHVzYWdlIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGEgZmFpciBzaGFyZSBwZXJjZW50YWdlIGZvciBlYWNoIGZhaXIgc2hhcmUgaWRlbnRpZmllciBjdXJyZW50bHkgaW4gdGhlIFF1ZXVlLlxuICAgKiBBIHZhbHVlIG9mIHplcm8gKDApIGluZGljYXRlcyB0aGF0IG9ubHkgY3VycmVudCB1c2FnZSBpcyBtZWFzdXJlZC5cbiAgICogVGhlIGRlY2F5IGlzIGxpbmVhciBhbmQgZ2l2ZXMgcHJlZmVyZW5jZSB0byBuZXdlciBqb2JzLlxuICAgKlxuICAgKiBUaGUgbWF4aW11bSBzdXBwb3J0ZWQgdmFsdWUgaXMgNjA0ODAwIHNlY29uZHMgKDEgd2VlaykuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMDogb25seSB0aGUgY3VycmVudCBqb2IgdXNhZ2UgaXMgY29uc2lkZXJlZFxuICAgKi9cbiAgcmVhZG9ubHkgc2hhcmVEZWNheT86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgc2hhcmVzIHRoYXQgdGhpcyBTY2hlZHVsaW5nIFBvbGljeSBhcHBsaWVzIHRvLlxuICAgKiAqTm90ZSo6IEl0IGlzIHBvc3NpYmxlIHRvIHN1Ym1pdCBKb2JzIHRvIHRoZSBxdWV1ZSB3aXRoIFNoYXJlIElkZW50aWZpZXJzIHRoYXRcbiAgICogYXJlIG5vdCByZWNvZ25pemVkIGJ5IHRoZSBTY2hlZHVsaW5nIFBvbGljeS5cbiAgICovXG4gIHJlYWRvbmx5IHNoYXJlczogU2hhcmVbXTtcbn1cblxuLyoqXG4gKiBGYWlyc2hhcmUgU2NoZWR1bGluZ1BvbGljeSBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmFpcnNoYXJlU2NoZWR1bGluZ1BvbGljeVByb3BzIGV4dGVuZHMgU2NoZWR1bGluZ1BvbGljeVByb3BzIHtcbiAgLyoqXG4gICAqIFVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB2Q1BVIHRvIHJlc2VydmUgZm9yIHNoYXJlIGlkZW50aWZpZXJzIG5vdCBwcmVzZW50IGluIHRoZSBRdWV1ZS5cbiAgICpcbiAgICogVGhlIHBlcmNlbnRhZ2UgcmVzZXJ2ZWQgaXMgZGVmaW5lZCBieSB0aGUgU2NoZWR1bGVyIGFzOlxuICAgKiBgKGNvbXB1dGVSZXNlcnZhdGlvbi8xMDApXkFjdGl2ZUZhaXJTaGFyZXNgIHdoZXJlIGBBY3RpdmVGYWlyU2hhcmVzYCBpcyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBmYWlyIHNoYXJlIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgYSBjb21wdXRlUmVzZXJ2YXRpb24gdmFsdWUgb2YgNTAgaW5kaWNhdGVzIHRoYXQgQVdTIEJhdGNoIHJlc2VydmVzIDUwJSBvZiB0aGVcbiAgICogbWF4aW11bSBhdmFpbGFibGUgdkNQVSBpZiB0aGVyZSdzIG9ubHkgb25lIGZhaXIgc2hhcmUgaWRlbnRpZmllci5cbiAgICogSXQgcmVzZXJ2ZXMgMjUlIGlmIHRoZXJlIGFyZSB0d28gZmFpciBzaGFyZSBpZGVudGlmaWVycy5cbiAgICogSXQgcmVzZXJ2ZXMgMTIuNSUgaWYgdGhlcmUgYXJlIHRocmVlIGZhaXIgc2hhcmUgaWRlbnRpZmllcnMuXG4gICAqXG4gICAqIEEgY29tcHV0ZVJlc2VydmF0aW9uIHZhbHVlIG9mIDI1IGluZGljYXRlcyB0aGF0IEFXUyBCYXRjaCBzaG91bGQgcmVzZXJ2ZSAyNSUgb2YgdGhlXG4gICAqIG1heGltdW0gYXZhaWxhYmxlIHZDUFUgaWYgdGhlcmUncyBvbmx5IG9uZSBmYWlyIHNoYXJlIGlkZW50aWZpZXIsXG4gICAqIDYuMjUlIGlmIHRoZXJlIGFyZSB0d28gZmFpciBzaGFyZSBpZGVudGlmaWVycyxcbiAgICogYW5kIDEuNTYlIGlmIHRoZXJlIGFyZSB0aHJlZSBmYWlyIHNoYXJlIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIHZDUFUgaXMgcmVzZXJ2ZWRcbiAgICovXG4gIHJlYWRvbmx5IGNvbXB1dGVSZXNlcnZhdGlvbj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGFtb3VudCBvZiB0aW1lIHRvIHVzZSB0byBtZWFzdXJlIHRoZSB1c2FnZSBvZiBlYWNoIGpvYi5cbiAgICogVGhlIHVzYWdlIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGEgZmFpciBzaGFyZSBwZXJjZW50YWdlIGZvciBlYWNoIGZhaXIgc2hhcmUgaWRlbnRpZmllciBjdXJyZW50bHkgaW4gdGhlIFF1ZXVlLlxuICAgKiBBIHZhbHVlIG9mIHplcm8gKDApIGluZGljYXRlcyB0aGF0IG9ubHkgY3VycmVudCB1c2FnZSBpcyBtZWFzdXJlZC5cbiAgICogVGhlIGRlY2F5IGlzIGxpbmVhciBhbmQgZ2l2ZXMgcHJlZmVyZW5jZSB0byBuZXdlciBqb2JzLlxuICAgKlxuICAgKiBUaGUgbWF4aW11bSBzdXBwb3J0ZWQgdmFsdWUgaXMgNjA0ODAwIHNlY29uZHMgKDEgd2VlaykuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMDogb25seSB0aGUgY3VycmVudCBqb2IgdXNhZ2UgaXMgY29uc2lkZXJlZFxuICAgKi9cbiAgcmVhZG9ubHkgc2hhcmVEZWNheT86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgc2hhcmVzIHRoYXQgdGhpcyBTY2hlZHVsaW5nIFBvbGljeSBhcHBsaWVzIHRvLlxuICAgKiAqTm90ZSo6IEl0IGlzIHBvc3NpYmxlIHRvIHN1Ym1pdCBKb2JzIHRvIHRoZSBxdWV1ZSB3aXRoIFNoYXJlIElkZW50aWZpZXJzIHRoYXRcbiAgICogYXJlIG5vdCByZWNvZ25pemVkIGJ5IHRoZSBTY2hlZHVsaW5nIFBvbGljeS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBubyBzaGFyZXNcbiAgICovXG4gIHJlYWRvbmx5IHNoYXJlcz86IFNoYXJlW107XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIEZhaXJzaGFyZSBTY2hlZHVsaW5nIFBvbGljeS4gSW5zdHJ1Y3RzIHRoZSBzY2hlZHVsZXJcbiAqIHRvIGFsbG9jYXRlIENvbXB1dGVFbnZpcm9ubWVudCB2Q1BVcyBiYXNlZCBvbiBKb2Igc2hhcmVJZGVudGlmaWVycy5cbiAqXG4gKiBUaGUgRmFpcmVzaGFyZSBTY2hlZHVsaW5nIFBvbGljeSBlbnN1cmVzIHRoYXQgZWFjaCBzaGFyZSBnZXRzIGEgY2VydGFpbiBhbW91bnQgb2YgdkNQVXMuXG4gKiBUaGUgc2NoZWR1bGVyIGRvZXMgdGhpcyBieSBkZWNpZGluZyBob3cgbWFueSBKb2JzIG9mIGVhY2ggc2hhcmUgdG8gc2NoZWR1bGUgKnJlbGF0aXZlIHRvIGhvdyBtYW55IGpvYnMgb2ZcbiAqIGVhY2ggc2hhcmUgYXJlIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZCBieSB0aGUgQ29tcHV0ZUVudmlyb25tZW50Ki4gVGhlIHdlaWdodCBmYWN0b3JzIGFzc29jaWF0ZWQgd2l0aFxuICogZWFjaCBzaGFyZSBkZXRlcm1pbmUgdGhlIHJhdGlvIG9mIHZDUFVzIGFsbG9jYXRlZDsgc2VlIHRoZSByZWFkbWUgZm9yIGEgbW9yZSBpbi1kZXB0aCBkaXNjdXNzaW9uIG9mXG4gKiBmYWlyc2hhcmUgcG9saWNpZXMuXG4gKlxuICogQHJlc291cmNlIEFXUzo6QmF0Y2g6OlNjaGVkdWxpbmdQb2xpY3lcbiAqL1xuZXhwb3J0IGNsYXNzIEZhaXJzaGFyZVNjaGVkdWxpbmdQb2xpY3kgZXh0ZW5kcyBTY2hlZHVsaW5nUG9saWN5QmFzZSBpbXBsZW1lbnRzIElGYWlyc2hhcmVTY2hlZHVsaW5nUG9saWN5IHtcbiAgLyoqXG4gICAqIFJlZmVyZW5jZSBhbiBleGlzaXRpbmcgU2NoZWR1bGluZyBQb2xpY3kgYnkgaXRzIEFSTlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tRmFpcnNoYXJlU2NoZWR1bGluZ1BvbGljeUFybihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBmYWlyc2hhcmVTY2hlZHVsaW5nUG9saWN5QXJuOiBzdHJpbmcpOiBJRmFpcnNoYXJlU2NoZWR1bGluZ1BvbGljeSB7XG4gICAgY29uc3Qgc3RhY2sgPSBTdGFjay5vZihzY29wZSk7XG4gICAgY2xhc3MgSW1wb3J0IGV4dGVuZHMgU2NoZWR1bGluZ1BvbGljeUJhc2UgaW1wbGVtZW50cyBJRmFpcnNoYXJlU2NoZWR1bGluZ1BvbGljeSB7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgc2NoZWR1bGluZ1BvbGljeUFybiA9IGZhaXJzaGFyZVNjaGVkdWxpbmdQb2xpY3lBcm47XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgc2NoZWR1bGluZ1BvbGljeU5hbWUgPSBzdGFjay5zcGxpdEFybihmYWlyc2hhcmVTY2hlZHVsaW5nUG9saWN5QXJuLCBBcm5Gb3JtYXQuU0xBU0hfUkVTT1VSQ0VfTkFNRSkucmVzb3VyY2VOYW1lITtcbiAgICAgIHB1YmxpYyByZWFkb25seSBzaGFyZXMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEltcG9ydChzY29wZSwgaWQpO1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGNvbXB1dGVSZXNlcnZhdGlvbj86IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHNoYXJlRGVjYXk/OiBEdXJhdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHNoYXJlczogU2hhcmVbXTtcbiAgcHVibGljIHJlYWRvbmx5IHNjaGVkdWxpbmdQb2xpY3lBcm46IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHNjaGVkdWxpbmdQb2xpY3lOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBGYWlyc2hhcmVTY2hlZHVsaW5nUG9saWN5UHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICB0aGlzLmNvbXB1dGVSZXNlcnZhdGlvbiA9IHByb3BzPy5jb21wdXRlUmVzZXJ2YXRpb247XG4gICAgdGhpcy5zaGFyZURlY2F5ID0gcHJvcHM/LnNoYXJlRGVjYXk7XG4gICAgdGhpcy5zaGFyZXMgPSBwcm9wcz8uc2hhcmVzID8/IFtdO1xuICAgIGNvbnN0IHJlc291cmNlID0gbmV3IENmblNjaGVkdWxpbmdQb2xpY3kodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgZmFpcnNoYXJlUG9saWN5OiB7XG4gICAgICAgIGNvbXB1dGVSZXNlcnZhdGlvbjogdGhpcy5jb21wdXRlUmVzZXJ2YXRpb24sXG4gICAgICAgIHNoYXJlRGVjYXlTZWNvbmRzOiB0aGlzLnNoYXJlRGVjYXk/LnRvU2Vjb25kcygpLFxuICAgICAgICBzaGFyZURpc3RyaWJ1dGlvbjogTGF6eS5hbnkoe1xuICAgICAgICAgIHByb2R1Y2U6ICgpID0+IHRoaXMuc2hhcmVzPy5tYXAoKHNoYXJlKSA9PiAoe1xuICAgICAgICAgICAgc2hhcmVJZGVudGlmaWVyOiBzaGFyZS5zaGFyZUlkZW50aWZpZXIsXG4gICAgICAgICAgICB3ZWlnaHRGYWN0b3I6IHNoYXJlLndlaWdodEZhY3RvcixcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICAgIG5hbWU6IHByb3BzPy5zY2hlZHVsaW5nUG9saWN5TmFtZSxcbiAgICB9KTtcblxuICAgIHRoaXMuc2NoZWR1bGluZ1BvbGljeUFybiA9IHRoaXMuZ2V0UmVzb3VyY2VBcm5BdHRyaWJ1dGUocmVzb3VyY2UuYXR0ckFybiwge1xuICAgICAgc2VydmljZTogJ2JhdGNoJyxcbiAgICAgIHJlc291cmNlOiAnc2NoZWR1bGluZy1wb2xpY3knLFxuICAgICAgcmVzb3VyY2VOYW1lOiB0aGlzLnBoeXNpY2FsTmFtZSxcbiAgICB9KTtcbiAgICB0aGlzLnNjaGVkdWxpbmdQb2xpY3lOYW1lID0gdGhpcy5nZXRSZXNvdXJjZU5hbWVBdHRyaWJ1dGUocmVzb3VyY2UucmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBzaGFyZSB0aGlzIHRvIHRoaXMgRmFpcnNoYXJlIFNjaGVkdWxpbmdQb2xpY3lcbiAgICovXG4gIHB1YmxpYyBhZGRTaGFyZShzaGFyZTogU2hhcmUpIHtcbiAgICB0aGlzLnNoYXJlcy5wdXNoKHNoYXJlKTtcbiAgfVxufVxuIl19