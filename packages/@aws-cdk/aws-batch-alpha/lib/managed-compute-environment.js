"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FargateComputeEnvironment = exports.ManagedEc2EksComputeEnvironment = exports.ManagedEc2EcsComputeEnvironment = exports.AllocationStrategy = exports.EksMachineImageType = exports.EcsMachineImageType = exports.ManagedComputeEnvironmentBase = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const core_1 = require("aws-cdk-lib/core");
const aws_batch_1 = require("aws-cdk-lib/aws-batch");
const compute_environment_base_1 = require("./compute-environment-base");
/**
 * Abstract base class for ManagedComputeEnvironments
 * @internal
 */
class ManagedComputeEnvironmentBase extends compute_environment_base_1.ComputeEnvironmentBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.tags = new core_1.TagManager(core_1.TagType.MAP, 'AWS::Batch::ComputeEnvironment');
        this.maxvCpus = props.maxvCpus ?? DEFAULT_MAX_VCPUS;
        this.replaceComputeEnvironment = props.replaceComputeEnvironment ?? false;
        this.spot = props.spot;
        this.updateTimeout = props.updateTimeout;
        this.terminateOnUpdate = props.terminateOnUpdate;
        this.updateToLatestImageVersion = props.updateToLatestImageVersion ?? true;
        this.securityGroups = props.securityGroups ?? [
            new ec2.SecurityGroup(this, 'SecurityGroup', {
                vpc: props.vpc,
            }),
        ];
        this.connections = new ec2.Connections({
            securityGroups: this.securityGroups,
        });
    }
}
exports.ManagedComputeEnvironmentBase = ManagedComputeEnvironmentBase;
/**
 * Maps the image to instance types
 */
var EcsMachineImageType;
(function (EcsMachineImageType) {
    /**
     * Tells Batch that this machine image runs on non-GPU instances
     */
    EcsMachineImageType["ECS_AL2"] = "ECS_AL2";
    /**
     * Tells Batch that this machine image runs on GPU instances
     */
    EcsMachineImageType["ECS_AL2_NVIDIA"] = "ECS_AL2_NVIDIA";
})(EcsMachineImageType || (exports.EcsMachineImageType = EcsMachineImageType = {}));
/**
 * Maps the image to instance types
 */
var EksMachineImageType;
(function (EksMachineImageType) {
    /**
     * Tells Batch that this machine image runs on non-GPU instances
     */
    EksMachineImageType["EKS_AL2"] = "EKS_AL2";
    /**
     * Tells Batch that this machine image runs on GPU instances
     */
    EksMachineImageType["EKS_AL2_NVIDIA"] = "EKS_AL2_NVIDIA";
})(EksMachineImageType || (exports.EksMachineImageType = EksMachineImageType = {}));
/**
 * Determines how this compute environment chooses instances to spawn
 *
 * @see https://aws.amazon.com/blogs/compute/optimizing-for-cost-availability-and-throughput-by-selecting-your-aws-batch-allocation-strategy/
 */
var AllocationStrategy;
(function (AllocationStrategy) {
    /**
     * Batch chooses the lowest-cost instance type that fits all the jobs in the queue.
     * If instances of that type are not available, the queue will not choose a new type;
     * instead, it will wait for the instance to become available.
     * This can stall your `Queue`, with your compute environment only using part of its max capacity
     * (or none at all) until the `BEST_FIT` instance becomes available.
     * This allocation strategy keeps costs lower but can limit scaling.
     * `BEST_FIT` isn't supported when updating compute environments
     */
    AllocationStrategy["BEST_FIT"] = "BEST_FIT";
    /**
     * This is the default Allocation Strategy if `spot` is `false` or unspecified.
     * This strategy will examine the Jobs in the queue and choose whichever instance type meets the requirements
     * of the jobs in the queue and with the lowest cost per vCPU, just as `BEST_FIT`.
     * However, if not all of the capacity can be filled with this instance type,
     * it will choose a new next-best instance type to run any jobs that couldn’t fit into the `BEST_FIT` capacity.
     * To make the most use of this allocation strategy,
     * it is recommended to use as many instance classes as is feasible for your workload.
     */
    AllocationStrategy["BEST_FIT_PROGRESSIVE"] = "BEST_FIT_PROGRESSIVE";
    /**
     * If your workflow tolerates interruptions, you should enable `spot` on your `ComputeEnvironment`
     * and use `SPOT_CAPACITY_OPTIMIZED` (this is the default if `spot` is enabled).
     * This will tell Batch to choose the instance types from the ones you’ve specified that have
     * the most spot capacity available to minimize the chance of interruption.
     * To get the most benefit from your spot instances,
     * you should allow Batch to choose from as many different instance types as possible.
     */
    AllocationStrategy["SPOT_CAPACITY_OPTIMIZED"] = "SPOT_CAPACITY_OPTIMIZED";
    /**
     * The price and capacity optimized allocation strategy looks at both price and capacity
     * to select the Spot Instance pools that are the least likely to be interrupted
     * and have the lowest possible price.
     *
     * The Batch team recommends this over `SPOT_CAPACITY_OPTIMIZED` in most instances.
     */
    AllocationStrategy["SPOT_PRICE_CAPACITY_OPTIMIZED"] = "SPOT_PRICE_CAPACITY_OPTIMIZED";
})(AllocationStrategy || (exports.AllocationStrategy = AllocationStrategy = {}));
/**
 * A ManagedComputeEnvironment that uses ECS orchestration on EC2 instances.
 *
 * @resource AWS::Batch::ComputeEnvironment
 */
class ManagedEc2EcsComputeEnvironment extends ManagedComputeEnvironmentBase {
    /**
     * refer to an existing ComputeEnvironment by its arn.
     */
    static fromManagedEc2EcsComputeEnvironmentArn(scope, id, managedEc2EcsComputeEnvironmentArn) {
        const stack = core_1.Stack.of(scope);
        const computeEnvironmentName = stack.splitArn(managedEc2EcsComputeEnvironmentArn, core_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.computeEnvironmentArn = managedEc2EcsComputeEnvironmentArn;
                this.computeEnvironmentName = computeEnvironmentName;
                this.enabled = true;
                this.instanceClasses = [];
                this.instanceTypes = [];
                this.maxvCpus = 1;
                this.connections = {};
                this.securityGroups = [];
                this.tags = new core_1.TagManager(core_1.TagType.MAP, 'AWS::Batch::ComputeEnvironment');
            }
            addInstanceClass(_instanceClass) {
                throw new Error(`cannot add instance class to imported ComputeEnvironment '${id}'`);
            }
            addInstanceType(_instanceType) {
                throw new Error(`cannot add instance type to imported ComputeEnvironment '${id}'`);
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_batch_alpha_ManagedEc2EcsComputeEnvironmentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ManagedEc2EcsComputeEnvironment);
            }
            throw error;
        }
        this.images = props.images;
        this.allocationStrategy = determineAllocationStrategy(id, props.allocationStrategy, this.spot);
        this.spotBidPercentage = props.spotBidPercentage;
        this.spotFleetRole = props.spotFleetRole ?? (this.spot && this.allocationStrategy === AllocationStrategy.BEST_FIT
            ? createSpotFleetRole(this)
            : undefined);
        this.instanceTypes = props.instanceTypes ?? [];
        this.instanceClasses = props.instanceClasses ?? [];
        const { instanceRole, instanceProfile } = createInstanceRoleAndProfile(this, props.instanceRole);
        this.instanceRole = instanceRole;
        this.instanceProfile = instanceProfile;
        this.launchTemplate = props.launchTemplate;
        this.minvCpus = props.minvCpus ?? DEFAULT_MIN_VCPUS;
        this.placementGroup = props.placementGroup;
        validateVCpus(id, this.minvCpus, this.maxvCpus);
        validateSpotConfig(id, this.spot, this.spotBidPercentage, this.spotFleetRole);
        const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets);
        const resource = new aws_batch_1.CfnComputeEnvironment(this, 'Resource', {
            ...baseManagedResourceProperties(this, subnetIds),
            computeEnvironmentName: props.computeEnvironmentName,
            computeResources: {
                ...baseManagedResourceProperties(this, subnetIds).computeResources,
                minvCpus: this.minvCpus,
                instanceRole: this.instanceProfile.attrArn,
                instanceTypes: core_1.Lazy.list({
                    produce: () => renderInstances(this.instanceTypes, this.instanceClasses, props.useOptimalInstanceClasses),
                }),
                type: this.spot ? 'SPOT' : 'EC2',
                spotIamFleetRole: this.spotFleetRole?.roleArn,
                allocationStrategy: this.allocationStrategy,
                bidPercentage: this.spotBidPercentage,
                launchTemplate: this.launchTemplate ? {
                    launchTemplateId: this.launchTemplate?.launchTemplateId,
                } : undefined,
                ec2Configuration: this.images?.map((image) => {
                    return {
                        imageIdOverride: image.image?.getImage(this).imageId,
                        imageType: image.imageType ?? EcsMachineImageType.ECS_AL2,
                    };
                }),
                placementGroup: this.placementGroup?.placementGroupName,
                tags: this.tags.renderedTags,
            },
        });
        this.computeEnvironmentName = this.getResourceNameAttribute(resource.ref);
        this.computeEnvironmentArn = this.getResourceArnAttribute(resource.attrComputeEnvironmentArn, {
            service: 'batch',
            resource: 'compute-environment',
            resourceName: this.physicalName,
        });
        this.node.addValidation({ validate: () => validateInstances(this.instanceTypes, this.instanceClasses, props.useOptimalInstanceClasses) });
    }
    addInstanceType(instanceType) {
        this.instanceTypes.push(instanceType);
    }
    addInstanceClass(instanceClass) {
        this.instanceClasses.push(instanceClass);
    }
}
exports.ManagedEc2EcsComputeEnvironment = ManagedEc2EcsComputeEnvironment;
_a = JSII_RTTI_SYMBOL_1;
ManagedEc2EcsComputeEnvironment[_a] = { fqn: "@aws-cdk/aws-batch-alpha.ManagedEc2EcsComputeEnvironment", version: "0.0.0" };
/**
 * A ManagedComputeEnvironment that uses ECS orchestration on EC2 instances.
 *
 * @resource AWS::Batch::ComputeEnvironment
 */
class ManagedEc2EksComputeEnvironment extends ManagedComputeEnvironmentBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_batch_alpha_ManagedEc2EksComputeEnvironmentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ManagedEc2EksComputeEnvironment);
            }
            throw error;
        }
        this.kubernetesNamespace = props.kubernetesNamespace;
        this.eksCluster = props.eksCluster;
        this.images = props.images;
        this.allocationStrategy = determineAllocationStrategy(id, props.allocationStrategy, this.spot);
        if (this.allocationStrategy === AllocationStrategy.BEST_FIT) {
            throw new Error(`ManagedEc2EksComputeEnvironment '${id}' uses invalid allocation strategy 'AllocationStrategy.BEST_FIT'`);
        }
        this.spotBidPercentage = props.spotBidPercentage;
        this.instanceTypes = props.instanceTypes ?? [];
        this.instanceClasses = props.instanceClasses ?? [];
        const { instanceRole, instanceProfile } = createInstanceRoleAndProfile(this, props.instanceRole);
        this.instanceRole = instanceRole;
        this.instanceProfile = instanceProfile;
        this.launchTemplate = props.launchTemplate;
        this.minvCpus = props.minvCpus ?? DEFAULT_MIN_VCPUS;
        this.placementGroup = props.placementGroup;
        validateVCpus(id, this.minvCpus, this.maxvCpus);
        validateSpotConfig(id, this.spot, this.spotBidPercentage);
        const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets);
        const resource = new aws_batch_1.CfnComputeEnvironment(this, 'Resource', {
            ...baseManagedResourceProperties(this, subnetIds),
            computeEnvironmentName: props.computeEnvironmentName,
            eksConfiguration: {
                eksClusterArn: this.eksCluster.clusterArn,
                kubernetesNamespace: this.kubernetesNamespace,
            },
            computeResources: {
                ...baseManagedResourceProperties(this, subnetIds).computeResources,
                minvCpus: this.minvCpus,
                instanceRole: this.instanceProfile.attrArn,
                instanceTypes: core_1.Lazy.list({ produce: () => renderInstances(this.instanceTypes, this.instanceClasses, props.useOptimalInstanceClasses) }),
                type: this.spot ? 'SPOT' : 'EC2',
                allocationStrategy: this.allocationStrategy,
                bidPercentage: this.spotBidPercentage,
                launchTemplate: this.launchTemplate ? {
                    launchTemplateId: this.launchTemplate?.launchTemplateId,
                } : undefined,
                ec2Configuration: this.images?.map((image) => {
                    return {
                        imageIdOverride: image.image?.getImage(this).imageId,
                        imageType: image.imageType ?? EksMachineImageType.EKS_AL2,
                    };
                }),
                placementGroup: this.placementGroup?.placementGroupName,
                tags: this.tags.renderedTags,
            },
        });
        this.computeEnvironmentName = this.getResourceNameAttribute(resource.ref);
        this.computeEnvironmentArn = this.getResourceArnAttribute(resource.attrComputeEnvironmentArn, {
            service: 'batch',
            resource: 'compute-environment',
            resourceName: this.physicalName,
        });
        this.node.addValidation({ validate: () => validateInstances(this.instanceTypes, this.instanceClasses, props.useOptimalInstanceClasses) });
    }
    addInstanceType(instanceType) {
        this.instanceTypes.push(instanceType);
    }
    addInstanceClass(instanceClass) {
        this.instanceClasses.push(instanceClass);
    }
}
exports.ManagedEc2EksComputeEnvironment = ManagedEc2EksComputeEnvironment;
_b = JSII_RTTI_SYMBOL_1;
ManagedEc2EksComputeEnvironment[_b] = { fqn: "@aws-cdk/aws-batch-alpha.ManagedEc2EksComputeEnvironment", version: "0.0.0" };
/**
 * A ManagedComputeEnvironment that uses ECS orchestration on Fargate instances.
 *
 * @resource AWS::Batch::ComputeEnvironment
 */
class FargateComputeEnvironment extends ManagedComputeEnvironmentBase {
    /**
     * Reference an existing FargateComputeEnvironment by its arn
     */
    static fromFargateComputeEnvironmentArn(scope, id, fargateComputeEnvironmentArn) {
        const stack = core_1.Stack.of(scope);
        const computeEnvironmentName = stack.splitArn(fargateComputeEnvironmentArn, core_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.computeEnvironmentArn = fargateComputeEnvironmentArn;
                this.computeEnvironmentName = computeEnvironmentName;
                this.enabled = true;
                this.maxvCpus = 1;
                this.connections = {};
                this.securityGroups = [];
                this.tags = new core_1.TagManager(core_1.TagType.MAP, 'AWS::Batch::ComputeEnvironment');
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_batch_alpha_FargateComputeEnvironmentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, FargateComputeEnvironment);
            }
            throw error;
        }
        const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets);
        const resource = new aws_batch_1.CfnComputeEnvironment(this, 'Resource', {
            ...baseManagedResourceProperties(this, subnetIds),
            computeEnvironmentName: props.computeEnvironmentName,
            computeResources: {
                ...baseManagedResourceProperties(this, subnetIds).computeResources,
                type: this.spot ? 'FARGATE_SPOT' : 'FARGATE',
            },
        });
        this.computeEnvironmentName = this.getResourceNameAttribute(resource.ref);
        this.computeEnvironmentArn = this.getResourceArnAttribute(resource.attrComputeEnvironmentArn, {
            service: 'batch',
            resource: 'compute-environment',
            resourceName: this.physicalName,
        });
    }
}
exports.FargateComputeEnvironment = FargateComputeEnvironment;
_c = JSII_RTTI_SYMBOL_1;
FargateComputeEnvironment[_c] = { fqn: "@aws-cdk/aws-batch-alpha.FargateComputeEnvironment", version: "0.0.0" };
function renderInstances(types, classes, useOptimalInstanceClasses) {
    const instances = [];
    for (const instanceType of types ?? []) {
        instances.push(instanceType.toString());
    }
    for (const instanceClass of classes ?? []) {
        instances.push(instanceClass);
    }
    if (useOptimalInstanceClasses || useOptimalInstanceClasses === undefined) {
        instances.push('optimal');
    }
    return instances;
}
function createInstanceRoleAndProfile(scope, instanceRole) {
    const result = {};
    result.instanceRole = instanceRole ?? new iam.Role(scope, 'InstanceProfileRole', {
        assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
        managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonEC2ContainerServiceforEC2Role')],
    });
    result.instanceProfile = new iam.CfnInstanceProfile(scope, 'InstanceProfile', {
        roles: [result.instanceRole.roleName],
    });
    return result;
}
function createSpotFleetRole(scope) {
    return new iam.Role(scope, 'SpotFleetRole', {
        assumedBy: new iam.ServicePrincipal('spotfleet.amazonaws.com'),
    });
}
function determineAllocationStrategy(id, allocationStrategy, spot) {
    let result = allocationStrategy;
    if (!allocationStrategy) {
        result = spot ? AllocationStrategy.SPOT_PRICE_CAPACITY_OPTIMIZED : AllocationStrategy.BEST_FIT_PROGRESSIVE;
    }
    else if (allocationStrategy === AllocationStrategy.SPOT_PRICE_CAPACITY_OPTIMIZED && !spot) {
        throw new Error(`Managed ComputeEnvironment '${id}' specifies 'AllocationStrategy.SPOT_PRICE_CAPACITY_OPTIMIZED' without using spot instances`);
    }
    else if (allocationStrategy === AllocationStrategy.SPOT_CAPACITY_OPTIMIZED && !spot) {
        throw new Error(`Managed ComputeEnvironment '${id}' specifies 'AllocationStrategy.SPOT_CAPACITY_OPTIMIZED' without using spot instances`);
    }
    return result;
}
function validateInstances(types, classes, useOptimalInstanceClasses) {
    if (renderInstances(types, classes, useOptimalInstanceClasses).length === 0) {
        return ["Specifies 'useOptimalInstanceClasses: false' without specifying any instance types or classes"];
    }
    return [];
}
function validateSpotConfig(id, spot, spotBidPercentage, spotFleetRole) {
    if (spotBidPercentage) {
        if (!spot) {
            throw new Error(`Managed ComputeEnvironment '${id}' specifies 'spotBidPercentage' without specifying 'spot'`);
        }
        else if (spotBidPercentage > 100) {
            throw new Error(`Managed ComputeEnvironment '${id}' specifies 'spotBidPercentage' > 100`);
        }
        else if (spotBidPercentage < 0) {
            throw new Error(`Managed ComputeEnvironment '${id}' specifies 'spotBidPercentage' < 0`);
        }
    }
    if (spotFleetRole) {
        if (!spot) {
            throw new Error(`Managed ComputeEnvironment '${id}' specifies 'spotFleetRole' without specifying 'spot'`);
        }
    }
}
function validateVCpus(id, minvCpus, maxvCpus) {
    if (minvCpus < 0) {
        throw new Error(`Managed ComputeEnvironment '${id}' has 'minvCpus' = ${minvCpus} < 0; 'minvCpus' cannot be less than zero`);
    }
    if (minvCpus > maxvCpus) {
        throw new Error(`Managed ComputeEnvironment '${id}' has 'minvCpus' = ${minvCpus} > 'maxvCpus' = ${maxvCpus}; 'minvCpus' cannot be greater than 'maxvCpus'`);
    }
}
function baseManagedResourceProperties(baseComputeEnvironment, subnetIds) {
    return {
        serviceRole: baseComputeEnvironment.serviceRole?.roleArn,
        state: baseComputeEnvironment.enabled ? 'ENABLED' : 'DISABLED',
        computeResources: {
            maxvCpus: baseComputeEnvironment.maxvCpus,
            type: 'managed',
            updateToLatestImageVersion: baseComputeEnvironment.updateToLatestImageVersion,
            securityGroupIds: baseComputeEnvironment.securityGroups.map((securityGroup) => securityGroup.securityGroupId),
            subnets: subnetIds,
        },
        updatePolicy: {
            terminateJobsOnUpdate: baseComputeEnvironment.terminateOnUpdate,
            jobExecutionTimeoutMinutes: baseComputeEnvironment.updateTimeout?.toMinutes(),
        },
        replaceComputeEnvironment: baseComputeEnvironment.replaceComputeEnvironment,
        type: 'managed',
    };
}
const DEFAULT_MIN_VCPUS = 0;
const DEFAULT_MAX_VCPUS = 256;
//# sourceMappingURL=data:application/json;base64,