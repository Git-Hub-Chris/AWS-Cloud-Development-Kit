"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const schema_1 = require("../lib/schema");
test('spot-check IAM identity tags', () => {
    const prop = (0, lib_1.propertySpecification)('AWS::IAM::Role', 'Policies');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineIdentityPolicies);
});
test('IAM AssumeRolePolicy', () => {
    // AssumeRolePolicyDocument is a resource policy, because it applies to the Role itself!
    const prop = (0, lib_1.propertySpecification)('AWS::IAM::Role', 'AssumeRolePolicyDocument');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineResourcePolicy);
});
test('spot-check IAM resource tags', () => {
    const prop = (0, lib_1.propertySpecification)('AWS::KMS::Key', 'KeyPolicy');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineResourcePolicy);
});
test('spot-check resource policy resources', () => {
    expect((0, lib_1.resourceSpecification)('AWS::S3::BucketPolicy').ScrutinyType).toEqual(schema_1.ResourceScrutinyType.ResourcePolicyResource);
});
test('spot-check no misclassified tags', () => {
    const prop = (0, lib_1.propertySpecification)('AWS::SNS::Subscription', 'DeliveryPolicy');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.None);
});
test('check Lambda permission resource scrutiny', () => {
    expect((0, lib_1.resourceSpecification)('AWS::Lambda::Permission').ScrutinyType).toEqual(schema_1.ResourceScrutinyType.LambdaPermission);
});
test('check role managedpolicyarns', () => {
    const prop = (0, lib_1.propertySpecification)('AWS::IAM::Role', 'ManagedPolicyArns');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.ManagedPolicies);
});
test('check securityGroup scrutinies', () => {
    const inProp = (0, lib_1.propertySpecification)('AWS::EC2::SecurityGroup', 'SecurityGroupIngress');
    expect(inProp.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.IngressRules);
    const eProp = (0, lib_1.propertySpecification)('AWS::EC2::SecurityGroup', 'SecurityGroupEgress');
    expect(eProp.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.EgressRules);
});
test('check securityGroupRule scrutinies', () => {
    const inRes = (0, lib_1.resourceSpecification)('AWS::EC2::SecurityGroupIngress');
    expect(inRes.ScrutinyType).toEqual(schema_1.ResourceScrutinyType.IngressRuleResource);
    const eRes = (0, lib_1.resourceSpecification)('AWS::EC2::SecurityGroupEgress');
    expect(eRes.ScrutinyType).toEqual(schema_1.ResourceScrutinyType.EgressRuleResource);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NydXRpbnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjcnV0aW55LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBc0U7QUFDdEUsMENBQTJFO0FBRTNFLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBQSwyQkFBcUIsRUFBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2pGLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNoQyx3RkFBd0Y7SUFDeEYsTUFBTSxJQUFJLEdBQUcsSUFBQSwyQkFBcUIsRUFBQyxnQkFBZ0IsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLE1BQU0sSUFBSSxHQUFHLElBQUEsMkJBQXFCLEVBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ2hELE1BQU0sQ0FBQyxJQUFBLDJCQUFxQixFQUFDLHVCQUF1QixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDM0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO0lBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUEsMkJBQXFCLEVBQUMsd0JBQXdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUMvRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7SUFDckQsTUFBTSxDQUFDLElBQUEsMkJBQXFCLEVBQUMseUJBQXlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2SCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBQSwyQkFBcUIsRUFBQyxnQkFBZ0IsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFBLDJCQUFxQixFQUFDLHlCQUF5QixFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDeEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFdkUsTUFBTSxLQUFLLEdBQUcsSUFBQSwyQkFBcUIsRUFBQyx5QkFBeUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxNQUFNLEtBQUssR0FBRyxJQUFBLDJCQUFxQixFQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUU3RSxNQUFNLElBQUksR0FBRyxJQUFBLDJCQUFxQixFQUFDLCtCQUErQixDQUFDLENBQUM7SUFDcEUsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb3BlcnR5U3BlY2lmaWNhdGlvbiwgcmVzb3VyY2VTcGVjaWZpY2F0aW9uIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFByb3BlcnR5U2NydXRpbnlUeXBlLCBSZXNvdXJjZVNjcnV0aW55VHlwZSB9IGZyb20gJy4uL2xpYi9zY2hlbWEnO1xuXG50ZXN0KCdzcG90LWNoZWNrIElBTSBpZGVudGl0eSB0YWdzJywgKCkgPT4ge1xuICBjb25zdCBwcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OklBTTo6Um9sZScsICdQb2xpY2llcycpO1xuICBleHBlY3QocHJvcC5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUHJvcGVydHlTY3J1dGlueVR5cGUuSW5saW5lSWRlbnRpdHlQb2xpY2llcyk7XG59KTtcblxudGVzdCgnSUFNIEFzc3VtZVJvbGVQb2xpY3knLCAoKSA9PiB7XG4gIC8vIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudCBpcyBhIHJlc291cmNlIHBvbGljeSwgYmVjYXVzZSBpdCBhcHBsaWVzIHRvIHRoZSBSb2xlIGl0c2VsZiFcbiAgY29uc3QgcHJvcCA9IHByb3BlcnR5U3BlY2lmaWNhdGlvbignQVdTOjpJQU06OlJvbGUnLCAnQXNzdW1lUm9sZVBvbGljeURvY3VtZW50Jyk7XG4gIGV4cGVjdChwcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5JbmxpbmVSZXNvdXJjZVBvbGljeSk7XG59KTtcblxudGVzdCgnc3BvdC1jaGVjayBJQU0gcmVzb3VyY2UgdGFncycsICgpID0+IHtcbiAgY29uc3QgcHJvcCA9IHByb3BlcnR5U3BlY2lmaWNhdGlvbignQVdTOjpLTVM6OktleScsICdLZXlQb2xpY3knKTtcbiAgZXhwZWN0KHByb3AuU2NydXRpbnlUeXBlKS50b0VxdWFsKFByb3BlcnR5U2NydXRpbnlUeXBlLklubGluZVJlc291cmNlUG9saWN5KTtcbn0pO1xuXG50ZXN0KCdzcG90LWNoZWNrIHJlc291cmNlIHBvbGljeSByZXNvdXJjZXMnLCAoKSA9PiB7XG4gIGV4cGVjdChyZXNvdXJjZVNwZWNpZmljYXRpb24oJ0FXUzo6UzM6OkJ1Y2tldFBvbGljeScpLlNjcnV0aW55VHlwZSkudG9FcXVhbChSZXNvdXJjZVNjcnV0aW55VHlwZS5SZXNvdXJjZVBvbGljeVJlc291cmNlKTtcbn0pO1xuXG50ZXN0KCdzcG90LWNoZWNrIG5vIG1pc2NsYXNzaWZpZWQgdGFncycsICgpID0+IHtcbiAgY29uc3QgcHJvcCA9IHByb3BlcnR5U3BlY2lmaWNhdGlvbignQVdTOjpTTlM6OlN1YnNjcmlwdGlvbicsICdEZWxpdmVyeVBvbGljeScpO1xuICBleHBlY3QocHJvcC5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUHJvcGVydHlTY3J1dGlueVR5cGUuTm9uZSk7XG59KTtcblxudGVzdCgnY2hlY2sgTGFtYmRhIHBlcm1pc3Npb24gcmVzb3VyY2Ugc2NydXRpbnknLCAoKSA9PiB7XG4gIGV4cGVjdChyZXNvdXJjZVNwZWNpZmljYXRpb24oJ0FXUzo6TGFtYmRhOjpQZXJtaXNzaW9uJykuU2NydXRpbnlUeXBlKS50b0VxdWFsKFJlc291cmNlU2NydXRpbnlUeXBlLkxhbWJkYVBlcm1pc3Npb24pO1xufSk7XG5cbnRlc3QoJ2NoZWNrIHJvbGUgbWFuYWdlZHBvbGljeWFybnMnLCAoKSA9PiB7XG4gIGNvbnN0IHByb3AgPSBwcm9wZXJ0eVNwZWNpZmljYXRpb24oJ0FXUzo6SUFNOjpSb2xlJywgJ01hbmFnZWRQb2xpY3lBcm5zJyk7XG4gIGV4cGVjdChwcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5NYW5hZ2VkUG9saWNpZXMpO1xufSk7XG5cbnRlc3QoJ2NoZWNrIHNlY3VyaXR5R3JvdXAgc2NydXRpbmllcycsICgpID0+IHtcbiAgY29uc3QgaW5Qcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCcsICdTZWN1cml0eUdyb3VwSW5ncmVzcycpO1xuICBleHBlY3QoaW5Qcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5JbmdyZXNzUnVsZXMpO1xuXG4gIGNvbnN0IGVQcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCcsICdTZWN1cml0eUdyb3VwRWdyZXNzJyk7XG4gIGV4cGVjdChlUHJvcC5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUHJvcGVydHlTY3J1dGlueVR5cGUuRWdyZXNzUnVsZXMpO1xufSk7XG5cbnRlc3QoJ2NoZWNrIHNlY3VyaXR5R3JvdXBSdWxlIHNjcnV0aW5pZXMnLCAoKSA9PiB7XG4gIGNvbnN0IGluUmVzID0gcmVzb3VyY2VTcGVjaWZpY2F0aW9uKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEluZ3Jlc3MnKTtcbiAgZXhwZWN0KGluUmVzLlNjcnV0aW55VHlwZSkudG9FcXVhbChSZXNvdXJjZVNjcnV0aW55VHlwZS5JbmdyZXNzUnVsZVJlc291cmNlKTtcblxuICBjb25zdCBlUmVzID0gcmVzb3VyY2VTcGVjaWZpY2F0aW9uKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEVncmVzcycpO1xuICBleHBlY3QoZVJlcy5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUmVzb3VyY2VTY3J1dGlueVR5cGUuRWdyZXNzUnVsZVJlc291cmNlKTtcbn0pOyJdfQ==