{
 "Resources": {
  "AuthLambdaServiceRole7D6ECDEC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AuthLambda6BB8C88C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "// dummy func"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "AuthLambdaServiceRole7D6ECDEC",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "AuthLambdaServiceRole7D6ECDEC"
   ]
  },
  "HttpApiF5A9A8A7": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "Name": "my-api",
    "ProtocolType": "HTTP"
   }
  },
  "HttpApiDefaultStage3EEB07D6": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "AutoDeploy": true,
    "StageName": "$default"
   }
  },
  "HttpApiAuthorizerD4468D9A": {
   "Type": "AWS::ApiGatewayV2::Authorizer",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "AuthorizerPayloadFormatVersion": "2.0",
    "AuthorizerResultTtlInSeconds": 300,
    "AuthorizerType": "REQUEST",
    "AuthorizerUri": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":apigateway:",
       {
        "Ref": "AWS::Region"
       },
       ":lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "AuthLambda6BB8C88C",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    },
    "EnableSimpleResponses": true,
    "IdentitySource": [
     "$request.header.Authorization"
    ],
    "Name": "Authorizer"
   }
  },
  "HttpApiawscdkawsapigatewayv2httpstageHttpApiAuthorizerD8879FDFPermissionF57655CA": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "AuthLambda6BB8C88C",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "HttpApiF5A9A8A7"
       },
       "/authorizers/",
       {
        "Ref": "HttpApiAuthorizerD4468D9A"
       }
      ]
     ]
    }
   }
  },
  "DummyLambdaServiceRole1AA3A529": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "DummyLambdaD9FF384E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "// dummy func"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "DummyLambdaServiceRole1AA3A529",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "DummyLambdaServiceRole1AA3A529"
   ]
  },
  "RouteIntegrationDA299D52": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::GetAtt": [
      "DummyLambdaD9FF384E",
      "Arn"
     ]
    },
    "PayloadFormatVersion": "2.0"
   }
  },
  "RouteIntegrationPermissionBC60313D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DummyLambdaD9FF384E",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "HttpApiF5A9A8A7"
       },
       "/*/*/v1/mything/{proxy+}"
      ]
     ]
    }
   }
  },
  "RouteA67450D2": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "HttpApiF5A9A8A7"
    },
    "AuthorizationType": "CUSTOM",
    "AuthorizerId": {
     "Ref": "HttpApiAuthorizerD4468D9A"
    },
    "RouteKey": "ANY /v1/mything/{proxy+}",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "RouteIntegrationDA299D52"
       }
      ]
     ]
    }
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}