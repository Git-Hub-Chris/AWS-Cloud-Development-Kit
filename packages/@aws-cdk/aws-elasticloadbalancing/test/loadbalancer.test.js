"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("@aws-cdk/assertions");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const cdk_build_tools_1 = require("@aws-cdk/cdk-build-tools");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
describe('tests', () => {
    test('test specifying nonstandard port works', () => {
        const stack = new core_1.Stack(undefined, undefined, { env: { account: '1234', region: 'test' } });
        stack.node.setContext('availability-zones:1234:test', ['test-1a', 'test-1b']);
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        const lb = new lib_1.LoadBalancer(stack, 'LB', { vpc });
        lb.addListener({
            externalProtocol: lib_1.LoadBalancingProtocol.HTTP,
            externalPort: 8080,
            internalProtocol: lib_1.LoadBalancingProtocol.HTTP,
            internalPort: 8080,
        });
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            Listeners: [{
                    InstancePort: '8080',
                    InstanceProtocol: 'http',
                    LoadBalancerPort: '8080',
                    Protocol: 'http',
                }],
        });
    });
    test('add a health check', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            healthCheck: {
                interval: core_1.Duration.minutes(1),
                path: '/ping',
                protocol: lib_1.LoadBalancingProtocol.HTTPS,
                port: 443,
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            HealthCheck: {
                HealthyThreshold: '2',
                Interval: '60',
                Target: 'HTTPS:443/ping',
                Timeout: '5',
                UnhealthyThreshold: '5',
            },
        });
    });
    test('add a listener and load balancing target', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        const elb = new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            healthCheck: {
                interval: core_1.Duration.minutes(1),
                path: '/ping',
                protocol: lib_1.LoadBalancingProtocol.HTTPS,
                port: 443,
            },
        });
        // WHEN
        elb.addListener({ externalPort: 80, internalPort: 8080 });
        elb.addTarget(new FakeTarget());
        // THEN: at the very least it added a security group rule for the backend
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::EC2::SecurityGroup', {
            SecurityGroupEgress: [
                {
                    Description: 'Port 8080 LB to fleet',
                    CidrIp: '666.666.666.666/666',
                    FromPort: 8080,
                    IpProtocol: 'tcp',
                    ToPort: 8080,
                },
            ],
        });
    });
    test('enable cross zone load balancing', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            crossZone: true,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            CrossZone: true,
        });
    });
    test('disable cross zone load balancing', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            crossZone: false,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            CrossZone: false,
        });
    });
    test('cross zone load balancing enabled by default', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            CrossZone: true,
        });
    });
    test('use specified subnet', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP', {
            subnetConfiguration: [
                {
                    name: 'public',
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                    cidrMask: 21,
                },
                {
                    name: 'private1',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
                    cidrMask: 21,
                },
                {
                    name: 'private2',
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
                    cidrMask: 21,
                },
            ],
        });
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            subnetSelection: {
                subnetGroupName: 'private1',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            Subnets: vpc.selectSubnets({
                subnetGroupName: 'private1',
            }).subnetIds.map((subnetId) => stack.resolve(subnetId)),
        });
    });
    cdk_build_tools_1.testDeprecated('does not fail when deprecated property sslCertificateId is used', () => {
        // GIVEN
        const sslCertificateArn = 'arn:aws:acm:us-east-1:12345:test/12345';
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        const lb = new lib_1.LoadBalancer(stack, 'LB', { vpc });
        lb.addListener({
            externalPort: 80,
            internalPort: 8080,
            sslCertificateId: sslCertificateArn,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            Listeners: [{
                    InstancePort: '8080',
                    InstanceProtocol: 'http',
                    LoadBalancerPort: '80',
                    Protocol: 'http',
                    SSLCertificateId: sslCertificateArn,
                }],
        });
    });
    test('does not fail when sslCertificateArn is used', () => {
        // GIVEN
        const sslCertificateArn = 'arn:aws:acm:us-east-1:12345:test/12345';
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        const lb = new lib_1.LoadBalancer(stack, 'LB', { vpc });
        lb.addListener({
            externalPort: 80,
            internalPort: 8080,
            sslCertificateArn: sslCertificateArn,
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            Listeners: [{
                    InstancePort: '8080',
                    InstanceProtocol: 'http',
                    LoadBalancerPort: '80',
                    Protocol: 'http',
                    SSLCertificateId: sslCertificateArn,
                }],
        });
    });
    cdk_build_tools_1.testDeprecated('throws error when both sslCertificateId and sslCertificateArn are used', () => {
        // GIVEN
        const sslCertificateArn = 'arn:aws:acm:us-east-1:12345:test/12345';
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        const lb = new lib_1.LoadBalancer(stack, 'LB', { vpc });
        // THEN
        expect(() => lb.addListener({
            externalPort: 80,
            internalPort: 8080,
            sslCertificateArn: sslCertificateArn,
            sslCertificateId: sslCertificateArn,
        })).toThrow(/"sslCertificateId" is deprecated, please use "sslCertificateArn" only./);
    });
    test('enable load balancer access logs', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            accessLoggingPolicy: {
                enabled: true,
                s3BucketName: 'fakeBucket',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            AccessLoggingPolicy: {
                Enabled: true,
                S3BucketName: 'fakeBucket',
            },
        });
    });
    test('disable load balancer access logs', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const vpc = new aws_ec2_1.Vpc(stack, 'VCP');
        // WHEN
        new lib_1.LoadBalancer(stack, 'LB', {
            vpc,
            accessLoggingPolicy: {
                enabled: false,
                s3BucketName: 'fakeBucket',
            },
        });
        // THEN
        assertions_1.Template.fromStack(stack).hasResourceProperties('AWS::ElasticLoadBalancing::LoadBalancer', {
            AccessLoggingPolicy: {
                Enabled: false,
                S3BucketName: 'fakeBucket',
            },
        });
    });
});
class FakeTarget {
    constructor() {
        this.connections = new aws_ec2_1.Connections({
            peer: aws_ec2_1.Peer.ipv4('666.666.666.666/666'),
        });
    }
    attachToClassicLB(_loadBalancer) {
    }
}
//# sourceMappingURL=data:application/json;base64,