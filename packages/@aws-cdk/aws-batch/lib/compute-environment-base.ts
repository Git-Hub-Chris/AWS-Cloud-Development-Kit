import * as iam from '@aws-cdk/aws-iam';
import { IResource, Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CfnComputeEnvironmentProps } from './batch.generated';


export interface IComputeEnvironment extends IResource {
  /**
   * The name of the ComputeEnvironment
   *
   * @default - generated by CloudFormation
   */
  readonly name?: string;
  /**
   * The role Batch uses to perform actions on your behalf
   * in your account, such as provision instances to run your jobs
   *
   * @default - a serviceRole will be created for managed CEs, none for unmanaged CEs
   */
  readonly serviceRole?: iam.IRole;

  /**
   * Whether or not this ComputeEnvironment can accept jobs from a Queue.
   * Enabled ComputeEnvironments can accept jobs from a Queue and
   * can scale instances up or down.
   * Disabled ComputeEnvironments cannot accept jobs from a Queue or
   * scale instances up or down.
   *
   * If you change a ComputeEnvironment from enabled to disabled while it is executing jobs,
   * Jobs in the `STARTED` or `RUNNING` states will not
   * be interrupted. The ComputeEnvironment will no longer scale instances down;
   * that is, any instances that were scaled up will remain if the ComputeEnvironment is disabled.
   *
   * To ensure you aren't billed for unused capacity, remove the ComputeEnvironment from your stack.
   */
  readonly enabled?: boolean;
}

export interface ComputeEnvironmentProps {
  /**
   * The name of the ComputeEnvironment
   *
   * @default - generated by CloudFormation
   */
  readonly name?: string;

  /**
   * The role Batch uses to perform actions on your behalf
   * in your account, such as provision instances to run your jobs
   *
   * @default - a serviceRole will be created for managed CEs, none for unmanaged CEs
   */
  readonly serviceRole?: iam.IRole;

  /**
   * Whether or not this ComputeEnvironment can accept jobs from a Queue.
   * Enabled ComputeEnvironments can accept jobs from a Queue and
   * can scale instances up or down.
   * Disabled ComputeEnvironments cannot accept jobs from a Queue or
   * scale instances up or down.
   *
   * If you change a ComputeEnvironment from enabled to disabled while it is executing jobs,
   * Jobs in the `STARTED` or `RUNNING` states will not
   * be interrupted. The ComputeEnvironment will no longer scale instances down;
   * that is, any instances that were scaled up will remain if the ComputeEnvironment is disabled.
   *
   * To ensure you aren't billed for unused capacity, remove the ComputeEnvironment from your stack.
   */
  readonly enabled?: boolean;
}

export abstract class ComputeEnvironmentBase extends Resource implements IComputeEnvironment {
  readonly name?: string | undefined;
  readonly serviceRole?: iam.IRole | undefined;
  readonly enabled?: boolean | undefined;

  protected resourceProps: CfnComputeEnvironmentProps;

  constructor(scope: Construct, id: string, props?: ComputeEnvironmentProps) {
    super(scope, id);

    this.name = props?.name;
    this.serviceRole = props?.serviceRole;

    this.resourceProps = {
      computeEnvironmentName: this.name,
      serviceRole: this.serviceRole?.roleArn,
      type: 'dummy',
    };
  }
}
