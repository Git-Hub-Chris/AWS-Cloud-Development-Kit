import { Duration, IResource, Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CfnJobDefinitionProps } from './batch.generated';


export interface IJobDefinition extends IResource {
  /**
   * The name of this job definition
   *
   * @default - generated by CloudFormation
   *
   * @attribute
   */
  readonly jobDefinitionName?: string;

  /**
   * The default parameters passed to the container
   * These parameters can be referenced in the `command` that
   * you give to the container
   *
   * @see: https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters
   *
   * @default none
   */
  readonly parameters?: { [key:string]: any };

  /**
   * Whether to propogate tags from the JobDefinition
   * to the ECS task that Batch spawns
   *
   * @default false
   */
  readonly propagateTags?: boolean;

  /**
   * The number of times to retry a job.
   * The job is retried on failure the same number of attempts as the value.
   *
   * @default 1
   */
  readonly retryAttempts?: number;

  /**
   * Defines the retry behavior for this job
   *
   * @default - no `RetryStrategy`
   */
  readonly retryStrategies?: RetryStrategy[];

  /**
   * The priority of this Job. Only used in Fairshare Scheduling
   * to decide which job to run first when there are multiple jobs
   * with the same share identifier.
   *
   * @default none
   */
  readonly schedulingPriority?: number;

  /**
   * The timeout time for jobs that are submitted with this job definition.
   * After the amount of time you specify passes,
   * Batch terminates your jobs if they aren't finished.
   *
   * @default - no timeout
   */
  readonly timeout?: Duration;

  /**
   * The ARN of this job definition
   *
   * @attribute
   */
  readonly jobDefinitionArn: string;
}

export interface JobDefinitionProps {
  /**
   * The name of this job definition
   *
   * @default - generated by CloudFormation
   */
  readonly jobDefinitionName?: string;

  /**
   * The default parameters passed to the container
   * These parameters can be referenced in the `command` that
   * you give to the container
   *
   * @see: https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html#parameters
   *
   * @default none
   */
  readonly parameters?: { [key:string]: any };

  /**
   * Whether to propogate tags from the JobDefinition
   * to the ECS task that Batch spawns
   *
   * @default false
   */
  readonly propagateTags?: boolean;

  /**
   * The number of times to retry a job.
   * The job is retried on failure the same number of attempts as the value.
   *
   * @default 1
   */
  readonly retryAttempts?: number;

  /**
   * Defines the retry behavior for this job
   *
   * @default - no `RetryStrategy`
   */
  readonly retryStrategies?: RetryStrategy[];

  /**
   * The priority of this Job. Only used in Fairshare Scheduling
   * to decide which job to run first when there are multiple jobs
   * with the same share identifier.
   *
   * @default none
   */
  readonly schedulingPriority?: number;

  /**
   * The timeout time for jobs that are submitted with this job definition.
   * After the amount of time you specify passes,
   * Batch terminates your jobs if they aren't finished.
   *
   * @default - no timeout
   */
  readonly timeout?: Duration;
}

export class RetryStrategy {
  public static of(action: Action, on: Reason) {
    return new RetryStrategy(action, on);
  }

  public readonly action: Action;
  public readonly on: Reason;

  constructor(action: Action, on: Reason) {
    this.action = action;
    this.on = on;
  }
}

export enum Action {
  EXIT = 'EXIT',
  RETRY = 'RETRY',
}

export interface CustomReason {
  readonly onExitCode?: string;
  readonly onStatusReason?: string;
  readonly onReason?: string;
}

export class Reason {
  static readonly NON_ZERO_EXIT_CODE: Reason = {
    onExitCode: '*',
  };
  static readonly CANNOT_PULL_CONTAINER: Reason = {
    onReason: 'CannotPullContainerError:*',
  }
  static readonly SPOT_INSTANCE_RECLAIMED: Reason = {
    onStatusReason: 'Host EC2*',
  }

  static custom(customReasonProps: CustomReason): Reason {
    return customReasonProps;
  }
}

/**
 * @internal
 */
export abstract class JobDefinitionBase extends Resource implements IJobDefinition {
  readonly jobDefinitionName?: string;
  readonly parameters?: { [key:string]: any };
  readonly propagateTags?: boolean;
  readonly retryAttempts?: number;
  readonly retryStrategies?: RetryStrategy[];
  readonly schedulingPriority?: number;
  readonly timeout?: Duration;

  public abstract readonly jobDefinitionArn: string;

  protected resourceProps: CfnJobDefinitionProps;

  constructor(scope: Construct, id: string, props?: JobDefinitionProps) {
    super(scope, id, {
      physicalName: props?.jobDefinitionName,
    });

    this.jobDefinitionName = props?.jobDefinitionName;
    this.parameters = props?.parameters;
    this.propagateTags = props?.propagateTags;
    this.retryAttempts = props?.retryAttempts;
    this.retryStrategies = props?.retryStrategies;
    this.schedulingPriority = props?.schedulingPriority;
    this.timeout = props?.timeout;

    this.resourceProps = {
      jobDefinitionName: this.jobDefinitionName,
      parameters: this.parameters,
      propagateTags: this.propagateTags,
      retryStrategy: {
        attempts: this.retryAttempts,
        evaluateOnExit: this.retryStrategies?.map((strategy) => {
          return {
            action: strategy.action,
            ...strategy.on,
          };
        }),
      },
      schedulingPriority: this.schedulingPriority,
      timeout: {
        attemptDurationSeconds: this.timeout?.toSeconds(),
      },
      type: 'dummy',
    };
  }
}
