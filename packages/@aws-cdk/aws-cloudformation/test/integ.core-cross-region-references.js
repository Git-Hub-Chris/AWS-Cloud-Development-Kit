"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sqs_1 = require("@aws-cdk/aws-sqs");
const aws_ssm_1 = require("@aws-cdk/aws-ssm");
const core_1 = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const constructs_1 = require("constructs");
// GIVEN
const app = new core_1.App({
    treeMetadata: false,
});
class ProducerStack extends core_1.Stack {
    constructor(scope, id) {
        super(scope, id, {
            env: {
                region: 'us-east-1',
            },
            crossRegionReferences: true,
        });
        const nested = new core_1.NestedStack(this, 'IntegNested');
        this.queue = new aws_sqs_1.Queue(this, 'IntegQueue');
        this.nestedQueue = new aws_sqs_1.Queue(nested, 'NestedIntegQueue');
    }
}
class ConsumerStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            env: {
                region: 'us-east-2',
            },
            crossRegionReferences: true,
        });
        const nested = new core_1.NestedStack(this, 'IntegNested');
        props.queues.forEach((queue, i) => {
            new aws_ssm_1.StringParameter(this, 'IntegParameter' + i, {
                parameterName: 'integ-parameter' + i,
                stringValue: queue.queueName,
            });
            new aws_ssm_1.StringParameter(nested, 'IntegNestedParameter' + i, {
                parameterName: 'integ-nested-parameter' + i,
                stringValue: queue.queueName,
            });
        });
    }
}
class TestCase extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.producer = new ProducerStack(app, 'cross-region-producer');
        this.testCase = new ConsumerStack(app, 'cross-region-consumer', {
            queues: [this.producer.queue, this.producer.nestedQueue],
        });
    }
}
const testCase1 = new TestCase(app, 'TestCase1');
// THEN
const integ = new integ_tests_1.IntegTest(app, 'cross-region-references', {
    testCases: [testCase1.testCase],
    stackUpdateWorkflow: false,
});
/**
 * Test that if the references are still in use, deleting the producer
 * stack will fail
 *
 * When the test cleans up it will delete the consumer then the producer, which should
 * test that the parameters are cleaned up correctly.
 */
integ.assertions.awsApiCall('CloudFormation', 'deleteStack', {
    StackName: testCase1.producer.stackName,
}).next(integ.assertions.awsApiCall('CloudFormation', 'describeStacks', {
    StackName: testCase1.producer.stackName,
}).expect(integ_tests_1.ExpectedResult.objectLike({
    Stacks: integ_tests_1.Match.arrayWith([
        integ_tests_1.Match.objectLike({
            StackName: testCase1.producer.stackName,
            StackStatus: 'DELETE_FAILED',
        }),
    ]),
})).waitForAssertions());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY29yZS1jcm9zcy1yZWdpb24tcmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmNvcmUtY3Jvc3MtcmVnaW9uLXJlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBaUQ7QUFDakQsOENBQW1EO0FBQ25ELHdDQUFvRTtBQUNwRSxzREFBd0U7QUFDeEUsMkNBQXVDO0FBRXZDLFFBQVE7QUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsQ0FBQztJQUNsQixZQUFZLEVBQUUsS0FBSztDQUNwQixDQUFDLENBQUM7QUFFSCxNQUFNLGFBQWMsU0FBUSxZQUFLO0lBRy9CLFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsR0FBRyxFQUFFO2dCQUNILE1BQU0sRUFBRSxXQUFXO2FBQ3BCO1lBQ0QscUJBQXFCLEVBQUUsSUFBSTtTQUM1QixDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFLLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7S0FDMUQ7Q0FDRjtBQUtELE1BQU0sYUFBYyxTQUFRLFlBQUs7SUFDL0IsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLEdBQUcsS0FBSztZQUNSLEdBQUcsRUFBRTtnQkFDSCxNQUFNLEVBQUUsV0FBVzthQUNwQjtZQUNELHFCQUFxQixFQUFFLElBQUk7U0FDNUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQkFBVyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwRCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNoQyxJQUFJLHlCQUFlLENBQUMsSUFBSSxFQUFFLGdCQUFnQixHQUFDLENBQUMsRUFBRTtnQkFDNUMsYUFBYSxFQUFFLGlCQUFpQixHQUFDLENBQUM7Z0JBQ2xDLFdBQVcsRUFBRSxLQUFLLENBQUMsU0FBUzthQUM3QixDQUFDLENBQUM7WUFDSCxJQUFJLHlCQUFlLENBQUMsTUFBTSxFQUFFLHNCQUFzQixHQUFDLENBQUMsRUFBRTtnQkFDcEQsYUFBYSxFQUFFLHdCQUF3QixHQUFDLENBQUM7Z0JBQ3pDLFdBQVcsRUFBRSxLQUFLLENBQUMsU0FBUzthQUM3QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztLQUNKO0NBQ0Y7QUFFRCxNQUFNLFFBQVMsU0FBUSxzQkFBUztJQUc5QixZQUFZLEtBQWdCLEVBQUUsRUFBVTtRQUN0QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLEVBQUU7WUFDOUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7U0FDekQsQ0FBQyxDQUFDO0tBQ0o7Q0FDRjtBQUNELE1BQU0sU0FBUyxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUVqRCxPQUFPO0FBQ1AsTUFBTSxLQUFLLEdBQUcsSUFBSSx1QkFBUyxDQUFDLEdBQUcsRUFBRSx5QkFBeUIsRUFBRTtJQUMxRCxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQy9CLG1CQUFtQixFQUFFLEtBQUs7Q0FDM0IsQ0FBQyxDQUFDO0FBR0g7Ozs7OztHQU1HO0FBRUgsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFO0lBQzNELFNBQVMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVM7Q0FDeEMsQ0FBQyxDQUFDLElBQUksQ0FDTCxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRTtJQUM5RCxTQUFTLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTO0NBQ3hDLENBQUMsQ0FBQyxNQUFNLENBQUMsNEJBQWMsQ0FBQyxVQUFVLENBQUM7SUFDbEMsTUFBTSxFQUFFLG1CQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3RCLG1CQUFLLENBQUMsVUFBVSxDQUFDO1lBQ2YsU0FBUyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUztZQUN2QyxXQUFXLEVBQUUsZUFBZTtTQUM3QixDQUFDO0tBQ0gsQ0FBQztDQUNILENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWV1ZSwgSVF1ZXVlIH0gZnJvbSAnQGF3cy1jZGsvYXdzLXNxcyc7XG5pbXBvcnQgeyBTdHJpbmdQYXJhbWV0ZXIgfSBmcm9tICdAYXdzLWNkay9hd3Mtc3NtJztcbmltcG9ydCB7IEFwcCwgU3RhY2ssIFN0YWNrUHJvcHMsIE5lc3RlZFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QsIEV4cGVjdGVkUmVzdWx0LCBNYXRjaCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG4vLyBHSVZFTlxuY29uc3QgYXBwID0gbmV3IEFwcCh7XG4gIHRyZWVNZXRhZGF0YTogZmFsc2UsXG59KTtcblxuY2xhc3MgUHJvZHVjZXJTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IHF1ZXVlOiBJUXVldWU7XG4gIHB1YmxpYyByZWFkb25seSBuZXN0ZWRRdWV1ZTogSVF1ZXVlO1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBlbnY6IHtcbiAgICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJyxcbiAgICAgIH0sXG4gICAgICBjcm9zc1JlZ2lvblJlZmVyZW5jZXM6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgbmVzdGVkID0gbmV3IE5lc3RlZFN0YWNrKHRoaXMsICdJbnRlZ05lc3RlZCcpO1xuICAgIHRoaXMucXVldWUgPSBuZXcgUXVldWUodGhpcywgJ0ludGVnUXVldWUnKTtcbiAgICB0aGlzLm5lc3RlZFF1ZXVlID0gbmV3IFF1ZXVlKG5lc3RlZCwgJ05lc3RlZEludGVnUXVldWUnKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgQ29uc3VtZXJTdGFja1Byb3BzIGV4dGVuZHMgU3RhY2tQcm9wcyB7XG4gIHJlYWRvbmx5IHF1ZXVlczogSVF1ZXVlW107XG59XG5jbGFzcyBDb25zdW1lclN0YWNrIGV4dGVuZHMgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ29uc3VtZXJTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGVudjoge1xuICAgICAgICByZWdpb246ICd1cy1lYXN0LTInLFxuICAgICAgfSxcbiAgICAgIGNyb3NzUmVnaW9uUmVmZXJlbmNlczogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG5lc3RlZCA9IG5ldyBOZXN0ZWRTdGFjayh0aGlzLCAnSW50ZWdOZXN0ZWQnKTtcbiAgICBwcm9wcy5xdWV1ZXMuZm9yRWFjaCgocXVldWUsIGkpID0+IHtcbiAgICAgIG5ldyBTdHJpbmdQYXJhbWV0ZXIodGhpcywgJ0ludGVnUGFyYW1ldGVyJytpLCB7XG4gICAgICAgIHBhcmFtZXRlck5hbWU6ICdpbnRlZy1wYXJhbWV0ZXInK2ksXG4gICAgICAgIHN0cmluZ1ZhbHVlOiBxdWV1ZS5xdWV1ZU5hbWUsXG4gICAgICB9KTtcbiAgICAgIG5ldyBTdHJpbmdQYXJhbWV0ZXIobmVzdGVkLCAnSW50ZWdOZXN0ZWRQYXJhbWV0ZXInK2ksIHtcbiAgICAgICAgcGFyYW1ldGVyTmFtZTogJ2ludGVnLW5lc3RlZC1wYXJhbWV0ZXInK2ksXG4gICAgICAgIHN0cmluZ1ZhbHVlOiBxdWV1ZS5xdWV1ZU5hbWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBUZXN0Q2FzZSBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSB0ZXN0Q2FzZTogU3RhY2s7XG4gIHB1YmxpYyByZWFkb25seSBwcm9kdWNlcjogUHJvZHVjZXJTdGFjaztcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgdGhpcy5wcm9kdWNlciA9IG5ldyBQcm9kdWNlclN0YWNrKGFwcCwgJ2Nyb3NzLXJlZ2lvbi1wcm9kdWNlcicpO1xuICAgIHRoaXMudGVzdENhc2UgPSBuZXcgQ29uc3VtZXJTdGFjayhhcHAsICdjcm9zcy1yZWdpb24tY29uc3VtZXInLCB7XG4gICAgICBxdWV1ZXM6IFt0aGlzLnByb2R1Y2VyLnF1ZXVlLCB0aGlzLnByb2R1Y2VyLm5lc3RlZFF1ZXVlXSxcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgdGVzdENhc2UxID0gbmV3IFRlc3RDYXNlKGFwcCwgJ1Rlc3RDYXNlMScpO1xuXG4vLyBUSEVOXG5jb25zdCBpbnRlZyA9IG5ldyBJbnRlZ1Rlc3QoYXBwLCAnY3Jvc3MtcmVnaW9uLXJlZmVyZW5jZXMnLCB7XG4gIHRlc3RDYXNlczogW3Rlc3RDYXNlMS50ZXN0Q2FzZV0sXG4gIHN0YWNrVXBkYXRlV29ya2Zsb3c6IGZhbHNlLFxufSk7XG5cblxuLyoqXG4gKiBUZXN0IHRoYXQgaWYgdGhlIHJlZmVyZW5jZXMgYXJlIHN0aWxsIGluIHVzZSwgZGVsZXRpbmcgdGhlIHByb2R1Y2VyXG4gKiBzdGFjayB3aWxsIGZhaWxcbiAqXG4gKiBXaGVuIHRoZSB0ZXN0IGNsZWFucyB1cCBpdCB3aWxsIGRlbGV0ZSB0aGUgY29uc3VtZXIgdGhlbiB0aGUgcHJvZHVjZXIsIHdoaWNoIHNob3VsZFxuICogdGVzdCB0aGF0IHRoZSBwYXJhbWV0ZXJzIGFyZSBjbGVhbmVkIHVwIGNvcnJlY3RseS5cbiAqL1xuXG5pbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0Nsb3VkRm9ybWF0aW9uJywgJ2RlbGV0ZVN0YWNrJywge1xuICBTdGFja05hbWU6IHRlc3RDYXNlMS5wcm9kdWNlci5zdGFja05hbWUsXG59KS5uZXh0KFxuICBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0Nsb3VkRm9ybWF0aW9uJywgJ2Rlc2NyaWJlU3RhY2tzJywge1xuICAgIFN0YWNrTmFtZTogdGVzdENhc2UxLnByb2R1Y2VyLnN0YWNrTmFtZSxcbiAgfSkuZXhwZWN0KEV4cGVjdGVkUmVzdWx0Lm9iamVjdExpa2Uoe1xuICAgIFN0YWNrczogTWF0Y2guYXJyYXlXaXRoKFtcbiAgICAgIE1hdGNoLm9iamVjdExpa2Uoe1xuICAgICAgICBTdGFja05hbWU6IHRlc3RDYXNlMS5wcm9kdWNlci5zdGFja05hbWUsXG4gICAgICAgIFN0YWNrU3RhdHVzOiAnREVMRVRFX0ZBSUxFRCcsXG4gICAgICB9KSxcbiAgICBdKSxcbiAgfSkpLndhaXRGb3JBc3NlcnRpb25zKCksXG4pO1xuIl19