"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codepipeline_1 = require("aws-cdk-lib/aws-codepipeline");
const aws_codepipeline_actions_1 = require("aws-cdk-lib/aws-codepipeline-actions");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const s3Deployment = require("aws-cdk-lib/aws-s3-deployment");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const lib_1 = require("../lib");
const SCHEMA_STR = `{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "string"
}`;
const LAMBDA_CODE = `
def handler(event, context):
  print('This is my dummy validator')
`;
const app = new aws_cdk_lib_1.App({
    postCliContext: {
        '@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2': false,
    },
});
const stack = new aws_cdk_lib_1.Stack(app, 'aws-appconfig-configuration');
// create application for config profile
const appConfigApp = new lib_1.Application(stack, 'MyAppConfig', {
    applicationName: 'AppForConfigTest',
});
const deploymentStrategy = new lib_1.DeploymentStrategy(stack, 'MyDeployStrategy', {
    rolloutStrategy: lib_1.RolloutStrategy.linear({
        growthFactor: 100,
        deploymentDuration: aws_cdk_lib_1.Duration.minutes(0),
    }),
});
// hosted config from file
new lib_1.HostedConfiguration(stack, 'MyHostedConfigFromFile', {
    application: appConfigApp,
    content: lib_1.ConfigurationContent.fromFile('config.json'),
});
// create basic config profile and add config version
const hostedEnv = appConfigApp.addEnvironment('HostedEnv');
new lib_1.HostedConfiguration(stack, 'MyHostedConfig', {
    application: appConfigApp,
    content: lib_1.ConfigurationContent.fromInlineText('This is my configuration content.'),
    deployTo: [hostedEnv],
    validators: [
        lib_1.JsonSchemaValidator.fromInline(SCHEMA_STR),
        lib_1.JsonSchemaValidator.fromFile('schema.json'),
    ],
    deploymentStrategy,
});
// create basic config profile from add config version from file
const hostedEnvFromJson = appConfigApp.addEnvironment('HostedEnvFromJson');
const config = new lib_1.HostedConfiguration(stack, 'MyHostedConfigFromJson', {
    application: appConfigApp,
    content: lib_1.ConfigurationContent.fromInlineText('This is the configuration content'),
    deployTo: [hostedEnvFromJson],
    deploymentStrategy,
});
const hostedEnvFromYaml = appConfigApp.addEnvironment('HostedEnvFromYaml');
new lib_1.HostedConfiguration(stack, 'MyHostedConfigFromYaml', {
    application: appConfigApp,
    content: lib_1.ConfigurationContent.fromInlineYaml('This is the configuration content'),
    deployTo: [hostedEnvFromYaml],
    deploymentStrategy,
});
// verify a configuration can be deployed through the deploy method
const envToDeployLater = appConfigApp.addEnvironment('EnvDeployLater');
config.deploy(envToDeployLater);
// ssm paramter as configuration source
const func = new aws_lambda_1.Function(stack, 'MyValidatorFunction', {
    runtime: aws_lambda_1.Runtime.PYTHON_3_8,
    handler: 'index.handler',
    code: aws_lambda_1.Code.fromInline(LAMBDA_CODE),
});
const parameterEnv = appConfigApp.addEnvironment('ParameterEnv');
const ssmParameter = new aws_ssm_1.StringParameter(stack, 'MyParameter', {
    stringValue: 'This is the content stored in ssm parameter',
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromParameter', {
    name: 'TestConfigProfileStoredAsParamater',
    application: appConfigApp,
    description: 'This is a configuration profile used for integ testing',
    location: lib_1.ConfigurationSource.fromParameter(ssmParameter),
    versionNumber: '1',
    deployTo: [parameterEnv],
    validators: [
        lib_1.LambdaValidator.fromFunction(func),
    ],
    deploymentStrategy,
});
// ssm document as configuration source
const documentEnv = appConfigApp.addEnvironment('DocumentEnv');
const ssmDocument = new aws_ssm_1.CfnDocument(stack, 'MyDocument', {
    content: {
        schemaVersion: '2.2',
        description: 'Sample SSM Document',
        mainSteps: [
            {
                action: 'aws:runShellScript',
                name: 'step1',
                inputs: {
                    runCommand: [
                        'echo "Hello, World!"',
                    ],
                },
            },
        ],
    },
    documentType: 'Command',
    name: 'TestDocument',
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromDocument', {
    application: appConfigApp,
    location: lib_1.ConfigurationSource.fromCfnDocument(ssmDocument),
    versionNumber: '1',
    deployTo: [documentEnv],
    deploymentStrategy,
});
// S3 as configuration source
const bucketEnv = appConfigApp.addEnvironment('BucketEnv');
const bucket = new aws_s3_1.Bucket(stack, 'MyBucket', {
    versioned: true,
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
bucket.applyRemovalPolicy(aws_cdk_lib_1.RemovalPolicy.DESTROY);
const deployment = new s3Deployment.BucketDeployment(stack, 'DeployConfigInBucket', {
    sources: [s3Deployment.Source.data('hello/world/file.txt', 'This is the content stored in S3')],
    destinationBucket: bucket,
    retainOnDelete: false,
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromBucket', {
    application: appConfigApp,
    location: lib_1.ConfigurationSource.fromBucket(bucket, 'hello/world/file.txt'),
    description: `Sourced from ${aws_cdk_lib_1.Fn.select(0, deployment.objectKeys)}`,
    deployTo: [bucketEnv],
});
// secrets manager as configuration source (without key)
const secretEnv = appConfigApp.addEnvironment('SecretEnv');
const secret = new aws_secretsmanager_1.Secret(stack, 'MySecret', {
    secretStringValue: aws_cdk_lib_1.SecretValue.unsafePlainText('This is the content stored in secrets manager'),
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromSecret', {
    application: appConfigApp,
    location: lib_1.ConfigurationSource.fromSecret(secret),
    deployTo: [secretEnv],
});
// secrets manager as configuration source (with key)
const secretWithKeyEnv = appConfigApp.addEnvironment('SecretEnvWithKey');
const key = new aws_kms_1.Key(stack, 'MyKey');
const secretWithKey = new aws_secretsmanager_1.Secret(stack, 'MySecretWithKey', {
    secretStringValue: aws_cdk_lib_1.SecretValue.unsafePlainText('This is the content stored in secrets manager'),
    encryptionKey: key,
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromSecretWithKey', {
    location: lib_1.ConfigurationSource.fromSecret(secretWithKey),
    deploymentKey: key,
    application: appConfigApp,
    deployTo: [secretWithKeyEnv],
});
// code pipeline as configuration source
deployment.addSource(s3Deployment.Source.data('hello/world/codepipeline.txt', 'This is the content stored in code pipeline'));
const sourceAction = new aws_codepipeline_actions_1.S3SourceAction({
    actionName: 'Source',
    bucket: bucket,
    bucketKey: 'hello/world/codepipeline.txt',
    output: new aws_codepipeline_1.Artifact('SourceOutput'),
});
const deployAction = new aws_codepipeline_actions_1.S3DeployAction({
    actionName: 'Deploy',
    input: aws_codepipeline_1.Artifact.artifact('SourceOutput'),
    bucket: bucket,
    extract: true,
});
const pipeline = new aws_codepipeline_1.Pipeline(stack, 'MyPipeline', {
    crossAccountKeys: true,
    stages: [
        {
            stageName: 'beta',
            actions: [sourceAction],
        },
        {
            stageName: 'prod',
            actions: [deployAction],
        },
    ],
});
new lib_1.SourcedConfiguration(stack, 'MyConfigFromPipeline', {
    application: appConfigApp,
    location: lib_1.ConfigurationSource.fromPipeline(pipeline),
});
/* resource deployment alone is sufficient because we already have the
   corresponding resource handler tests to assert that resources can be
   used after created */
new integ_tests_alpha_1.IntegTest(app, 'appconfig-configuration', {
    testCases: [stack],
    cdkCommandOptions: {
        destroy: {
            args: {
                force: true,
            },
        },
    },
});
//# sourceMappingURL=data:application/json;base64,