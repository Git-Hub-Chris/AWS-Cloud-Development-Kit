"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnInputSecurityGroup = exports.CfnInput = exports.CfnChannel = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("@aws-cdk/core");
const cfn_parse = require("@aws-cdk/core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnChannelProps`
 *
 * @param properties - the TypeScript properties of a `CfnChannelProps`
 *
 * @returns the result of the validation.
 */
function CfnChannelPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cdiInputSpecification', CfnChannel_CdiInputSpecificationPropertyValidator)(properties.cdiInputSpecification));
    errors.collect(cdk.propertyValidator('channelClass', cdk.validateString)(properties.channelClass));
    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnChannel_OutputDestinationPropertyValidator))(properties.destinations));
    errors.collect(cdk.propertyValidator('encoderSettings', CfnChannel_EncoderSettingsPropertyValidator)(properties.encoderSettings));
    errors.collect(cdk.propertyValidator('inputAttachments', cdk.listValidator(CfnChannel_InputAttachmentPropertyValidator))(properties.inputAttachments));
    errors.collect(cdk.propertyValidator('inputSpecification', CfnChannel_InputSpecificationPropertyValidator)(properties.inputSpecification));
    errors.collect(cdk.propertyValidator('logLevel', cdk.validateString)(properties.logLevel));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    errors.collect(cdk.propertyValidator('vpc', CfnChannel_VpcOutputSettingsPropertyValidator)(properties.vpc));
    return errors.wrap('supplied properties not correct for "CfnChannelProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel` resource
 *
 * @param properties - the TypeScript properties of a `CfnChannelProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel` resource.
 */
// @ts-ignore TS6133
function cfnChannelPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannelPropsValidator(properties).assertSuccess();
    return {
        CdiInputSpecification: cfnChannelCdiInputSpecificationPropertyToCloudFormation(properties.cdiInputSpecification),
        ChannelClass: cdk.stringToCloudFormation(properties.channelClass),
        Destinations: cdk.listMapper(cfnChannelOutputDestinationPropertyToCloudFormation)(properties.destinations),
        EncoderSettings: cfnChannelEncoderSettingsPropertyToCloudFormation(properties.encoderSettings),
        InputAttachments: cdk.listMapper(cfnChannelInputAttachmentPropertyToCloudFormation)(properties.inputAttachments),
        InputSpecification: cfnChannelInputSpecificationPropertyToCloudFormation(properties.inputSpecification),
        LogLevel: cdk.stringToCloudFormation(properties.logLevel),
        Name: cdk.stringToCloudFormation(properties.name),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        Tags: cdk.objectToCloudFormation(properties.tags),
        Vpc: cfnChannelVpcOutputSettingsPropertyToCloudFormation(properties.vpc),
    };
}
// @ts-ignore TS6133
function CfnChannelPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cdiInputSpecification', 'CdiInputSpecification', properties.CdiInputSpecification != null ? CfnChannelCdiInputSpecificationPropertyFromCloudFormation(properties.CdiInputSpecification) : undefined);
    ret.addPropertyResult('channelClass', 'ChannelClass', properties.ChannelClass != null ? cfn_parse.FromCloudFormation.getString(properties.ChannelClass) : undefined);
    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputDestinationPropertyFromCloudFormation)(properties.Destinations) : undefined);
    ret.addPropertyResult('encoderSettings', 'EncoderSettings', properties.EncoderSettings != null ? CfnChannelEncoderSettingsPropertyFromCloudFormation(properties.EncoderSettings) : undefined);
    ret.addPropertyResult('inputAttachments', 'InputAttachments', properties.InputAttachments != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelInputAttachmentPropertyFromCloudFormation)(properties.InputAttachments) : undefined);
    ret.addPropertyResult('inputSpecification', 'InputSpecification', properties.InputSpecification != null ? CfnChannelInputSpecificationPropertyFromCloudFormation(properties.InputSpecification) : undefined);
    ret.addPropertyResult('logLevel', 'LogLevel', properties.LogLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LogLevel) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnChannelVpcOutputSettingsPropertyFromCloudFormation(properties.Vpc) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::MediaLive::Channel`
 *
 * The AWS::MediaLive::Channel resource is a MediaLive resource type that creates a channel.
 *
 * A MediaLive channel ingests and transcodes (decodes and encodes) source content from the inputs that are attached to that channel, and packages the new content into outputs.
 *
 * @cloudformationResource AWS::MediaLive::Channel
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-channel.html
 */
class CfnChannel extends cdk.CfnResource {
    /**
     * Create a new `AWS::MediaLive::Channel`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnChannel.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_medialive_CfnChannelProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnChannel);
            }
            throw error;
        }
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrInputs = cdk.Token.asList(this.getAtt('Inputs', cdk.ResolutionTypeHint.STRING_LIST));
        this.cdiInputSpecification = props.cdiInputSpecification;
        this.channelClass = props.channelClass;
        this.destinations = props.destinations;
        this.encoderSettings = props.encoderSettings;
        this.inputAttachments = props.inputAttachments;
        this.inputSpecification = props.inputSpecification;
        this.logLevel = props.logLevel;
        this.name = props.name;
        this.roleArn = props.roleArn;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::MediaLive::Channel", props.tags, { tagPropertyName: 'tags' });
        this.vpc = props.vpc;
    }
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnChannelPropsFromCloudFormation(resourceProperties);
        const ret = new CfnChannel(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnChannel.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            cdiInputSpecification: this.cdiInputSpecification,
            channelClass: this.channelClass,
            destinations: this.destinations,
            encoderSettings: this.encoderSettings,
            inputAttachments: this.inputAttachments,
            inputSpecification: this.inputSpecification,
            logLevel: this.logLevel,
            name: this.name,
            roleArn: this.roleArn,
            tags: this.tags.renderTags(),
            vpc: this.vpc,
        };
    }
    renderProperties(props) {
        return cfnChannelPropsToCloudFormation(props);
    }
}
exports.CfnChannel = CfnChannel;
_a = JSII_RTTI_SYMBOL_1;
CfnChannel[_a] = { fqn: "@aws-cdk/aws-medialive.CfnChannel", version: "0.0.0" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnChannel.CFN_RESOURCE_TYPE_NAME = "AWS::MediaLive::Channel";
/**
 * Determine whether the given properties match those of a `AacSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AacSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AacSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));
    errors.collect(cdk.propertyValidator('inputType', cdk.validateString)(properties.inputType));
    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));
    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));
    errors.collect(cdk.propertyValidator('rawFormat', cdk.validateString)(properties.rawFormat));
    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));
    errors.collect(cdk.propertyValidator('spec', cdk.validateString)(properties.spec));
    errors.collect(cdk.propertyValidator('vbrQuality', cdk.validateString)(properties.vbrQuality));
    return errors.wrap('supplied properties not correct for "AacSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AacSettings` resource
 *
 * @param properties - the TypeScript properties of a `AacSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AacSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAacSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AacSettingsPropertyValidator(properties).assertSuccess();
    return {
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        CodingMode: cdk.stringToCloudFormation(properties.codingMode),
        InputType: cdk.stringToCloudFormation(properties.inputType),
        Profile: cdk.stringToCloudFormation(properties.profile),
        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),
        RawFormat: cdk.stringToCloudFormation(properties.rawFormat),
        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),
        Spec: cdk.stringToCloudFormation(properties.spec),
        VbrQuality: cdk.stringToCloudFormation(properties.vbrQuality),
    };
}
// @ts-ignore TS6133
function CfnChannelAacSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);
    ret.addPropertyResult('inputType', 'InputType', properties.InputType != null ? cfn_parse.FromCloudFormation.getString(properties.InputType) : undefined);
    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);
    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);
    ret.addPropertyResult('rawFormat', 'RawFormat', properties.RawFormat != null ? cfn_parse.FromCloudFormation.getString(properties.RawFormat) : undefined);
    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);
    ret.addPropertyResult('spec', 'Spec', properties.Spec != null ? cfn_parse.FromCloudFormation.getString(properties.Spec) : undefined);
    ret.addPropertyResult('vbrQuality', 'VbrQuality', properties.VbrQuality != null ? cfn_parse.FromCloudFormation.getString(properties.VbrQuality) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Ac3SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Ac3SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Ac3SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('bitstreamMode', cdk.validateString)(properties.bitstreamMode));
    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));
    errors.collect(cdk.propertyValidator('dialnorm', cdk.validateNumber)(properties.dialnorm));
    errors.collect(cdk.propertyValidator('drcProfile', cdk.validateString)(properties.drcProfile));
    errors.collect(cdk.propertyValidator('lfeFilter', cdk.validateString)(properties.lfeFilter));
    errors.collect(cdk.propertyValidator('metadataControl', cdk.validateString)(properties.metadataControl));
    return errors.wrap('supplied properties not correct for "Ac3SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Ac3Settings` resource
 *
 * @param properties - the TypeScript properties of a `Ac3SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Ac3Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAc3SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Ac3SettingsPropertyValidator(properties).assertSuccess();
    return {
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        BitstreamMode: cdk.stringToCloudFormation(properties.bitstreamMode),
        CodingMode: cdk.stringToCloudFormation(properties.codingMode),
        Dialnorm: cdk.numberToCloudFormation(properties.dialnorm),
        DrcProfile: cdk.stringToCloudFormation(properties.drcProfile),
        LfeFilter: cdk.stringToCloudFormation(properties.lfeFilter),
        MetadataControl: cdk.stringToCloudFormation(properties.metadataControl),
    };
}
// @ts-ignore TS6133
function CfnChannelAc3SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('bitstreamMode', 'BitstreamMode', properties.BitstreamMode != null ? cfn_parse.FromCloudFormation.getString(properties.BitstreamMode) : undefined);
    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);
    ret.addPropertyResult('dialnorm', 'Dialnorm', properties.Dialnorm != null ? cfn_parse.FromCloudFormation.getNumber(properties.Dialnorm) : undefined);
    ret.addPropertyResult('drcProfile', 'DrcProfile', properties.DrcProfile != null ? cfn_parse.FromCloudFormation.getString(properties.DrcProfile) : undefined);
    ret.addPropertyResult('lfeFilter', 'LfeFilter', properties.LfeFilter != null ? cfn_parse.FromCloudFormation.getString(properties.LfeFilter) : undefined);
    ret.addPropertyResult('metadataControl', 'MetadataControl', properties.MetadataControl != null ? cfn_parse.FromCloudFormation.getString(properties.MetadataControl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AncillarySourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AncillarySourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AncillarySourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('sourceAncillaryChannelNumber', cdk.validateNumber)(properties.sourceAncillaryChannelNumber));
    return errors.wrap('supplied properties not correct for "AncillarySourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AncillarySourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `AncillarySourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AncillarySourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAncillarySourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AncillarySourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        SourceAncillaryChannelNumber: cdk.numberToCloudFormation(properties.sourceAncillaryChannelNumber),
    };
}
// @ts-ignore TS6133
function CfnChannelAncillarySourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('sourceAncillaryChannelNumber', 'SourceAncillaryChannelNumber', properties.SourceAncillaryChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.SourceAncillaryChannelNumber) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ArchiveCdnSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ArchiveCdnSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ArchiveCdnSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('archiveS3Settings', CfnChannel_ArchiveS3SettingsPropertyValidator)(properties.archiveS3Settings));
    return errors.wrap('supplied properties not correct for "ArchiveCdnSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveCdnSettings` resource
 *
 * @param properties - the TypeScript properties of a `ArchiveCdnSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveCdnSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelArchiveCdnSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ArchiveCdnSettingsPropertyValidator(properties).assertSuccess();
    return {
        ArchiveS3Settings: cfnChannelArchiveS3SettingsPropertyToCloudFormation(properties.archiveS3Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelArchiveCdnSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('archiveS3Settings', 'ArchiveS3Settings', properties.ArchiveS3Settings != null ? CfnChannelArchiveS3SettingsPropertyFromCloudFormation(properties.ArchiveS3Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ArchiveContainerSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ArchiveContainerSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ArchiveContainerSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('m2TsSettings', CfnChannel_M2tsSettingsPropertyValidator)(properties.m2TsSettings));
    errors.collect(cdk.propertyValidator('rawSettings', CfnChannel_RawSettingsPropertyValidator)(properties.rawSettings));
    return errors.wrap('supplied properties not correct for "ArchiveContainerSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveContainerSettings` resource
 *
 * @param properties - the TypeScript properties of a `ArchiveContainerSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveContainerSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelArchiveContainerSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ArchiveContainerSettingsPropertyValidator(properties).assertSuccess();
    return {
        M2tsSettings: cfnChannelM2tsSettingsPropertyToCloudFormation(properties.m2TsSettings),
        RawSettings: cfnChannelRawSettingsPropertyToCloudFormation(properties.rawSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelArchiveContainerSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('m2TsSettings', 'M2tsSettings', properties.M2tsSettings != null ? CfnChannelM2tsSettingsPropertyFromCloudFormation(properties.M2tsSettings) : undefined);
    ret.addPropertyResult('rawSettings', 'RawSettings', properties.RawSettings != null ? CfnChannelRawSettingsPropertyFromCloudFormation(properties.RawSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ArchiveGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ArchiveGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ArchiveGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('archiveCdnSettings', CfnChannel_ArchiveCdnSettingsPropertyValidator)(properties.archiveCdnSettings));
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('rolloverInterval', cdk.validateNumber)(properties.rolloverInterval));
    return errors.wrap('supplied properties not correct for "ArchiveGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `ArchiveGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelArchiveGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ArchiveGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        ArchiveCdnSettings: cfnChannelArchiveCdnSettingsPropertyToCloudFormation(properties.archiveCdnSettings),
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        RolloverInterval: cdk.numberToCloudFormation(properties.rolloverInterval),
    };
}
// @ts-ignore TS6133
function CfnChannelArchiveGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('archiveCdnSettings', 'ArchiveCdnSettings', properties.ArchiveCdnSettings != null ? CfnChannelArchiveCdnSettingsPropertyFromCloudFormation(properties.ArchiveCdnSettings) : undefined);
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('rolloverInterval', 'RolloverInterval', properties.RolloverInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RolloverInterval) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ArchiveOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ArchiveOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ArchiveOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('containerSettings', CfnChannel_ArchiveContainerSettingsPropertyValidator)(properties.containerSettings));
    errors.collect(cdk.propertyValidator('extension', cdk.validateString)(properties.extension));
    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));
    return errors.wrap('supplied properties not correct for "ArchiveOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `ArchiveOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelArchiveOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ArchiveOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        ContainerSettings: cfnChannelArchiveContainerSettingsPropertyToCloudFormation(properties.containerSettings),
        Extension: cdk.stringToCloudFormation(properties.extension),
        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),
    };
}
// @ts-ignore TS6133
function CfnChannelArchiveOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('containerSettings', 'ContainerSettings', properties.ContainerSettings != null ? CfnChannelArchiveContainerSettingsPropertyFromCloudFormation(properties.ContainerSettings) : undefined);
    ret.addPropertyResult('extension', 'Extension', properties.Extension != null ? cfn_parse.FromCloudFormation.getString(properties.Extension) : undefined);
    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ArchiveS3SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ArchiveS3SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ArchiveS3SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));
    return errors.wrap('supplied properties not correct for "ArchiveS3SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveS3Settings` resource
 *
 * @param properties - the TypeScript properties of a `ArchiveS3SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveS3Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelArchiveS3SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ArchiveS3SettingsPropertyValidator(properties).assertSuccess();
    return {
        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),
    };
}
// @ts-ignore TS6133
function CfnChannelArchiveS3SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AribDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AribDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AribDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "AribDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `AribDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAribDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AribDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelAribDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AribSourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AribSourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AribSourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "AribSourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribSourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `AribSourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribSourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAribSourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AribSourceSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelAribSourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioChannelMappingProperty`
 *
 * @param properties - the TypeScript properties of a `AudioChannelMappingProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioChannelMappingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('inputChannelLevels', cdk.listValidator(CfnChannel_InputChannelLevelPropertyValidator))(properties.inputChannelLevels));
    errors.collect(cdk.propertyValidator('outputChannel', cdk.validateNumber)(properties.outputChannel));
    return errors.wrap('supplied properties not correct for "AudioChannelMappingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioChannelMapping` resource
 *
 * @param properties - the TypeScript properties of a `AudioChannelMappingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioChannelMapping` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioChannelMappingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioChannelMappingPropertyValidator(properties).assertSuccess();
    return {
        InputChannelLevels: cdk.listMapper(cfnChannelInputChannelLevelPropertyToCloudFormation)(properties.inputChannelLevels),
        OutputChannel: cdk.numberToCloudFormation(properties.outputChannel),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioChannelMappingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('inputChannelLevels', 'InputChannelLevels', properties.InputChannelLevels != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelInputChannelLevelPropertyFromCloudFormation)(properties.InputChannelLevels) : undefined);
    ret.addPropertyResult('outputChannel', 'OutputChannel', properties.OutputChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutputChannel) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioCodecSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioCodecSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioCodecSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('aacSettings', CfnChannel_AacSettingsPropertyValidator)(properties.aacSettings));
    errors.collect(cdk.propertyValidator('ac3Settings', CfnChannel_Ac3SettingsPropertyValidator)(properties.ac3Settings));
    errors.collect(cdk.propertyValidator('eac3Settings', CfnChannel_Eac3SettingsPropertyValidator)(properties.eac3Settings));
    errors.collect(cdk.propertyValidator('mp2Settings', CfnChannel_Mp2SettingsPropertyValidator)(properties.mp2Settings));
    errors.collect(cdk.propertyValidator('passThroughSettings', CfnChannel_PassThroughSettingsPropertyValidator)(properties.passThroughSettings));
    errors.collect(cdk.propertyValidator('wavSettings', CfnChannel_WavSettingsPropertyValidator)(properties.wavSettings));
    return errors.wrap('supplied properties not correct for "AudioCodecSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioCodecSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioCodecSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioCodecSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioCodecSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioCodecSettingsPropertyValidator(properties).assertSuccess();
    return {
        AacSettings: cfnChannelAacSettingsPropertyToCloudFormation(properties.aacSettings),
        Ac3Settings: cfnChannelAc3SettingsPropertyToCloudFormation(properties.ac3Settings),
        Eac3Settings: cfnChannelEac3SettingsPropertyToCloudFormation(properties.eac3Settings),
        Mp2Settings: cfnChannelMp2SettingsPropertyToCloudFormation(properties.mp2Settings),
        PassThroughSettings: cfnChannelPassThroughSettingsPropertyToCloudFormation(properties.passThroughSettings),
        WavSettings: cfnChannelWavSettingsPropertyToCloudFormation(properties.wavSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioCodecSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('aacSettings', 'AacSettings', properties.AacSettings != null ? CfnChannelAacSettingsPropertyFromCloudFormation(properties.AacSettings) : undefined);
    ret.addPropertyResult('ac3Settings', 'Ac3Settings', properties.Ac3Settings != null ? CfnChannelAc3SettingsPropertyFromCloudFormation(properties.Ac3Settings) : undefined);
    ret.addPropertyResult('eac3Settings', 'Eac3Settings', properties.Eac3Settings != null ? CfnChannelEac3SettingsPropertyFromCloudFormation(properties.Eac3Settings) : undefined);
    ret.addPropertyResult('mp2Settings', 'Mp2Settings', properties.Mp2Settings != null ? CfnChannelMp2SettingsPropertyFromCloudFormation(properties.Mp2Settings) : undefined);
    ret.addPropertyResult('passThroughSettings', 'PassThroughSettings', properties.PassThroughSettings != null ? CfnChannelPassThroughSettingsPropertyFromCloudFormation(properties.PassThroughSettings) : undefined);
    ret.addPropertyResult('wavSettings', 'WavSettings', properties.WavSettings != null ? CfnChannelWavSettingsPropertyFromCloudFormation(properties.WavSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioDescriptionProperty`
 *
 * @param properties - the TypeScript properties of a `AudioDescriptionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioDescriptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioNormalizationSettings', CfnChannel_AudioNormalizationSettingsPropertyValidator)(properties.audioNormalizationSettings));
    errors.collect(cdk.propertyValidator('audioSelectorName', cdk.validateString)(properties.audioSelectorName));
    errors.collect(cdk.propertyValidator('audioType', cdk.validateString)(properties.audioType));
    errors.collect(cdk.propertyValidator('audioTypeControl', cdk.validateString)(properties.audioTypeControl));
    errors.collect(cdk.propertyValidator('audioWatermarkingSettings', CfnChannel_AudioWatermarkSettingsPropertyValidator)(properties.audioWatermarkingSettings));
    errors.collect(cdk.propertyValidator('codecSettings', CfnChannel_AudioCodecSettingsPropertyValidator)(properties.codecSettings));
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    errors.collect(cdk.propertyValidator('languageCodeControl', cdk.validateString)(properties.languageCodeControl));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('remixSettings', CfnChannel_RemixSettingsPropertyValidator)(properties.remixSettings));
    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));
    return errors.wrap('supplied properties not correct for "AudioDescriptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioDescription` resource
 *
 * @param properties - the TypeScript properties of a `AudioDescriptionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioDescription` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioDescriptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioDescriptionPropertyValidator(properties).assertSuccess();
    return {
        AudioNormalizationSettings: cfnChannelAudioNormalizationSettingsPropertyToCloudFormation(properties.audioNormalizationSettings),
        AudioSelectorName: cdk.stringToCloudFormation(properties.audioSelectorName),
        AudioType: cdk.stringToCloudFormation(properties.audioType),
        AudioTypeControl: cdk.stringToCloudFormation(properties.audioTypeControl),
        AudioWatermarkingSettings: cfnChannelAudioWatermarkSettingsPropertyToCloudFormation(properties.audioWatermarkingSettings),
        CodecSettings: cfnChannelAudioCodecSettingsPropertyToCloudFormation(properties.codecSettings),
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
        LanguageCodeControl: cdk.stringToCloudFormation(properties.languageCodeControl),
        Name: cdk.stringToCloudFormation(properties.name),
        RemixSettings: cfnChannelRemixSettingsPropertyToCloudFormation(properties.remixSettings),
        StreamName: cdk.stringToCloudFormation(properties.streamName),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioDescriptionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioNormalizationSettings', 'AudioNormalizationSettings', properties.AudioNormalizationSettings != null ? CfnChannelAudioNormalizationSettingsPropertyFromCloudFormation(properties.AudioNormalizationSettings) : undefined);
    ret.addPropertyResult('audioSelectorName', 'AudioSelectorName', properties.AudioSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.AudioSelectorName) : undefined);
    ret.addPropertyResult('audioType', 'AudioType', properties.AudioType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioType) : undefined);
    ret.addPropertyResult('audioTypeControl', 'AudioTypeControl', properties.AudioTypeControl != null ? cfn_parse.FromCloudFormation.getString(properties.AudioTypeControl) : undefined);
    ret.addPropertyResult('audioWatermarkingSettings', 'AudioWatermarkingSettings', properties.AudioWatermarkingSettings != null ? CfnChannelAudioWatermarkSettingsPropertyFromCloudFormation(properties.AudioWatermarkingSettings) : undefined);
    ret.addPropertyResult('codecSettings', 'CodecSettings', properties.CodecSettings != null ? CfnChannelAudioCodecSettingsPropertyFromCloudFormation(properties.CodecSettings) : undefined);
    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);
    ret.addPropertyResult('languageCodeControl', 'LanguageCodeControl', properties.LanguageCodeControl != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCodeControl) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('remixSettings', 'RemixSettings', properties.RemixSettings != null ? CfnChannelRemixSettingsPropertyFromCloudFormation(properties.RemixSettings) : undefined);
    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioHlsRenditionSelectionProperty`
 *
 * @param properties - the TypeScript properties of a `AudioHlsRenditionSelectionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioHlsRenditionSelectionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "AudioHlsRenditionSelectionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioHlsRenditionSelection` resource
 *
 * @param properties - the TypeScript properties of a `AudioHlsRenditionSelectionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioHlsRenditionSelection` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioHlsRenditionSelectionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioHlsRenditionSelectionPropertyValidator(properties).assertSuccess();
    return {
        GroupId: cdk.stringToCloudFormation(properties.groupId),
        Name: cdk.stringToCloudFormation(properties.name),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioHlsRenditionSelectionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('groupId', 'GroupId', properties.GroupId != null ? cfn_parse.FromCloudFormation.getString(properties.GroupId) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioLanguageSelectionProperty`
 *
 * @param properties - the TypeScript properties of a `AudioLanguageSelectionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioLanguageSelectionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    errors.collect(cdk.propertyValidator('languageSelectionPolicy', cdk.validateString)(properties.languageSelectionPolicy));
    return errors.wrap('supplied properties not correct for "AudioLanguageSelectionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioLanguageSelection` resource
 *
 * @param properties - the TypeScript properties of a `AudioLanguageSelectionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioLanguageSelection` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioLanguageSelectionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioLanguageSelectionPropertyValidator(properties).assertSuccess();
    return {
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
        LanguageSelectionPolicy: cdk.stringToCloudFormation(properties.languageSelectionPolicy),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioLanguageSelectionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);
    ret.addPropertyResult('languageSelectionPolicy', 'LanguageSelectionPolicy', properties.LanguageSelectionPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageSelectionPolicy) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioNormalizationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioNormalizationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioNormalizationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('algorithm', cdk.validateString)(properties.algorithm));
    errors.collect(cdk.propertyValidator('algorithmControl', cdk.validateString)(properties.algorithmControl));
    errors.collect(cdk.propertyValidator('targetLkfs', cdk.validateNumber)(properties.targetLkfs));
    return errors.wrap('supplied properties not correct for "AudioNormalizationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioNormalizationSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioNormalizationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioNormalizationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioNormalizationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioNormalizationSettingsPropertyValidator(properties).assertSuccess();
    return {
        Algorithm: cdk.stringToCloudFormation(properties.algorithm),
        AlgorithmControl: cdk.stringToCloudFormation(properties.algorithmControl),
        TargetLkfs: cdk.numberToCloudFormation(properties.targetLkfs),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioNormalizationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('algorithm', 'Algorithm', properties.Algorithm != null ? cfn_parse.FromCloudFormation.getString(properties.Algorithm) : undefined);
    ret.addPropertyResult('algorithmControl', 'AlgorithmControl', properties.AlgorithmControl != null ? cfn_parse.FromCloudFormation.getString(properties.AlgorithmControl) : undefined);
    ret.addPropertyResult('targetLkfs', 'TargetLkfs', properties.TargetLkfs != null ? cfn_parse.FromCloudFormation.getNumber(properties.TargetLkfs) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioOnlyHlsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioOnlyHlsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioOnlyHlsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioGroupId', cdk.validateString)(properties.audioGroupId));
    errors.collect(cdk.propertyValidator('audioOnlyImage', CfnChannel_InputLocationPropertyValidator)(properties.audioOnlyImage));
    errors.collect(cdk.propertyValidator('audioTrackType', cdk.validateString)(properties.audioTrackType));
    errors.collect(cdk.propertyValidator('segmentType', cdk.validateString)(properties.segmentType));
    return errors.wrap('supplied properties not correct for "AudioOnlyHlsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioOnlyHlsSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioOnlyHlsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioOnlyHlsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioOnlyHlsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioOnlyHlsSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioGroupId: cdk.stringToCloudFormation(properties.audioGroupId),
        AudioOnlyImage: cfnChannelInputLocationPropertyToCloudFormation(properties.audioOnlyImage),
        AudioTrackType: cdk.stringToCloudFormation(properties.audioTrackType),
        SegmentType: cdk.stringToCloudFormation(properties.segmentType),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioOnlyHlsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioGroupId', 'AudioGroupId', properties.AudioGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.AudioGroupId) : undefined);
    ret.addPropertyResult('audioOnlyImage', 'AudioOnlyImage', properties.AudioOnlyImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.AudioOnlyImage) : undefined);
    ret.addPropertyResult('audioTrackType', 'AudioTrackType', properties.AudioTrackType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioTrackType) : undefined);
    ret.addPropertyResult('segmentType', 'SegmentType', properties.SegmentType != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentType) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioPidSelectionProperty`
 *
 * @param properties - the TypeScript properties of a `AudioPidSelectionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioPidSelectionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));
    return errors.wrap('supplied properties not correct for "AudioPidSelectionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioPidSelection` resource
 *
 * @param properties - the TypeScript properties of a `AudioPidSelectionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioPidSelection` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioPidSelectionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioPidSelectionPropertyValidator(properties).assertSuccess();
    return {
        Pid: cdk.numberToCloudFormation(properties.pid),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioPidSelectionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioSelectorProperty`
 *
 * @param properties - the TypeScript properties of a `AudioSelectorProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioSelectorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_AudioSelectorSettingsPropertyValidator)(properties.selectorSettings));
    return errors.wrap('supplied properties not correct for "AudioSelectorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelector` resource
 *
 * @param properties - the TypeScript properties of a `AudioSelectorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelector` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioSelectorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioSelectorPropertyValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        SelectorSettings: cfnChannelAudioSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioSelectorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelAudioSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioSelectorSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioSelectorSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioSelectorSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioHlsRenditionSelection', CfnChannel_AudioHlsRenditionSelectionPropertyValidator)(properties.audioHlsRenditionSelection));
    errors.collect(cdk.propertyValidator('audioLanguageSelection', CfnChannel_AudioLanguageSelectionPropertyValidator)(properties.audioLanguageSelection));
    errors.collect(cdk.propertyValidator('audioPidSelection', CfnChannel_AudioPidSelectionPropertyValidator)(properties.audioPidSelection));
    errors.collect(cdk.propertyValidator('audioTrackSelection', CfnChannel_AudioTrackSelectionPropertyValidator)(properties.audioTrackSelection));
    return errors.wrap('supplied properties not correct for "AudioSelectorSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelectorSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioSelectorSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelectorSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioSelectorSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioSelectorSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioHlsRenditionSelection: cfnChannelAudioHlsRenditionSelectionPropertyToCloudFormation(properties.audioHlsRenditionSelection),
        AudioLanguageSelection: cfnChannelAudioLanguageSelectionPropertyToCloudFormation(properties.audioLanguageSelection),
        AudioPidSelection: cfnChannelAudioPidSelectionPropertyToCloudFormation(properties.audioPidSelection),
        AudioTrackSelection: cfnChannelAudioTrackSelectionPropertyToCloudFormation(properties.audioTrackSelection),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioSelectorSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioHlsRenditionSelection', 'AudioHlsRenditionSelection', properties.AudioHlsRenditionSelection != null ? CfnChannelAudioHlsRenditionSelectionPropertyFromCloudFormation(properties.AudioHlsRenditionSelection) : undefined);
    ret.addPropertyResult('audioLanguageSelection', 'AudioLanguageSelection', properties.AudioLanguageSelection != null ? CfnChannelAudioLanguageSelectionPropertyFromCloudFormation(properties.AudioLanguageSelection) : undefined);
    ret.addPropertyResult('audioPidSelection', 'AudioPidSelection', properties.AudioPidSelection != null ? CfnChannelAudioPidSelectionPropertyFromCloudFormation(properties.AudioPidSelection) : undefined);
    ret.addPropertyResult('audioTrackSelection', 'AudioTrackSelection', properties.AudioTrackSelection != null ? CfnChannelAudioTrackSelectionPropertyFromCloudFormation(properties.AudioTrackSelection) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioSilenceFailoverSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioSilenceFailoverSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioSilenceFailoverSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioSelectorName', cdk.validateString)(properties.audioSelectorName));
    errors.collect(cdk.propertyValidator('audioSilenceThresholdMsec', cdk.validateNumber)(properties.audioSilenceThresholdMsec));
    return errors.wrap('supplied properties not correct for "AudioSilenceFailoverSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSilenceFailoverSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioSilenceFailoverSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSilenceFailoverSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioSilenceFailoverSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioSilenceFailoverSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioSelectorName: cdk.stringToCloudFormation(properties.audioSelectorName),
        AudioSilenceThresholdMsec: cdk.numberToCloudFormation(properties.audioSilenceThresholdMsec),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioSilenceFailoverSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioSelectorName', 'AudioSelectorName', properties.AudioSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.AudioSelectorName) : undefined);
    ret.addPropertyResult('audioSilenceThresholdMsec', 'AudioSilenceThresholdMsec', properties.AudioSilenceThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioSilenceThresholdMsec) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioTrackProperty`
 *
 * @param properties - the TypeScript properties of a `AudioTrackProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioTrackPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('track', cdk.validateNumber)(properties.track));
    return errors.wrap('supplied properties not correct for "AudioTrackProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrack` resource
 *
 * @param properties - the TypeScript properties of a `AudioTrackProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrack` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioTrackPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioTrackPropertyValidator(properties).assertSuccess();
    return {
        Track: cdk.numberToCloudFormation(properties.track),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioTrackPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('track', 'Track', properties.Track != null ? cfn_parse.FromCloudFormation.getNumber(properties.Track) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioTrackSelectionProperty`
 *
 * @param properties - the TypeScript properties of a `AudioTrackSelectionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioTrackSelectionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('tracks', cdk.listValidator(CfnChannel_AudioTrackPropertyValidator))(properties.tracks));
    return errors.wrap('supplied properties not correct for "AudioTrackSelectionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrackSelection` resource
 *
 * @param properties - the TypeScript properties of a `AudioTrackSelectionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrackSelection` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioTrackSelectionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioTrackSelectionPropertyValidator(properties).assertSuccess();
    return {
        Tracks: cdk.listMapper(cfnChannelAudioTrackPropertyToCloudFormation)(properties.tracks),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioTrackSelectionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('tracks', 'Tracks', properties.Tracks != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioTrackPropertyFromCloudFormation)(properties.Tracks) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AudioWatermarkSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AudioWatermarkSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AudioWatermarkSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('nielsenWatermarksSettings', CfnChannel_NielsenWatermarksSettingsPropertyValidator)(properties.nielsenWatermarksSettings));
    return errors.wrap('supplied properties not correct for "AudioWatermarkSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioWatermarkSettings` resource
 *
 * @param properties - the TypeScript properties of a `AudioWatermarkSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioWatermarkSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAudioWatermarkSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AudioWatermarkSettingsPropertyValidator(properties).assertSuccess();
    return {
        NielsenWatermarksSettings: cfnChannelNielsenWatermarksSettingsPropertyToCloudFormation(properties.nielsenWatermarksSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelAudioWatermarkSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('nielsenWatermarksSettings', 'NielsenWatermarksSettings', properties.NielsenWatermarksSettings != null ? CfnChannelNielsenWatermarksSettingsPropertyFromCloudFormation(properties.NielsenWatermarksSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AutomaticInputFailoverSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AutomaticInputFailoverSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AutomaticInputFailoverSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('errorClearTimeMsec', cdk.validateNumber)(properties.errorClearTimeMsec));
    errors.collect(cdk.propertyValidator('failoverConditions', cdk.listValidator(CfnChannel_FailoverConditionPropertyValidator))(properties.failoverConditions));
    errors.collect(cdk.propertyValidator('inputPreference', cdk.validateString)(properties.inputPreference));
    errors.collect(cdk.propertyValidator('secondaryInputId', cdk.validateString)(properties.secondaryInputId));
    return errors.wrap('supplied properties not correct for "AutomaticInputFailoverSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AutomaticInputFailoverSettings` resource
 *
 * @param properties - the TypeScript properties of a `AutomaticInputFailoverSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AutomaticInputFailoverSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAutomaticInputFailoverSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AutomaticInputFailoverSettingsPropertyValidator(properties).assertSuccess();
    return {
        ErrorClearTimeMsec: cdk.numberToCloudFormation(properties.errorClearTimeMsec),
        FailoverConditions: cdk.listMapper(cfnChannelFailoverConditionPropertyToCloudFormation)(properties.failoverConditions),
        InputPreference: cdk.stringToCloudFormation(properties.inputPreference),
        SecondaryInputId: cdk.stringToCloudFormation(properties.secondaryInputId),
    };
}
// @ts-ignore TS6133
function CfnChannelAutomaticInputFailoverSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('errorClearTimeMsec', 'ErrorClearTimeMsec', properties.ErrorClearTimeMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorClearTimeMsec) : undefined);
    ret.addPropertyResult('failoverConditions', 'FailoverConditions', properties.FailoverConditions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelFailoverConditionPropertyFromCloudFormation)(properties.FailoverConditions) : undefined);
    ret.addPropertyResult('inputPreference', 'InputPreference', properties.InputPreference != null ? cfn_parse.FromCloudFormation.getString(properties.InputPreference) : undefined);
    ret.addPropertyResult('secondaryInputId', 'SecondaryInputId', properties.SecondaryInputId != null ? cfn_parse.FromCloudFormation.getString(properties.SecondaryInputId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AvailBlankingProperty`
 *
 * @param properties - the TypeScript properties of a `AvailBlankingProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AvailBlankingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('availBlankingImage', CfnChannel_InputLocationPropertyValidator)(properties.availBlankingImage));
    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));
    return errors.wrap('supplied properties not correct for "AvailBlankingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailBlanking` resource
 *
 * @param properties - the TypeScript properties of a `AvailBlankingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailBlanking` resource.
 */
// @ts-ignore TS6133
function cfnChannelAvailBlankingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AvailBlankingPropertyValidator(properties).assertSuccess();
    return {
        AvailBlankingImage: cfnChannelInputLocationPropertyToCloudFormation(properties.availBlankingImage),
        State: cdk.stringToCloudFormation(properties.state),
    };
}
// @ts-ignore TS6133
function CfnChannelAvailBlankingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('availBlankingImage', 'AvailBlankingImage', properties.AvailBlankingImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.AvailBlankingImage) : undefined);
    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AvailConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `AvailConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AvailConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('availSettings', CfnChannel_AvailSettingsPropertyValidator)(properties.availSettings));
    return errors.wrap('supplied properties not correct for "AvailConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `AvailConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnChannelAvailConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AvailConfigurationPropertyValidator(properties).assertSuccess();
    return {
        AvailSettings: cfnChannelAvailSettingsPropertyToCloudFormation(properties.availSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelAvailConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('availSettings', 'AvailSettings', properties.AvailSettings != null ? CfnChannelAvailSettingsPropertyFromCloudFormation(properties.AvailSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `AvailSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `AvailSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_AvailSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('scte35SpliceInsert', CfnChannel_Scte35SpliceInsertPropertyValidator)(properties.scte35SpliceInsert));
    errors.collect(cdk.propertyValidator('scte35TimeSignalApos', CfnChannel_Scte35TimeSignalAposPropertyValidator)(properties.scte35TimeSignalApos));
    return errors.wrap('supplied properties not correct for "AvailSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailSettings` resource
 *
 * @param properties - the TypeScript properties of a `AvailSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelAvailSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_AvailSettingsPropertyValidator(properties).assertSuccess();
    return {
        Scte35SpliceInsert: cfnChannelScte35SpliceInsertPropertyToCloudFormation(properties.scte35SpliceInsert),
        Scte35TimeSignalApos: cfnChannelScte35TimeSignalAposPropertyToCloudFormation(properties.scte35TimeSignalApos),
    };
}
// @ts-ignore TS6133
function CfnChannelAvailSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('scte35SpliceInsert', 'Scte35SpliceInsert', properties.Scte35SpliceInsert != null ? CfnChannelScte35SpliceInsertPropertyFromCloudFormation(properties.Scte35SpliceInsert) : undefined);
    ret.addPropertyResult('scte35TimeSignalApos', 'Scte35TimeSignalApos', properties.Scte35TimeSignalApos != null ? CfnChannelScte35TimeSignalAposPropertyFromCloudFormation(properties.Scte35TimeSignalApos) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `BlackoutSlateProperty`
 *
 * @param properties - the TypeScript properties of a `BlackoutSlateProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_BlackoutSlatePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('blackoutSlateImage', CfnChannel_InputLocationPropertyValidator)(properties.blackoutSlateImage));
    errors.collect(cdk.propertyValidator('networkEndBlackout', cdk.validateString)(properties.networkEndBlackout));
    errors.collect(cdk.propertyValidator('networkEndBlackoutImage', CfnChannel_InputLocationPropertyValidator)(properties.networkEndBlackoutImage));
    errors.collect(cdk.propertyValidator('networkId', cdk.validateString)(properties.networkId));
    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));
    return errors.wrap('supplied properties not correct for "BlackoutSlateProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BlackoutSlate` resource
 *
 * @param properties - the TypeScript properties of a `BlackoutSlateProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BlackoutSlate` resource.
 */
// @ts-ignore TS6133
function cfnChannelBlackoutSlatePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_BlackoutSlatePropertyValidator(properties).assertSuccess();
    return {
        BlackoutSlateImage: cfnChannelInputLocationPropertyToCloudFormation(properties.blackoutSlateImage),
        NetworkEndBlackout: cdk.stringToCloudFormation(properties.networkEndBlackout),
        NetworkEndBlackoutImage: cfnChannelInputLocationPropertyToCloudFormation(properties.networkEndBlackoutImage),
        NetworkId: cdk.stringToCloudFormation(properties.networkId),
        State: cdk.stringToCloudFormation(properties.state),
    };
}
// @ts-ignore TS6133
function CfnChannelBlackoutSlatePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('blackoutSlateImage', 'BlackoutSlateImage', properties.BlackoutSlateImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.BlackoutSlateImage) : undefined);
    ret.addPropertyResult('networkEndBlackout', 'NetworkEndBlackout', properties.NetworkEndBlackout != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkEndBlackout) : undefined);
    ret.addPropertyResult('networkEndBlackoutImage', 'NetworkEndBlackoutImage', properties.NetworkEndBlackoutImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.NetworkEndBlackoutImage) : undefined);
    ret.addPropertyResult('networkId', 'NetworkId', properties.NetworkId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkId) : undefined);
    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `BurnInDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `BurnInDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_BurnInDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('alignment', cdk.validateString)(properties.alignment));
    errors.collect(cdk.propertyValidator('backgroundColor', cdk.validateString)(properties.backgroundColor));
    errors.collect(cdk.propertyValidator('backgroundOpacity', cdk.validateNumber)(properties.backgroundOpacity));
    errors.collect(cdk.propertyValidator('font', CfnChannel_InputLocationPropertyValidator)(properties.font));
    errors.collect(cdk.propertyValidator('fontColor', cdk.validateString)(properties.fontColor));
    errors.collect(cdk.propertyValidator('fontOpacity', cdk.validateNumber)(properties.fontOpacity));
    errors.collect(cdk.propertyValidator('fontResolution', cdk.validateNumber)(properties.fontResolution));
    errors.collect(cdk.propertyValidator('fontSize', cdk.validateString)(properties.fontSize));
    errors.collect(cdk.propertyValidator('outlineColor', cdk.validateString)(properties.outlineColor));
    errors.collect(cdk.propertyValidator('outlineSize', cdk.validateNumber)(properties.outlineSize));
    errors.collect(cdk.propertyValidator('shadowColor', cdk.validateString)(properties.shadowColor));
    errors.collect(cdk.propertyValidator('shadowOpacity', cdk.validateNumber)(properties.shadowOpacity));
    errors.collect(cdk.propertyValidator('shadowXOffset', cdk.validateNumber)(properties.shadowXOffset));
    errors.collect(cdk.propertyValidator('shadowYOffset', cdk.validateNumber)(properties.shadowYOffset));
    errors.collect(cdk.propertyValidator('teletextGridControl', cdk.validateString)(properties.teletextGridControl));
    errors.collect(cdk.propertyValidator('xPosition', cdk.validateNumber)(properties.xPosition));
    errors.collect(cdk.propertyValidator('yPosition', cdk.validateNumber)(properties.yPosition));
    return errors.wrap('supplied properties not correct for "BurnInDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BurnInDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `BurnInDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BurnInDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelBurnInDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_BurnInDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        Alignment: cdk.stringToCloudFormation(properties.alignment),
        BackgroundColor: cdk.stringToCloudFormation(properties.backgroundColor),
        BackgroundOpacity: cdk.numberToCloudFormation(properties.backgroundOpacity),
        Font: cfnChannelInputLocationPropertyToCloudFormation(properties.font),
        FontColor: cdk.stringToCloudFormation(properties.fontColor),
        FontOpacity: cdk.numberToCloudFormation(properties.fontOpacity),
        FontResolution: cdk.numberToCloudFormation(properties.fontResolution),
        FontSize: cdk.stringToCloudFormation(properties.fontSize),
        OutlineColor: cdk.stringToCloudFormation(properties.outlineColor),
        OutlineSize: cdk.numberToCloudFormation(properties.outlineSize),
        ShadowColor: cdk.stringToCloudFormation(properties.shadowColor),
        ShadowOpacity: cdk.numberToCloudFormation(properties.shadowOpacity),
        ShadowXOffset: cdk.numberToCloudFormation(properties.shadowXOffset),
        ShadowYOffset: cdk.numberToCloudFormation(properties.shadowYOffset),
        TeletextGridControl: cdk.stringToCloudFormation(properties.teletextGridControl),
        XPosition: cdk.numberToCloudFormation(properties.xPosition),
        YPosition: cdk.numberToCloudFormation(properties.yPosition),
    };
}
// @ts-ignore TS6133
function CfnChannelBurnInDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('alignment', 'Alignment', properties.Alignment != null ? cfn_parse.FromCloudFormation.getString(properties.Alignment) : undefined);
    ret.addPropertyResult('backgroundColor', 'BackgroundColor', properties.BackgroundColor != null ? cfn_parse.FromCloudFormation.getString(properties.BackgroundColor) : undefined);
    ret.addPropertyResult('backgroundOpacity', 'BackgroundOpacity', properties.BackgroundOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.BackgroundOpacity) : undefined);
    ret.addPropertyResult('font', 'Font', properties.Font != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.Font) : undefined);
    ret.addPropertyResult('fontColor', 'FontColor', properties.FontColor != null ? cfn_parse.FromCloudFormation.getString(properties.FontColor) : undefined);
    ret.addPropertyResult('fontOpacity', 'FontOpacity', properties.FontOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontOpacity) : undefined);
    ret.addPropertyResult('fontResolution', 'FontResolution', properties.FontResolution != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontResolution) : undefined);
    ret.addPropertyResult('fontSize', 'FontSize', properties.FontSize != null ? cfn_parse.FromCloudFormation.getString(properties.FontSize) : undefined);
    ret.addPropertyResult('outlineColor', 'OutlineColor', properties.OutlineColor != null ? cfn_parse.FromCloudFormation.getString(properties.OutlineColor) : undefined);
    ret.addPropertyResult('outlineSize', 'OutlineSize', properties.OutlineSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutlineSize) : undefined);
    ret.addPropertyResult('shadowColor', 'ShadowColor', properties.ShadowColor != null ? cfn_parse.FromCloudFormation.getString(properties.ShadowColor) : undefined);
    ret.addPropertyResult('shadowOpacity', 'ShadowOpacity', properties.ShadowOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowOpacity) : undefined);
    ret.addPropertyResult('shadowXOffset', 'ShadowXOffset', properties.ShadowXOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowXOffset) : undefined);
    ret.addPropertyResult('shadowYOffset', 'ShadowYOffset', properties.ShadowYOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowYOffset) : undefined);
    ret.addPropertyResult('teletextGridControl', 'TeletextGridControl', properties.TeletextGridControl != null ? cfn_parse.FromCloudFormation.getString(properties.TeletextGridControl) : undefined);
    ret.addPropertyResult('xPosition', 'XPosition', properties.XPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.XPosition) : undefined);
    ret.addPropertyResult('yPosition', 'YPosition', properties.YPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.YPosition) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionDescriptionProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionDescriptionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionDescriptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('captionSelectorName', cdk.validateString)(properties.captionSelectorName));
    errors.collect(cdk.propertyValidator('destinationSettings', CfnChannel_CaptionDestinationSettingsPropertyValidator)(properties.destinationSettings));
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    errors.collect(cdk.propertyValidator('languageDescription', cdk.validateString)(properties.languageDescription));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "CaptionDescriptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDescription` resource
 *
 * @param properties - the TypeScript properties of a `CaptionDescriptionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDescription` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionDescriptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionDescriptionPropertyValidator(properties).assertSuccess();
    return {
        CaptionSelectorName: cdk.stringToCloudFormation(properties.captionSelectorName),
        DestinationSettings: cfnChannelCaptionDestinationSettingsPropertyToCloudFormation(properties.destinationSettings),
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
        LanguageDescription: cdk.stringToCloudFormation(properties.languageDescription),
        Name: cdk.stringToCloudFormation(properties.name),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionDescriptionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('captionSelectorName', 'CaptionSelectorName', properties.CaptionSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionSelectorName) : undefined);
    ret.addPropertyResult('destinationSettings', 'DestinationSettings', properties.DestinationSettings != null ? CfnChannelCaptionDestinationSettingsPropertyFromCloudFormation(properties.DestinationSettings) : undefined);
    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);
    ret.addPropertyResult('languageDescription', 'LanguageDescription', properties.LanguageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageDescription) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('aribDestinationSettings', CfnChannel_AribDestinationSettingsPropertyValidator)(properties.aribDestinationSettings));
    errors.collect(cdk.propertyValidator('burnInDestinationSettings', CfnChannel_BurnInDestinationSettingsPropertyValidator)(properties.burnInDestinationSettings));
    errors.collect(cdk.propertyValidator('dvbSubDestinationSettings', CfnChannel_DvbSubDestinationSettingsPropertyValidator)(properties.dvbSubDestinationSettings));
    errors.collect(cdk.propertyValidator('ebuTtDDestinationSettings', CfnChannel_EbuTtDDestinationSettingsPropertyValidator)(properties.ebuTtDDestinationSettings));
    errors.collect(cdk.propertyValidator('embeddedDestinationSettings', CfnChannel_EmbeddedDestinationSettingsPropertyValidator)(properties.embeddedDestinationSettings));
    errors.collect(cdk.propertyValidator('embeddedPlusScte20DestinationSettings', CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator)(properties.embeddedPlusScte20DestinationSettings));
    errors.collect(cdk.propertyValidator('rtmpCaptionInfoDestinationSettings', CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator)(properties.rtmpCaptionInfoDestinationSettings));
    errors.collect(cdk.propertyValidator('scte20PlusEmbeddedDestinationSettings', CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator)(properties.scte20PlusEmbeddedDestinationSettings));
    errors.collect(cdk.propertyValidator('scte27DestinationSettings', CfnChannel_Scte27DestinationSettingsPropertyValidator)(properties.scte27DestinationSettings));
    errors.collect(cdk.propertyValidator('smpteTtDestinationSettings', CfnChannel_SmpteTtDestinationSettingsPropertyValidator)(properties.smpteTtDestinationSettings));
    errors.collect(cdk.propertyValidator('teletextDestinationSettings', CfnChannel_TeletextDestinationSettingsPropertyValidator)(properties.teletextDestinationSettings));
    errors.collect(cdk.propertyValidator('ttmlDestinationSettings', CfnChannel_TtmlDestinationSettingsPropertyValidator)(properties.ttmlDestinationSettings));
    errors.collect(cdk.propertyValidator('webvttDestinationSettings', CfnChannel_WebvttDestinationSettingsPropertyValidator)(properties.webvttDestinationSettings));
    return errors.wrap('supplied properties not correct for "CaptionDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `CaptionDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        AribDestinationSettings: cfnChannelAribDestinationSettingsPropertyToCloudFormation(properties.aribDestinationSettings),
        BurnInDestinationSettings: cfnChannelBurnInDestinationSettingsPropertyToCloudFormation(properties.burnInDestinationSettings),
        DvbSubDestinationSettings: cfnChannelDvbSubDestinationSettingsPropertyToCloudFormation(properties.dvbSubDestinationSettings),
        EbuTtDDestinationSettings: cfnChannelEbuTtDDestinationSettingsPropertyToCloudFormation(properties.ebuTtDDestinationSettings),
        EmbeddedDestinationSettings: cfnChannelEmbeddedDestinationSettingsPropertyToCloudFormation(properties.embeddedDestinationSettings),
        EmbeddedPlusScte20DestinationSettings: cfnChannelEmbeddedPlusScte20DestinationSettingsPropertyToCloudFormation(properties.embeddedPlusScte20DestinationSettings),
        RtmpCaptionInfoDestinationSettings: cfnChannelRtmpCaptionInfoDestinationSettingsPropertyToCloudFormation(properties.rtmpCaptionInfoDestinationSettings),
        Scte20PlusEmbeddedDestinationSettings: cfnChannelScte20PlusEmbeddedDestinationSettingsPropertyToCloudFormation(properties.scte20PlusEmbeddedDestinationSettings),
        Scte27DestinationSettings: cfnChannelScte27DestinationSettingsPropertyToCloudFormation(properties.scte27DestinationSettings),
        SmpteTtDestinationSettings: cfnChannelSmpteTtDestinationSettingsPropertyToCloudFormation(properties.smpteTtDestinationSettings),
        TeletextDestinationSettings: cfnChannelTeletextDestinationSettingsPropertyToCloudFormation(properties.teletextDestinationSettings),
        TtmlDestinationSettings: cfnChannelTtmlDestinationSettingsPropertyToCloudFormation(properties.ttmlDestinationSettings),
        WebvttDestinationSettings: cfnChannelWebvttDestinationSettingsPropertyToCloudFormation(properties.webvttDestinationSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('aribDestinationSettings', 'AribDestinationSettings', properties.AribDestinationSettings != null ? CfnChannelAribDestinationSettingsPropertyFromCloudFormation(properties.AribDestinationSettings) : undefined);
    ret.addPropertyResult('burnInDestinationSettings', 'BurnInDestinationSettings', properties.BurnInDestinationSettings != null ? CfnChannelBurnInDestinationSettingsPropertyFromCloudFormation(properties.BurnInDestinationSettings) : undefined);
    ret.addPropertyResult('dvbSubDestinationSettings', 'DvbSubDestinationSettings', properties.DvbSubDestinationSettings != null ? CfnChannelDvbSubDestinationSettingsPropertyFromCloudFormation(properties.DvbSubDestinationSettings) : undefined);
    ret.addPropertyResult('ebuTtDDestinationSettings', 'EbuTtDDestinationSettings', properties.EbuTtDDestinationSettings != null ? CfnChannelEbuTtDDestinationSettingsPropertyFromCloudFormation(properties.EbuTtDDestinationSettings) : undefined);
    ret.addPropertyResult('embeddedDestinationSettings', 'EmbeddedDestinationSettings', properties.EmbeddedDestinationSettings != null ? CfnChannelEmbeddedDestinationSettingsPropertyFromCloudFormation(properties.EmbeddedDestinationSettings) : undefined);
    ret.addPropertyResult('embeddedPlusScte20DestinationSettings', 'EmbeddedPlusScte20DestinationSettings', properties.EmbeddedPlusScte20DestinationSettings != null ? CfnChannelEmbeddedPlusScte20DestinationSettingsPropertyFromCloudFormation(properties.EmbeddedPlusScte20DestinationSettings) : undefined);
    ret.addPropertyResult('rtmpCaptionInfoDestinationSettings', 'RtmpCaptionInfoDestinationSettings', properties.RtmpCaptionInfoDestinationSettings != null ? CfnChannelRtmpCaptionInfoDestinationSettingsPropertyFromCloudFormation(properties.RtmpCaptionInfoDestinationSettings) : undefined);
    ret.addPropertyResult('scte20PlusEmbeddedDestinationSettings', 'Scte20PlusEmbeddedDestinationSettings', properties.Scte20PlusEmbeddedDestinationSettings != null ? CfnChannelScte20PlusEmbeddedDestinationSettingsPropertyFromCloudFormation(properties.Scte20PlusEmbeddedDestinationSettings) : undefined);
    ret.addPropertyResult('scte27DestinationSettings', 'Scte27DestinationSettings', properties.Scte27DestinationSettings != null ? CfnChannelScte27DestinationSettingsPropertyFromCloudFormation(properties.Scte27DestinationSettings) : undefined);
    ret.addPropertyResult('smpteTtDestinationSettings', 'SmpteTtDestinationSettings', properties.SmpteTtDestinationSettings != null ? CfnChannelSmpteTtDestinationSettingsPropertyFromCloudFormation(properties.SmpteTtDestinationSettings) : undefined);
    ret.addPropertyResult('teletextDestinationSettings', 'TeletextDestinationSettings', properties.TeletextDestinationSettings != null ? CfnChannelTeletextDestinationSettingsPropertyFromCloudFormation(properties.TeletextDestinationSettings) : undefined);
    ret.addPropertyResult('ttmlDestinationSettings', 'TtmlDestinationSettings', properties.TtmlDestinationSettings != null ? CfnChannelTtmlDestinationSettingsPropertyFromCloudFormation(properties.TtmlDestinationSettings) : undefined);
    ret.addPropertyResult('webvttDestinationSettings', 'WebvttDestinationSettings', properties.WebvttDestinationSettings != null ? CfnChannelWebvttDestinationSettingsPropertyFromCloudFormation(properties.WebvttDestinationSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionLanguageMappingProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionLanguageMappingProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionLanguageMappingPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('captionChannel', cdk.validateNumber)(properties.captionChannel));
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    errors.collect(cdk.propertyValidator('languageDescription', cdk.validateString)(properties.languageDescription));
    return errors.wrap('supplied properties not correct for "CaptionLanguageMappingProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionLanguageMapping` resource
 *
 * @param properties - the TypeScript properties of a `CaptionLanguageMappingProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionLanguageMapping` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionLanguageMappingPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionLanguageMappingPropertyValidator(properties).assertSuccess();
    return {
        CaptionChannel: cdk.numberToCloudFormation(properties.captionChannel),
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
        LanguageDescription: cdk.stringToCloudFormation(properties.languageDescription),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionLanguageMappingPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('captionChannel', 'CaptionChannel', properties.CaptionChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.CaptionChannel) : undefined);
    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);
    ret.addPropertyResult('languageDescription', 'LanguageDescription', properties.LanguageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageDescription) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionRectangleProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionRectangleProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionRectanglePropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('height', cdk.validateNumber)(properties.height));
    errors.collect(cdk.propertyValidator('leftOffset', cdk.validateNumber)(properties.leftOffset));
    errors.collect(cdk.propertyValidator('topOffset', cdk.validateNumber)(properties.topOffset));
    errors.collect(cdk.propertyValidator('width', cdk.validateNumber)(properties.width));
    return errors.wrap('supplied properties not correct for "CaptionRectangleProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionRectangle` resource
 *
 * @param properties - the TypeScript properties of a `CaptionRectangleProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionRectangle` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionRectanglePropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionRectanglePropertyValidator(properties).assertSuccess();
    return {
        Height: cdk.numberToCloudFormation(properties.height),
        LeftOffset: cdk.numberToCloudFormation(properties.leftOffset),
        TopOffset: cdk.numberToCloudFormation(properties.topOffset),
        Width: cdk.numberToCloudFormation(properties.width),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionRectanglePropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('height', 'Height', properties.Height != null ? cfn_parse.FromCloudFormation.getNumber(properties.Height) : undefined);
    ret.addPropertyResult('leftOffset', 'LeftOffset', properties.LeftOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.LeftOffset) : undefined);
    ret.addPropertyResult('topOffset', 'TopOffset', properties.TopOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.TopOffset) : undefined);
    ret.addPropertyResult('width', 'Width', properties.Width != null ? cfn_parse.FromCloudFormation.getNumber(properties.Width) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionSelectorProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionSelectorProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionSelectorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_CaptionSelectorSettingsPropertyValidator)(properties.selectorSettings));
    return errors.wrap('supplied properties not correct for "CaptionSelectorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelector` resource
 *
 * @param properties - the TypeScript properties of a `CaptionSelectorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelector` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionSelectorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionSelectorPropertyValidator(properties).assertSuccess();
    return {
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
        Name: cdk.stringToCloudFormation(properties.name),
        SelectorSettings: cfnChannelCaptionSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionSelectorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelCaptionSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CaptionSelectorSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `CaptionSelectorSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CaptionSelectorSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('ancillarySourceSettings', CfnChannel_AncillarySourceSettingsPropertyValidator)(properties.ancillarySourceSettings));
    errors.collect(cdk.propertyValidator('aribSourceSettings', CfnChannel_AribSourceSettingsPropertyValidator)(properties.aribSourceSettings));
    errors.collect(cdk.propertyValidator('dvbSubSourceSettings', CfnChannel_DvbSubSourceSettingsPropertyValidator)(properties.dvbSubSourceSettings));
    errors.collect(cdk.propertyValidator('embeddedSourceSettings', CfnChannel_EmbeddedSourceSettingsPropertyValidator)(properties.embeddedSourceSettings));
    errors.collect(cdk.propertyValidator('scte20SourceSettings', CfnChannel_Scte20SourceSettingsPropertyValidator)(properties.scte20SourceSettings));
    errors.collect(cdk.propertyValidator('scte27SourceSettings', CfnChannel_Scte27SourceSettingsPropertyValidator)(properties.scte27SourceSettings));
    errors.collect(cdk.propertyValidator('teletextSourceSettings', CfnChannel_TeletextSourceSettingsPropertyValidator)(properties.teletextSourceSettings));
    return errors.wrap('supplied properties not correct for "CaptionSelectorSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelectorSettings` resource
 *
 * @param properties - the TypeScript properties of a `CaptionSelectorSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelectorSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelCaptionSelectorSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CaptionSelectorSettingsPropertyValidator(properties).assertSuccess();
    return {
        AncillarySourceSettings: cfnChannelAncillarySourceSettingsPropertyToCloudFormation(properties.ancillarySourceSettings),
        AribSourceSettings: cfnChannelAribSourceSettingsPropertyToCloudFormation(properties.aribSourceSettings),
        DvbSubSourceSettings: cfnChannelDvbSubSourceSettingsPropertyToCloudFormation(properties.dvbSubSourceSettings),
        EmbeddedSourceSettings: cfnChannelEmbeddedSourceSettingsPropertyToCloudFormation(properties.embeddedSourceSettings),
        Scte20SourceSettings: cfnChannelScte20SourceSettingsPropertyToCloudFormation(properties.scte20SourceSettings),
        Scte27SourceSettings: cfnChannelScte27SourceSettingsPropertyToCloudFormation(properties.scte27SourceSettings),
        TeletextSourceSettings: cfnChannelTeletextSourceSettingsPropertyToCloudFormation(properties.teletextSourceSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelCaptionSelectorSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('ancillarySourceSettings', 'AncillarySourceSettings', properties.AncillarySourceSettings != null ? CfnChannelAncillarySourceSettingsPropertyFromCloudFormation(properties.AncillarySourceSettings) : undefined);
    ret.addPropertyResult('aribSourceSettings', 'AribSourceSettings', properties.AribSourceSettings != null ? CfnChannelAribSourceSettingsPropertyFromCloudFormation(properties.AribSourceSettings) : undefined);
    ret.addPropertyResult('dvbSubSourceSettings', 'DvbSubSourceSettings', properties.DvbSubSourceSettings != null ? CfnChannelDvbSubSourceSettingsPropertyFromCloudFormation(properties.DvbSubSourceSettings) : undefined);
    ret.addPropertyResult('embeddedSourceSettings', 'EmbeddedSourceSettings', properties.EmbeddedSourceSettings != null ? CfnChannelEmbeddedSourceSettingsPropertyFromCloudFormation(properties.EmbeddedSourceSettings) : undefined);
    ret.addPropertyResult('scte20SourceSettings', 'Scte20SourceSettings', properties.Scte20SourceSettings != null ? CfnChannelScte20SourceSettingsPropertyFromCloudFormation(properties.Scte20SourceSettings) : undefined);
    ret.addPropertyResult('scte27SourceSettings', 'Scte27SourceSettings', properties.Scte27SourceSettings != null ? CfnChannelScte27SourceSettingsPropertyFromCloudFormation(properties.Scte27SourceSettings) : undefined);
    ret.addPropertyResult('teletextSourceSettings', 'TeletextSourceSettings', properties.TeletextSourceSettings != null ? CfnChannelTeletextSourceSettingsPropertyFromCloudFormation(properties.TeletextSourceSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CdiInputSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `CdiInputSpecificationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_CdiInputSpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('resolution', cdk.validateString)(properties.resolution));
    return errors.wrap('supplied properties not correct for "CdiInputSpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CdiInputSpecification` resource
 *
 * @param properties - the TypeScript properties of a `CdiInputSpecificationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CdiInputSpecification` resource.
 */
// @ts-ignore TS6133
function cfnChannelCdiInputSpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_CdiInputSpecificationPropertyValidator(properties).assertSuccess();
    return {
        Resolution: cdk.stringToCloudFormation(properties.resolution),
    };
}
// @ts-ignore TS6133
function CfnChannelCdiInputSpecificationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('resolution', 'Resolution', properties.Resolution != null ? cfn_parse.FromCloudFormation.getString(properties.Resolution) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `ColorSpacePassthroughSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `ColorSpacePassthroughSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_ColorSpacePassthroughSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "ColorSpacePassthroughSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ColorSpacePassthroughSettings` resource
 *
 * @param properties - the TypeScript properties of a `ColorSpacePassthroughSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ColorSpacePassthroughSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_ColorSpacePassthroughSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DvbNitSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DvbNitSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_DvbNitSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('networkId', cdk.validateNumber)(properties.networkId));
    errors.collect(cdk.propertyValidator('networkName', cdk.validateString)(properties.networkName));
    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));
    return errors.wrap('supplied properties not correct for "DvbNitSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbNitSettings` resource
 *
 * @param properties - the TypeScript properties of a `DvbNitSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbNitSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelDvbNitSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_DvbNitSettingsPropertyValidator(properties).assertSuccess();
    return {
        NetworkId: cdk.numberToCloudFormation(properties.networkId),
        NetworkName: cdk.stringToCloudFormation(properties.networkName),
        RepInterval: cdk.numberToCloudFormation(properties.repInterval),
    };
}
// @ts-ignore TS6133
function CfnChannelDvbNitSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('networkId', 'NetworkId', properties.NetworkId != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetworkId) : undefined);
    ret.addPropertyResult('networkName', 'NetworkName', properties.NetworkName != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkName) : undefined);
    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DvbSdtSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DvbSdtSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_DvbSdtSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('outputSdt', cdk.validateString)(properties.outputSdt));
    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));
    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));
    errors.collect(cdk.propertyValidator('serviceProviderName', cdk.validateString)(properties.serviceProviderName));
    return errors.wrap('supplied properties not correct for "DvbSdtSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSdtSettings` resource
 *
 * @param properties - the TypeScript properties of a `DvbSdtSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSdtSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelDvbSdtSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_DvbSdtSettingsPropertyValidator(properties).assertSuccess();
    return {
        OutputSdt: cdk.stringToCloudFormation(properties.outputSdt),
        RepInterval: cdk.numberToCloudFormation(properties.repInterval),
        ServiceName: cdk.stringToCloudFormation(properties.serviceName),
        ServiceProviderName: cdk.stringToCloudFormation(properties.serviceProviderName),
    };
}
// @ts-ignore TS6133
function CfnChannelDvbSdtSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('outputSdt', 'OutputSdt', properties.OutputSdt != null ? cfn_parse.FromCloudFormation.getString(properties.OutputSdt) : undefined);
    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);
    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);
    ret.addPropertyResult('serviceProviderName', 'ServiceProviderName', properties.ServiceProviderName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceProviderName) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DvbSubDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DvbSubDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_DvbSubDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('alignment', cdk.validateString)(properties.alignment));
    errors.collect(cdk.propertyValidator('backgroundColor', cdk.validateString)(properties.backgroundColor));
    errors.collect(cdk.propertyValidator('backgroundOpacity', cdk.validateNumber)(properties.backgroundOpacity));
    errors.collect(cdk.propertyValidator('font', CfnChannel_InputLocationPropertyValidator)(properties.font));
    errors.collect(cdk.propertyValidator('fontColor', cdk.validateString)(properties.fontColor));
    errors.collect(cdk.propertyValidator('fontOpacity', cdk.validateNumber)(properties.fontOpacity));
    errors.collect(cdk.propertyValidator('fontResolution', cdk.validateNumber)(properties.fontResolution));
    errors.collect(cdk.propertyValidator('fontSize', cdk.validateString)(properties.fontSize));
    errors.collect(cdk.propertyValidator('outlineColor', cdk.validateString)(properties.outlineColor));
    errors.collect(cdk.propertyValidator('outlineSize', cdk.validateNumber)(properties.outlineSize));
    errors.collect(cdk.propertyValidator('shadowColor', cdk.validateString)(properties.shadowColor));
    errors.collect(cdk.propertyValidator('shadowOpacity', cdk.validateNumber)(properties.shadowOpacity));
    errors.collect(cdk.propertyValidator('shadowXOffset', cdk.validateNumber)(properties.shadowXOffset));
    errors.collect(cdk.propertyValidator('shadowYOffset', cdk.validateNumber)(properties.shadowYOffset));
    errors.collect(cdk.propertyValidator('teletextGridControl', cdk.validateString)(properties.teletextGridControl));
    errors.collect(cdk.propertyValidator('xPosition', cdk.validateNumber)(properties.xPosition));
    errors.collect(cdk.propertyValidator('yPosition', cdk.validateNumber)(properties.yPosition));
    return errors.wrap('supplied properties not correct for "DvbSubDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `DvbSubDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelDvbSubDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_DvbSubDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        Alignment: cdk.stringToCloudFormation(properties.alignment),
        BackgroundColor: cdk.stringToCloudFormation(properties.backgroundColor),
        BackgroundOpacity: cdk.numberToCloudFormation(properties.backgroundOpacity),
        Font: cfnChannelInputLocationPropertyToCloudFormation(properties.font),
        FontColor: cdk.stringToCloudFormation(properties.fontColor),
        FontOpacity: cdk.numberToCloudFormation(properties.fontOpacity),
        FontResolution: cdk.numberToCloudFormation(properties.fontResolution),
        FontSize: cdk.stringToCloudFormation(properties.fontSize),
        OutlineColor: cdk.stringToCloudFormation(properties.outlineColor),
        OutlineSize: cdk.numberToCloudFormation(properties.outlineSize),
        ShadowColor: cdk.stringToCloudFormation(properties.shadowColor),
        ShadowOpacity: cdk.numberToCloudFormation(properties.shadowOpacity),
        ShadowXOffset: cdk.numberToCloudFormation(properties.shadowXOffset),
        ShadowYOffset: cdk.numberToCloudFormation(properties.shadowYOffset),
        TeletextGridControl: cdk.stringToCloudFormation(properties.teletextGridControl),
        XPosition: cdk.numberToCloudFormation(properties.xPosition),
        YPosition: cdk.numberToCloudFormation(properties.yPosition),
    };
}
// @ts-ignore TS6133
function CfnChannelDvbSubDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('alignment', 'Alignment', properties.Alignment != null ? cfn_parse.FromCloudFormation.getString(properties.Alignment) : undefined);
    ret.addPropertyResult('backgroundColor', 'BackgroundColor', properties.BackgroundColor != null ? cfn_parse.FromCloudFormation.getString(properties.BackgroundColor) : undefined);
    ret.addPropertyResult('backgroundOpacity', 'BackgroundOpacity', properties.BackgroundOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.BackgroundOpacity) : undefined);
    ret.addPropertyResult('font', 'Font', properties.Font != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.Font) : undefined);
    ret.addPropertyResult('fontColor', 'FontColor', properties.FontColor != null ? cfn_parse.FromCloudFormation.getString(properties.FontColor) : undefined);
    ret.addPropertyResult('fontOpacity', 'FontOpacity', properties.FontOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontOpacity) : undefined);
    ret.addPropertyResult('fontResolution', 'FontResolution', properties.FontResolution != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontResolution) : undefined);
    ret.addPropertyResult('fontSize', 'FontSize', properties.FontSize != null ? cfn_parse.FromCloudFormation.getString(properties.FontSize) : undefined);
    ret.addPropertyResult('outlineColor', 'OutlineColor', properties.OutlineColor != null ? cfn_parse.FromCloudFormation.getString(properties.OutlineColor) : undefined);
    ret.addPropertyResult('outlineSize', 'OutlineSize', properties.OutlineSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutlineSize) : undefined);
    ret.addPropertyResult('shadowColor', 'ShadowColor', properties.ShadowColor != null ? cfn_parse.FromCloudFormation.getString(properties.ShadowColor) : undefined);
    ret.addPropertyResult('shadowOpacity', 'ShadowOpacity', properties.ShadowOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowOpacity) : undefined);
    ret.addPropertyResult('shadowXOffset', 'ShadowXOffset', properties.ShadowXOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowXOffset) : undefined);
    ret.addPropertyResult('shadowYOffset', 'ShadowYOffset', properties.ShadowYOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowYOffset) : undefined);
    ret.addPropertyResult('teletextGridControl', 'TeletextGridControl', properties.TeletextGridControl != null ? cfn_parse.FromCloudFormation.getString(properties.TeletextGridControl) : undefined);
    ret.addPropertyResult('xPosition', 'XPosition', properties.XPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.XPosition) : undefined);
    ret.addPropertyResult('yPosition', 'YPosition', properties.YPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.YPosition) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DvbSubSourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DvbSubSourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_DvbSubSourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('ocrLanguage', cdk.validateString)(properties.ocrLanguage));
    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));
    return errors.wrap('supplied properties not correct for "DvbSubSourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubSourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `DvbSubSourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubSourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelDvbSubSourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_DvbSubSourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        OcrLanguage: cdk.stringToCloudFormation(properties.ocrLanguage),
        Pid: cdk.numberToCloudFormation(properties.pid),
    };
}
// @ts-ignore TS6133
function CfnChannelDvbSubSourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('ocrLanguage', 'OcrLanguage', properties.OcrLanguage != null ? cfn_parse.FromCloudFormation.getString(properties.OcrLanguage) : undefined);
    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DvbTdtSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DvbTdtSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_DvbTdtSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));
    return errors.wrap('supplied properties not correct for "DvbTdtSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbTdtSettings` resource
 *
 * @param properties - the TypeScript properties of a `DvbTdtSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbTdtSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelDvbTdtSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_DvbTdtSettingsPropertyValidator(properties).assertSuccess();
    return {
        RepInterval: cdk.numberToCloudFormation(properties.repInterval),
    };
}
// @ts-ignore TS6133
function CfnChannelDvbTdtSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Eac3SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Eac3SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Eac3SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('attenuationControl', cdk.validateString)(properties.attenuationControl));
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('bitstreamMode', cdk.validateString)(properties.bitstreamMode));
    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));
    errors.collect(cdk.propertyValidator('dcFilter', cdk.validateString)(properties.dcFilter));
    errors.collect(cdk.propertyValidator('dialnorm', cdk.validateNumber)(properties.dialnorm));
    errors.collect(cdk.propertyValidator('drcLine', cdk.validateString)(properties.drcLine));
    errors.collect(cdk.propertyValidator('drcRf', cdk.validateString)(properties.drcRf));
    errors.collect(cdk.propertyValidator('lfeControl', cdk.validateString)(properties.lfeControl));
    errors.collect(cdk.propertyValidator('lfeFilter', cdk.validateString)(properties.lfeFilter));
    errors.collect(cdk.propertyValidator('loRoCenterMixLevel', cdk.validateNumber)(properties.loRoCenterMixLevel));
    errors.collect(cdk.propertyValidator('loRoSurroundMixLevel', cdk.validateNumber)(properties.loRoSurroundMixLevel));
    errors.collect(cdk.propertyValidator('ltRtCenterMixLevel', cdk.validateNumber)(properties.ltRtCenterMixLevel));
    errors.collect(cdk.propertyValidator('ltRtSurroundMixLevel', cdk.validateNumber)(properties.ltRtSurroundMixLevel));
    errors.collect(cdk.propertyValidator('metadataControl', cdk.validateString)(properties.metadataControl));
    errors.collect(cdk.propertyValidator('passthroughControl', cdk.validateString)(properties.passthroughControl));
    errors.collect(cdk.propertyValidator('phaseControl', cdk.validateString)(properties.phaseControl));
    errors.collect(cdk.propertyValidator('stereoDownmix', cdk.validateString)(properties.stereoDownmix));
    errors.collect(cdk.propertyValidator('surroundExMode', cdk.validateString)(properties.surroundExMode));
    errors.collect(cdk.propertyValidator('surroundMode', cdk.validateString)(properties.surroundMode));
    return errors.wrap('supplied properties not correct for "Eac3SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Eac3Settings` resource
 *
 * @param properties - the TypeScript properties of a `Eac3SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Eac3Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEac3SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Eac3SettingsPropertyValidator(properties).assertSuccess();
    return {
        AttenuationControl: cdk.stringToCloudFormation(properties.attenuationControl),
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        BitstreamMode: cdk.stringToCloudFormation(properties.bitstreamMode),
        CodingMode: cdk.stringToCloudFormation(properties.codingMode),
        DcFilter: cdk.stringToCloudFormation(properties.dcFilter),
        Dialnorm: cdk.numberToCloudFormation(properties.dialnorm),
        DrcLine: cdk.stringToCloudFormation(properties.drcLine),
        DrcRf: cdk.stringToCloudFormation(properties.drcRf),
        LfeControl: cdk.stringToCloudFormation(properties.lfeControl),
        LfeFilter: cdk.stringToCloudFormation(properties.lfeFilter),
        LoRoCenterMixLevel: cdk.numberToCloudFormation(properties.loRoCenterMixLevel),
        LoRoSurroundMixLevel: cdk.numberToCloudFormation(properties.loRoSurroundMixLevel),
        LtRtCenterMixLevel: cdk.numberToCloudFormation(properties.ltRtCenterMixLevel),
        LtRtSurroundMixLevel: cdk.numberToCloudFormation(properties.ltRtSurroundMixLevel),
        MetadataControl: cdk.stringToCloudFormation(properties.metadataControl),
        PassthroughControl: cdk.stringToCloudFormation(properties.passthroughControl),
        PhaseControl: cdk.stringToCloudFormation(properties.phaseControl),
        StereoDownmix: cdk.stringToCloudFormation(properties.stereoDownmix),
        SurroundExMode: cdk.stringToCloudFormation(properties.surroundExMode),
        SurroundMode: cdk.stringToCloudFormation(properties.surroundMode),
    };
}
// @ts-ignore TS6133
function CfnChannelEac3SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('attenuationControl', 'AttenuationControl', properties.AttenuationControl != null ? cfn_parse.FromCloudFormation.getString(properties.AttenuationControl) : undefined);
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('bitstreamMode', 'BitstreamMode', properties.BitstreamMode != null ? cfn_parse.FromCloudFormation.getString(properties.BitstreamMode) : undefined);
    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);
    ret.addPropertyResult('dcFilter', 'DcFilter', properties.DcFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DcFilter) : undefined);
    ret.addPropertyResult('dialnorm', 'Dialnorm', properties.Dialnorm != null ? cfn_parse.FromCloudFormation.getNumber(properties.Dialnorm) : undefined);
    ret.addPropertyResult('drcLine', 'DrcLine', properties.DrcLine != null ? cfn_parse.FromCloudFormation.getString(properties.DrcLine) : undefined);
    ret.addPropertyResult('drcRf', 'DrcRf', properties.DrcRf != null ? cfn_parse.FromCloudFormation.getString(properties.DrcRf) : undefined);
    ret.addPropertyResult('lfeControl', 'LfeControl', properties.LfeControl != null ? cfn_parse.FromCloudFormation.getString(properties.LfeControl) : undefined);
    ret.addPropertyResult('lfeFilter', 'LfeFilter', properties.LfeFilter != null ? cfn_parse.FromCloudFormation.getString(properties.LfeFilter) : undefined);
    ret.addPropertyResult('loRoCenterMixLevel', 'LoRoCenterMixLevel', properties.LoRoCenterMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoRoCenterMixLevel) : undefined);
    ret.addPropertyResult('loRoSurroundMixLevel', 'LoRoSurroundMixLevel', properties.LoRoSurroundMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoRoSurroundMixLevel) : undefined);
    ret.addPropertyResult('ltRtCenterMixLevel', 'LtRtCenterMixLevel', properties.LtRtCenterMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LtRtCenterMixLevel) : undefined);
    ret.addPropertyResult('ltRtSurroundMixLevel', 'LtRtSurroundMixLevel', properties.LtRtSurroundMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LtRtSurroundMixLevel) : undefined);
    ret.addPropertyResult('metadataControl', 'MetadataControl', properties.MetadataControl != null ? cfn_parse.FromCloudFormation.getString(properties.MetadataControl) : undefined);
    ret.addPropertyResult('passthroughControl', 'PassthroughControl', properties.PassthroughControl != null ? cfn_parse.FromCloudFormation.getString(properties.PassthroughControl) : undefined);
    ret.addPropertyResult('phaseControl', 'PhaseControl', properties.PhaseControl != null ? cfn_parse.FromCloudFormation.getString(properties.PhaseControl) : undefined);
    ret.addPropertyResult('stereoDownmix', 'StereoDownmix', properties.StereoDownmix != null ? cfn_parse.FromCloudFormation.getString(properties.StereoDownmix) : undefined);
    ret.addPropertyResult('surroundExMode', 'SurroundExMode', properties.SurroundExMode != null ? cfn_parse.FromCloudFormation.getString(properties.SurroundExMode) : undefined);
    ret.addPropertyResult('surroundMode', 'SurroundMode', properties.SurroundMode != null ? cfn_parse.FromCloudFormation.getString(properties.SurroundMode) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EbuTtDDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `EbuTtDDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_EbuTtDDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('copyrightHolder', cdk.validateString)(properties.copyrightHolder));
    errors.collect(cdk.propertyValidator('fillLineGap', cdk.validateString)(properties.fillLineGap));
    errors.collect(cdk.propertyValidator('fontFamily', cdk.validateString)(properties.fontFamily));
    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));
    return errors.wrap('supplied properties not correct for "EbuTtDDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EbuTtDDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `EbuTtDDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EbuTtDDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEbuTtDDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_EbuTtDDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        CopyrightHolder: cdk.stringToCloudFormation(properties.copyrightHolder),
        FillLineGap: cdk.stringToCloudFormation(properties.fillLineGap),
        FontFamily: cdk.stringToCloudFormation(properties.fontFamily),
        StyleControl: cdk.stringToCloudFormation(properties.styleControl),
    };
}
// @ts-ignore TS6133
function CfnChannelEbuTtDDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('copyrightHolder', 'CopyrightHolder', properties.CopyrightHolder != null ? cfn_parse.FromCloudFormation.getString(properties.CopyrightHolder) : undefined);
    ret.addPropertyResult('fillLineGap', 'FillLineGap', properties.FillLineGap != null ? cfn_parse.FromCloudFormation.getString(properties.FillLineGap) : undefined);
    ret.addPropertyResult('fontFamily', 'FontFamily', properties.FontFamily != null ? cfn_parse.FromCloudFormation.getString(properties.FontFamily) : undefined);
    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EmbeddedDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `EmbeddedDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_EmbeddedDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "EmbeddedDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `EmbeddedDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEmbeddedDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_EmbeddedDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelEmbeddedDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EmbeddedPlusScte20DestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `EmbeddedPlusScte20DestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "EmbeddedPlusScte20DestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `EmbeddedPlusScte20DestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEmbeddedPlusScte20DestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelEmbeddedPlusScte20DestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EmbeddedSourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `EmbeddedSourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_EmbeddedSourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('convert608To708', cdk.validateString)(properties.convert608To708));
    errors.collect(cdk.propertyValidator('scte20Detection', cdk.validateString)(properties.scte20Detection));
    errors.collect(cdk.propertyValidator('source608ChannelNumber', cdk.validateNumber)(properties.source608ChannelNumber));
    errors.collect(cdk.propertyValidator('source608TrackNumber', cdk.validateNumber)(properties.source608TrackNumber));
    return errors.wrap('supplied properties not correct for "EmbeddedSourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedSourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `EmbeddedSourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedSourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEmbeddedSourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_EmbeddedSourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        Convert608To708: cdk.stringToCloudFormation(properties.convert608To708),
        Scte20Detection: cdk.stringToCloudFormation(properties.scte20Detection),
        Source608ChannelNumber: cdk.numberToCloudFormation(properties.source608ChannelNumber),
        Source608TrackNumber: cdk.numberToCloudFormation(properties.source608TrackNumber),
    };
}
// @ts-ignore TS6133
function CfnChannelEmbeddedSourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('convert608To708', 'Convert608To708', properties.Convert608To708 != null ? cfn_parse.FromCloudFormation.getString(properties.Convert608To708) : undefined);
    ret.addPropertyResult('scte20Detection', 'Scte20Detection', properties.Scte20Detection != null ? cfn_parse.FromCloudFormation.getString(properties.Scte20Detection) : undefined);
    ret.addPropertyResult('source608ChannelNumber', 'Source608ChannelNumber', properties.Source608ChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608ChannelNumber) : undefined);
    ret.addPropertyResult('source608TrackNumber', 'Source608TrackNumber', properties.Source608TrackNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608TrackNumber) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EncoderSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `EncoderSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_EncoderSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioDescriptions', cdk.listValidator(CfnChannel_AudioDescriptionPropertyValidator))(properties.audioDescriptions));
    errors.collect(cdk.propertyValidator('availBlanking', CfnChannel_AvailBlankingPropertyValidator)(properties.availBlanking));
    errors.collect(cdk.propertyValidator('availConfiguration', CfnChannel_AvailConfigurationPropertyValidator)(properties.availConfiguration));
    errors.collect(cdk.propertyValidator('blackoutSlate', CfnChannel_BlackoutSlatePropertyValidator)(properties.blackoutSlate));
    errors.collect(cdk.propertyValidator('captionDescriptions', cdk.listValidator(CfnChannel_CaptionDescriptionPropertyValidator))(properties.captionDescriptions));
    errors.collect(cdk.propertyValidator('featureActivations', CfnChannel_FeatureActivationsPropertyValidator)(properties.featureActivations));
    errors.collect(cdk.propertyValidator('globalConfiguration', CfnChannel_GlobalConfigurationPropertyValidator)(properties.globalConfiguration));
    errors.collect(cdk.propertyValidator('motionGraphicsConfiguration', CfnChannel_MotionGraphicsConfigurationPropertyValidator)(properties.motionGraphicsConfiguration));
    errors.collect(cdk.propertyValidator('nielsenConfiguration', CfnChannel_NielsenConfigurationPropertyValidator)(properties.nielsenConfiguration));
    errors.collect(cdk.propertyValidator('outputGroups', cdk.listValidator(CfnChannel_OutputGroupPropertyValidator))(properties.outputGroups));
    errors.collect(cdk.propertyValidator('timecodeConfig', CfnChannel_TimecodeConfigPropertyValidator)(properties.timecodeConfig));
    errors.collect(cdk.propertyValidator('videoDescriptions', cdk.listValidator(CfnChannel_VideoDescriptionPropertyValidator))(properties.videoDescriptions));
    return errors.wrap('supplied properties not correct for "EncoderSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EncoderSettings` resource
 *
 * @param properties - the TypeScript properties of a `EncoderSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EncoderSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelEncoderSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_EncoderSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioDescriptions: cdk.listMapper(cfnChannelAudioDescriptionPropertyToCloudFormation)(properties.audioDescriptions),
        AvailBlanking: cfnChannelAvailBlankingPropertyToCloudFormation(properties.availBlanking),
        AvailConfiguration: cfnChannelAvailConfigurationPropertyToCloudFormation(properties.availConfiguration),
        BlackoutSlate: cfnChannelBlackoutSlatePropertyToCloudFormation(properties.blackoutSlate),
        CaptionDescriptions: cdk.listMapper(cfnChannelCaptionDescriptionPropertyToCloudFormation)(properties.captionDescriptions),
        FeatureActivations: cfnChannelFeatureActivationsPropertyToCloudFormation(properties.featureActivations),
        GlobalConfiguration: cfnChannelGlobalConfigurationPropertyToCloudFormation(properties.globalConfiguration),
        MotionGraphicsConfiguration: cfnChannelMotionGraphicsConfigurationPropertyToCloudFormation(properties.motionGraphicsConfiguration),
        NielsenConfiguration: cfnChannelNielsenConfigurationPropertyToCloudFormation(properties.nielsenConfiguration),
        OutputGroups: cdk.listMapper(cfnChannelOutputGroupPropertyToCloudFormation)(properties.outputGroups),
        TimecodeConfig: cfnChannelTimecodeConfigPropertyToCloudFormation(properties.timecodeConfig),
        VideoDescriptions: cdk.listMapper(cfnChannelVideoDescriptionPropertyToCloudFormation)(properties.videoDescriptions),
    };
}
// @ts-ignore TS6133
function CfnChannelEncoderSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioDescriptions', 'AudioDescriptions', properties.AudioDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioDescriptionPropertyFromCloudFormation)(properties.AudioDescriptions) : undefined);
    ret.addPropertyResult('availBlanking', 'AvailBlanking', properties.AvailBlanking != null ? CfnChannelAvailBlankingPropertyFromCloudFormation(properties.AvailBlanking) : undefined);
    ret.addPropertyResult('availConfiguration', 'AvailConfiguration', properties.AvailConfiguration != null ? CfnChannelAvailConfigurationPropertyFromCloudFormation(properties.AvailConfiguration) : undefined);
    ret.addPropertyResult('blackoutSlate', 'BlackoutSlate', properties.BlackoutSlate != null ? CfnChannelBlackoutSlatePropertyFromCloudFormation(properties.BlackoutSlate) : undefined);
    ret.addPropertyResult('captionDescriptions', 'CaptionDescriptions', properties.CaptionDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionDescriptionPropertyFromCloudFormation)(properties.CaptionDescriptions) : undefined);
    ret.addPropertyResult('featureActivations', 'FeatureActivations', properties.FeatureActivations != null ? CfnChannelFeatureActivationsPropertyFromCloudFormation(properties.FeatureActivations) : undefined);
    ret.addPropertyResult('globalConfiguration', 'GlobalConfiguration', properties.GlobalConfiguration != null ? CfnChannelGlobalConfigurationPropertyFromCloudFormation(properties.GlobalConfiguration) : undefined);
    ret.addPropertyResult('motionGraphicsConfiguration', 'MotionGraphicsConfiguration', properties.MotionGraphicsConfiguration != null ? CfnChannelMotionGraphicsConfigurationPropertyFromCloudFormation(properties.MotionGraphicsConfiguration) : undefined);
    ret.addPropertyResult('nielsenConfiguration', 'NielsenConfiguration', properties.NielsenConfiguration != null ? CfnChannelNielsenConfigurationPropertyFromCloudFormation(properties.NielsenConfiguration) : undefined);
    ret.addPropertyResult('outputGroups', 'OutputGroups', properties.OutputGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputGroupPropertyFromCloudFormation)(properties.OutputGroups) : undefined);
    ret.addPropertyResult('timecodeConfig', 'TimecodeConfig', properties.TimecodeConfig != null ? CfnChannelTimecodeConfigPropertyFromCloudFormation(properties.TimecodeConfig) : undefined);
    ret.addPropertyResult('videoDescriptions', 'VideoDescriptions', properties.VideoDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelVideoDescriptionPropertyFromCloudFormation)(properties.VideoDescriptions) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FailoverConditionProperty`
 *
 * @param properties - the TypeScript properties of a `FailoverConditionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FailoverConditionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('failoverConditionSettings', CfnChannel_FailoverConditionSettingsPropertyValidator)(properties.failoverConditionSettings));
    return errors.wrap('supplied properties not correct for "FailoverConditionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverCondition` resource
 *
 * @param properties - the TypeScript properties of a `FailoverConditionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverCondition` resource.
 */
// @ts-ignore TS6133
function cfnChannelFailoverConditionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FailoverConditionPropertyValidator(properties).assertSuccess();
    return {
        FailoverConditionSettings: cfnChannelFailoverConditionSettingsPropertyToCloudFormation(properties.failoverConditionSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelFailoverConditionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('failoverConditionSettings', 'FailoverConditionSettings', properties.FailoverConditionSettings != null ? CfnChannelFailoverConditionSettingsPropertyFromCloudFormation(properties.FailoverConditionSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FailoverConditionSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FailoverConditionSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FailoverConditionSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioSilenceSettings', CfnChannel_AudioSilenceFailoverSettingsPropertyValidator)(properties.audioSilenceSettings));
    errors.collect(cdk.propertyValidator('inputLossSettings', CfnChannel_InputLossFailoverSettingsPropertyValidator)(properties.inputLossSettings));
    errors.collect(cdk.propertyValidator('videoBlackSettings', CfnChannel_VideoBlackFailoverSettingsPropertyValidator)(properties.videoBlackSettings));
    return errors.wrap('supplied properties not correct for "FailoverConditionSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverConditionSettings` resource
 *
 * @param properties - the TypeScript properties of a `FailoverConditionSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverConditionSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFailoverConditionSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FailoverConditionSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioSilenceSettings: cfnChannelAudioSilenceFailoverSettingsPropertyToCloudFormation(properties.audioSilenceSettings),
        InputLossSettings: cfnChannelInputLossFailoverSettingsPropertyToCloudFormation(properties.inputLossSettings),
        VideoBlackSettings: cfnChannelVideoBlackFailoverSettingsPropertyToCloudFormation(properties.videoBlackSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelFailoverConditionSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioSilenceSettings', 'AudioSilenceSettings', properties.AudioSilenceSettings != null ? CfnChannelAudioSilenceFailoverSettingsPropertyFromCloudFormation(properties.AudioSilenceSettings) : undefined);
    ret.addPropertyResult('inputLossSettings', 'InputLossSettings', properties.InputLossSettings != null ? CfnChannelInputLossFailoverSettingsPropertyFromCloudFormation(properties.InputLossSettings) : undefined);
    ret.addPropertyResult('videoBlackSettings', 'VideoBlackSettings', properties.VideoBlackSettings != null ? CfnChannelVideoBlackFailoverSettingsPropertyFromCloudFormation(properties.VideoBlackSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FeatureActivationsProperty`
 *
 * @param properties - the TypeScript properties of a `FeatureActivationsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FeatureActivationsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('inputPrepareScheduleActions', cdk.validateString)(properties.inputPrepareScheduleActions));
    return errors.wrap('supplied properties not correct for "FeatureActivationsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FeatureActivations` resource
 *
 * @param properties - the TypeScript properties of a `FeatureActivationsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FeatureActivations` resource.
 */
// @ts-ignore TS6133
function cfnChannelFeatureActivationsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FeatureActivationsPropertyValidator(properties).assertSuccess();
    return {
        InputPrepareScheduleActions: cdk.stringToCloudFormation(properties.inputPrepareScheduleActions),
    };
}
// @ts-ignore TS6133
function CfnChannelFeatureActivationsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('inputPrepareScheduleActions', 'InputPrepareScheduleActions', properties.InputPrepareScheduleActions != null ? cfn_parse.FromCloudFormation.getString(properties.InputPrepareScheduleActions) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FecOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FecOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FecOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('columnDepth', cdk.validateNumber)(properties.columnDepth));
    errors.collect(cdk.propertyValidator('includeFec', cdk.validateString)(properties.includeFec));
    errors.collect(cdk.propertyValidator('rowLength', cdk.validateNumber)(properties.rowLength));
    return errors.wrap('supplied properties not correct for "FecOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FecOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `FecOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FecOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFecOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FecOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        ColumnDepth: cdk.numberToCloudFormation(properties.columnDepth),
        IncludeFec: cdk.stringToCloudFormation(properties.includeFec),
        RowLength: cdk.numberToCloudFormation(properties.rowLength),
    };
}
// @ts-ignore TS6133
function CfnChannelFecOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('columnDepth', 'ColumnDepth', properties.ColumnDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.ColumnDepth) : undefined);
    ret.addPropertyResult('includeFec', 'IncludeFec', properties.IncludeFec != null ? cfn_parse.FromCloudFormation.getString(properties.IncludeFec) : undefined);
    ret.addPropertyResult('rowLength', 'RowLength', properties.RowLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.RowLength) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Fmp4HlsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Fmp4HlsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Fmp4HlsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioRenditionSets', cdk.validateString)(properties.audioRenditionSets));
    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));
    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));
    return errors.wrap('supplied properties not correct for "Fmp4HlsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Fmp4HlsSettings` resource
 *
 * @param properties - the TypeScript properties of a `Fmp4HlsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Fmp4HlsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFmp4HlsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Fmp4HlsSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioRenditionSets: cdk.stringToCloudFormation(properties.audioRenditionSets),
        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),
        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),
    };
}
// @ts-ignore TS6133
function CfnChannelFmp4HlsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioRenditionSets', 'AudioRenditionSets', properties.AudioRenditionSets != null ? cfn_parse.FromCloudFormation.getString(properties.AudioRenditionSets) : undefined);
    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);
    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureCdnSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureCdnSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureCdnSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('frameCaptureS3Settings', CfnChannel_FrameCaptureS3SettingsPropertyValidator)(properties.frameCaptureS3Settings));
    return errors.wrap('supplied properties not correct for "FrameCaptureCdnSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureCdnSettings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureCdnSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureCdnSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureCdnSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureCdnSettingsPropertyValidator(properties).assertSuccess();
    return {
        FrameCaptureS3Settings: cfnChannelFrameCaptureS3SettingsPropertyToCloudFormation(properties.frameCaptureS3Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureCdnSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('frameCaptureS3Settings', 'FrameCaptureS3Settings', properties.FrameCaptureS3Settings != null ? CfnChannelFrameCaptureS3SettingsPropertyFromCloudFormation(properties.FrameCaptureS3Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('frameCaptureCdnSettings', CfnChannel_FrameCaptureCdnSettingsPropertyValidator)(properties.frameCaptureCdnSettings));
    return errors.wrap('supplied properties not correct for "FrameCaptureGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        FrameCaptureCdnSettings: cfnChannelFrameCaptureCdnSettingsPropertyToCloudFormation(properties.frameCaptureCdnSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('frameCaptureCdnSettings', 'FrameCaptureCdnSettings', properties.FrameCaptureCdnSettings != null ? CfnChannelFrameCaptureCdnSettingsPropertyFromCloudFormation(properties.FrameCaptureCdnSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureHlsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureHlsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureHlsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "FrameCaptureHlsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureHlsSettings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureHlsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureHlsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureHlsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureHlsSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureHlsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));
    return errors.wrap('supplied properties not correct for "FrameCaptureOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),
    };
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureS3SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureS3SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureS3SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));
    return errors.wrap('supplied properties not correct for "FrameCaptureS3SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureS3Settings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureS3SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureS3Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureS3SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureS3SettingsPropertyValidator(properties).assertSuccess();
    return {
        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),
    };
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureS3SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `FrameCaptureSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `FrameCaptureSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_FrameCaptureSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('captureInterval', cdk.validateNumber)(properties.captureInterval));
    errors.collect(cdk.propertyValidator('captureIntervalUnits', cdk.validateString)(properties.captureIntervalUnits));
    return errors.wrap('supplied properties not correct for "FrameCaptureSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureSettings` resource
 *
 * @param properties - the TypeScript properties of a `FrameCaptureSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelFrameCaptureSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_FrameCaptureSettingsPropertyValidator(properties).assertSuccess();
    return {
        CaptureInterval: cdk.numberToCloudFormation(properties.captureInterval),
        CaptureIntervalUnits: cdk.stringToCloudFormation(properties.captureIntervalUnits),
    };
}
// @ts-ignore TS6133
function CfnChannelFrameCaptureSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('captureInterval', 'CaptureInterval', properties.CaptureInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.CaptureInterval) : undefined);
    ret.addPropertyResult('captureIntervalUnits', 'CaptureIntervalUnits', properties.CaptureIntervalUnits != null ? cfn_parse.FromCloudFormation.getString(properties.CaptureIntervalUnits) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `GlobalConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `GlobalConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_GlobalConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('initialAudioGain', cdk.validateNumber)(properties.initialAudioGain));
    errors.collect(cdk.propertyValidator('inputEndAction', cdk.validateString)(properties.inputEndAction));
    errors.collect(cdk.propertyValidator('inputLossBehavior', CfnChannel_InputLossBehaviorPropertyValidator)(properties.inputLossBehavior));
    errors.collect(cdk.propertyValidator('outputLockingMode', cdk.validateString)(properties.outputLockingMode));
    errors.collect(cdk.propertyValidator('outputTimingSource', cdk.validateString)(properties.outputTimingSource));
    errors.collect(cdk.propertyValidator('supportLowFramerateInputs', cdk.validateString)(properties.supportLowFramerateInputs));
    return errors.wrap('supplied properties not correct for "GlobalConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.GlobalConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `GlobalConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.GlobalConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnChannelGlobalConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_GlobalConfigurationPropertyValidator(properties).assertSuccess();
    return {
        InitialAudioGain: cdk.numberToCloudFormation(properties.initialAudioGain),
        InputEndAction: cdk.stringToCloudFormation(properties.inputEndAction),
        InputLossBehavior: cfnChannelInputLossBehaviorPropertyToCloudFormation(properties.inputLossBehavior),
        OutputLockingMode: cdk.stringToCloudFormation(properties.outputLockingMode),
        OutputTimingSource: cdk.stringToCloudFormation(properties.outputTimingSource),
        SupportLowFramerateInputs: cdk.stringToCloudFormation(properties.supportLowFramerateInputs),
    };
}
// @ts-ignore TS6133
function CfnChannelGlobalConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('initialAudioGain', 'InitialAudioGain', properties.InitialAudioGain != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialAudioGain) : undefined);
    ret.addPropertyResult('inputEndAction', 'InputEndAction', properties.InputEndAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputEndAction) : undefined);
    ret.addPropertyResult('inputLossBehavior', 'InputLossBehavior', properties.InputLossBehavior != null ? CfnChannelInputLossBehaviorPropertyFromCloudFormation(properties.InputLossBehavior) : undefined);
    ret.addPropertyResult('outputLockingMode', 'OutputLockingMode', properties.OutputLockingMode != null ? cfn_parse.FromCloudFormation.getString(properties.OutputLockingMode) : undefined);
    ret.addPropertyResult('outputTimingSource', 'OutputTimingSource', properties.OutputTimingSource != null ? cfn_parse.FromCloudFormation.getString(properties.OutputTimingSource) : undefined);
    ret.addPropertyResult('supportLowFramerateInputs', 'SupportLowFramerateInputs', properties.SupportLowFramerateInputs != null ? cfn_parse.FromCloudFormation.getString(properties.SupportLowFramerateInputs) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H264ColorSpaceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H264ColorSpaceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H264ColorSpaceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('colorSpacePassthroughSettings', CfnChannel_ColorSpacePassthroughSettingsPropertyValidator)(properties.colorSpacePassthroughSettings));
    errors.collect(cdk.propertyValidator('rec601Settings', CfnChannel_Rec601SettingsPropertyValidator)(properties.rec601Settings));
    errors.collect(cdk.propertyValidator('rec709Settings', CfnChannel_Rec709SettingsPropertyValidator)(properties.rec709Settings));
    return errors.wrap('supplied properties not correct for "H264ColorSpaceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264ColorSpaceSettings` resource
 *
 * @param properties - the TypeScript properties of a `H264ColorSpaceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264ColorSpaceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH264ColorSpaceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H264ColorSpaceSettingsPropertyValidator(properties).assertSuccess();
    return {
        ColorSpacePassthroughSettings: cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties.colorSpacePassthroughSettings),
        Rec601Settings: cfnChannelRec601SettingsPropertyToCloudFormation(properties.rec601Settings),
        Rec709Settings: cfnChannelRec709SettingsPropertyToCloudFormation(properties.rec709Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelH264ColorSpaceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('colorSpacePassthroughSettings', 'ColorSpacePassthroughSettings', properties.ColorSpacePassthroughSettings != null ? CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties.ColorSpacePassthroughSettings) : undefined);
    ret.addPropertyResult('rec601Settings', 'Rec601Settings', properties.Rec601Settings != null ? CfnChannelRec601SettingsPropertyFromCloudFormation(properties.Rec601Settings) : undefined);
    ret.addPropertyResult('rec709Settings', 'Rec709Settings', properties.Rec709Settings != null ? CfnChannelRec709SettingsPropertyFromCloudFormation(properties.Rec709Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H264FilterSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H264FilterSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H264FilterSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));
    return errors.wrap('supplied properties not correct for "H264FilterSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264FilterSettings` resource
 *
 * @param properties - the TypeScript properties of a `H264FilterSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264FilterSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH264FilterSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H264FilterSettingsPropertyValidator(properties).assertSuccess();
    return {
        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelH264FilterSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H264SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H264SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H264SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));
    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('bufFillPct', cdk.validateNumber)(properties.bufFillPct));
    errors.collect(cdk.propertyValidator('bufSize', cdk.validateNumber)(properties.bufSize));
    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));
    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_H264ColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));
    errors.collect(cdk.propertyValidator('entropyEncoding', cdk.validateString)(properties.entropyEncoding));
    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_H264FilterSettingsPropertyValidator)(properties.filterSettings));
    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));
    errors.collect(cdk.propertyValidator('flickerAq', cdk.validateString)(properties.flickerAq));
    errors.collect(cdk.propertyValidator('forceFieldPictures', cdk.validateString)(properties.forceFieldPictures));
    errors.collect(cdk.propertyValidator('framerateControl', cdk.validateString)(properties.framerateControl));
    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));
    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));
    errors.collect(cdk.propertyValidator('gopBReference', cdk.validateString)(properties.gopBReference));
    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));
    errors.collect(cdk.propertyValidator('gopNumBFrames', cdk.validateNumber)(properties.gopNumBFrames));
    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));
    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));
    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));
    errors.collect(cdk.propertyValidator('lookAheadRateControl', cdk.validateString)(properties.lookAheadRateControl));
    errors.collect(cdk.propertyValidator('maxBitrate', cdk.validateNumber)(properties.maxBitrate));
    errors.collect(cdk.propertyValidator('minIInterval', cdk.validateNumber)(properties.minIInterval));
    errors.collect(cdk.propertyValidator('numRefFrames', cdk.validateNumber)(properties.numRefFrames));
    errors.collect(cdk.propertyValidator('parControl', cdk.validateString)(properties.parControl));
    errors.collect(cdk.propertyValidator('parDenominator', cdk.validateNumber)(properties.parDenominator));
    errors.collect(cdk.propertyValidator('parNumerator', cdk.validateNumber)(properties.parNumerator));
    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));
    errors.collect(cdk.propertyValidator('qualityLevel', cdk.validateString)(properties.qualityLevel));
    errors.collect(cdk.propertyValidator('qvbrQualityLevel', cdk.validateNumber)(properties.qvbrQualityLevel));
    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));
    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));
    errors.collect(cdk.propertyValidator('sceneChangeDetect', cdk.validateString)(properties.sceneChangeDetect));
    errors.collect(cdk.propertyValidator('slices', cdk.validateNumber)(properties.slices));
    errors.collect(cdk.propertyValidator('softness', cdk.validateNumber)(properties.softness));
    errors.collect(cdk.propertyValidator('spatialAq', cdk.validateString)(properties.spatialAq));
    errors.collect(cdk.propertyValidator('subgopLength', cdk.validateString)(properties.subgopLength));
    errors.collect(cdk.propertyValidator('syntax', cdk.validateString)(properties.syntax));
    errors.collect(cdk.propertyValidator('temporalAq', cdk.validateString)(properties.temporalAq));
    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));
    return errors.wrap('supplied properties not correct for "H264SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264Settings` resource
 *
 * @param properties - the TypeScript properties of a `H264SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH264SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H264SettingsPropertyValidator(properties).assertSuccess();
    return {
        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),
        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        BufFillPct: cdk.numberToCloudFormation(properties.bufFillPct),
        BufSize: cdk.numberToCloudFormation(properties.bufSize),
        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),
        ColorSpaceSettings: cfnChannelH264ColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),
        EntropyEncoding: cdk.stringToCloudFormation(properties.entropyEncoding),
        FilterSettings: cfnChannelH264FilterSettingsPropertyToCloudFormation(properties.filterSettings),
        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),
        FlickerAq: cdk.stringToCloudFormation(properties.flickerAq),
        ForceFieldPictures: cdk.stringToCloudFormation(properties.forceFieldPictures),
        FramerateControl: cdk.stringToCloudFormation(properties.framerateControl),
        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),
        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),
        GopBReference: cdk.stringToCloudFormation(properties.gopBReference),
        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),
        GopNumBFrames: cdk.numberToCloudFormation(properties.gopNumBFrames),
        GopSize: cdk.numberToCloudFormation(properties.gopSize),
        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),
        Level: cdk.stringToCloudFormation(properties.level),
        LookAheadRateControl: cdk.stringToCloudFormation(properties.lookAheadRateControl),
        MaxBitrate: cdk.numberToCloudFormation(properties.maxBitrate),
        MinIInterval: cdk.numberToCloudFormation(properties.minIInterval),
        NumRefFrames: cdk.numberToCloudFormation(properties.numRefFrames),
        ParControl: cdk.stringToCloudFormation(properties.parControl),
        ParDenominator: cdk.numberToCloudFormation(properties.parDenominator),
        ParNumerator: cdk.numberToCloudFormation(properties.parNumerator),
        Profile: cdk.stringToCloudFormation(properties.profile),
        QualityLevel: cdk.stringToCloudFormation(properties.qualityLevel),
        QvbrQualityLevel: cdk.numberToCloudFormation(properties.qvbrQualityLevel),
        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),
        ScanType: cdk.stringToCloudFormation(properties.scanType),
        SceneChangeDetect: cdk.stringToCloudFormation(properties.sceneChangeDetect),
        Slices: cdk.numberToCloudFormation(properties.slices),
        Softness: cdk.numberToCloudFormation(properties.softness),
        SpatialAq: cdk.stringToCloudFormation(properties.spatialAq),
        SubgopLength: cdk.stringToCloudFormation(properties.subgopLength),
        Syntax: cdk.stringToCloudFormation(properties.syntax),
        TemporalAq: cdk.stringToCloudFormation(properties.temporalAq),
        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),
    };
}
// @ts-ignore TS6133
function CfnChannelH264SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);
    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('bufFillPct', 'BufFillPct', properties.BufFillPct != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufFillPct) : undefined);
    ret.addPropertyResult('bufSize', 'BufSize', properties.BufSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufSize) : undefined);
    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);
    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelH264ColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);
    ret.addPropertyResult('entropyEncoding', 'EntropyEncoding', properties.EntropyEncoding != null ? cfn_parse.FromCloudFormation.getString(properties.EntropyEncoding) : undefined);
    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelH264FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);
    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);
    ret.addPropertyResult('flickerAq', 'FlickerAq', properties.FlickerAq != null ? cfn_parse.FromCloudFormation.getString(properties.FlickerAq) : undefined);
    ret.addPropertyResult('forceFieldPictures', 'ForceFieldPictures', properties.ForceFieldPictures != null ? cfn_parse.FromCloudFormation.getString(properties.ForceFieldPictures) : undefined);
    ret.addPropertyResult('framerateControl', 'FramerateControl', properties.FramerateControl != null ? cfn_parse.FromCloudFormation.getString(properties.FramerateControl) : undefined);
    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);
    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);
    ret.addPropertyResult('gopBReference', 'GopBReference', properties.GopBReference != null ? cfn_parse.FromCloudFormation.getString(properties.GopBReference) : undefined);
    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);
    ret.addPropertyResult('gopNumBFrames', 'GopNumBFrames', properties.GopNumBFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopNumBFrames) : undefined);
    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);
    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);
    ret.addPropertyResult('level', 'Level', properties.Level != null ? cfn_parse.FromCloudFormation.getString(properties.Level) : undefined);
    ret.addPropertyResult('lookAheadRateControl', 'LookAheadRateControl', properties.LookAheadRateControl != null ? cfn_parse.FromCloudFormation.getString(properties.LookAheadRateControl) : undefined);
    ret.addPropertyResult('maxBitrate', 'MaxBitrate', properties.MaxBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxBitrate) : undefined);
    ret.addPropertyResult('minIInterval', 'MinIInterval', properties.MinIInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinIInterval) : undefined);
    ret.addPropertyResult('numRefFrames', 'NumRefFrames', properties.NumRefFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRefFrames) : undefined);
    ret.addPropertyResult('parControl', 'ParControl', properties.ParControl != null ? cfn_parse.FromCloudFormation.getString(properties.ParControl) : undefined);
    ret.addPropertyResult('parDenominator', 'ParDenominator', properties.ParDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParDenominator) : undefined);
    ret.addPropertyResult('parNumerator', 'ParNumerator', properties.ParNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParNumerator) : undefined);
    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);
    ret.addPropertyResult('qualityLevel', 'QualityLevel', properties.QualityLevel != null ? cfn_parse.FromCloudFormation.getString(properties.QualityLevel) : undefined);
    ret.addPropertyResult('qvbrQualityLevel', 'QvbrQualityLevel', properties.QvbrQualityLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.QvbrQualityLevel) : undefined);
    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);
    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);
    ret.addPropertyResult('sceneChangeDetect', 'SceneChangeDetect', properties.SceneChangeDetect != null ? cfn_parse.FromCloudFormation.getString(properties.SceneChangeDetect) : undefined);
    ret.addPropertyResult('slices', 'Slices', properties.Slices != null ? cfn_parse.FromCloudFormation.getNumber(properties.Slices) : undefined);
    ret.addPropertyResult('softness', 'Softness', properties.Softness != null ? cfn_parse.FromCloudFormation.getNumber(properties.Softness) : undefined);
    ret.addPropertyResult('spatialAq', 'SpatialAq', properties.SpatialAq != null ? cfn_parse.FromCloudFormation.getString(properties.SpatialAq) : undefined);
    ret.addPropertyResult('subgopLength', 'SubgopLength', properties.SubgopLength != null ? cfn_parse.FromCloudFormation.getString(properties.SubgopLength) : undefined);
    ret.addPropertyResult('syntax', 'Syntax', properties.Syntax != null ? cfn_parse.FromCloudFormation.getString(properties.Syntax) : undefined);
    ret.addPropertyResult('temporalAq', 'TemporalAq', properties.TemporalAq != null ? cfn_parse.FromCloudFormation.getString(properties.TemporalAq) : undefined);
    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H265ColorSpaceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H265ColorSpaceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H265ColorSpaceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('colorSpacePassthroughSettings', CfnChannel_ColorSpacePassthroughSettingsPropertyValidator)(properties.colorSpacePassthroughSettings));
    errors.collect(cdk.propertyValidator('hdr10Settings', CfnChannel_Hdr10SettingsPropertyValidator)(properties.hdr10Settings));
    errors.collect(cdk.propertyValidator('rec601Settings', CfnChannel_Rec601SettingsPropertyValidator)(properties.rec601Settings));
    errors.collect(cdk.propertyValidator('rec709Settings', CfnChannel_Rec709SettingsPropertyValidator)(properties.rec709Settings));
    return errors.wrap('supplied properties not correct for "H265ColorSpaceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265ColorSpaceSettings` resource
 *
 * @param properties - the TypeScript properties of a `H265ColorSpaceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265ColorSpaceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH265ColorSpaceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H265ColorSpaceSettingsPropertyValidator(properties).assertSuccess();
    return {
        ColorSpacePassthroughSettings: cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties.colorSpacePassthroughSettings),
        Hdr10Settings: cfnChannelHdr10SettingsPropertyToCloudFormation(properties.hdr10Settings),
        Rec601Settings: cfnChannelRec601SettingsPropertyToCloudFormation(properties.rec601Settings),
        Rec709Settings: cfnChannelRec709SettingsPropertyToCloudFormation(properties.rec709Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelH265ColorSpaceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('colorSpacePassthroughSettings', 'ColorSpacePassthroughSettings', properties.ColorSpacePassthroughSettings != null ? CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties.ColorSpacePassthroughSettings) : undefined);
    ret.addPropertyResult('hdr10Settings', 'Hdr10Settings', properties.Hdr10Settings != null ? CfnChannelHdr10SettingsPropertyFromCloudFormation(properties.Hdr10Settings) : undefined);
    ret.addPropertyResult('rec601Settings', 'Rec601Settings', properties.Rec601Settings != null ? CfnChannelRec601SettingsPropertyFromCloudFormation(properties.Rec601Settings) : undefined);
    ret.addPropertyResult('rec709Settings', 'Rec709Settings', properties.Rec709Settings != null ? CfnChannelRec709SettingsPropertyFromCloudFormation(properties.Rec709Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H265FilterSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H265FilterSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H265FilterSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));
    return errors.wrap('supplied properties not correct for "H265FilterSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265FilterSettings` resource
 *
 * @param properties - the TypeScript properties of a `H265FilterSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265FilterSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH265FilterSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H265FilterSettingsPropertyValidator(properties).assertSuccess();
    return {
        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelH265FilterSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `H265SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `H265SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_H265SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));
    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));
    errors.collect(cdk.propertyValidator('alternativeTransferFunction', cdk.validateString)(properties.alternativeTransferFunction));
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('bufSize', cdk.validateNumber)(properties.bufSize));
    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));
    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_H265ColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));
    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_H265FilterSettingsPropertyValidator)(properties.filterSettings));
    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));
    errors.collect(cdk.propertyValidator('flickerAq', cdk.validateString)(properties.flickerAq));
    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));
    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));
    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));
    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));
    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));
    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));
    errors.collect(cdk.propertyValidator('lookAheadRateControl', cdk.validateString)(properties.lookAheadRateControl));
    errors.collect(cdk.propertyValidator('maxBitrate', cdk.validateNumber)(properties.maxBitrate));
    errors.collect(cdk.propertyValidator('minIInterval', cdk.validateNumber)(properties.minIInterval));
    errors.collect(cdk.propertyValidator('parDenominator', cdk.validateNumber)(properties.parDenominator));
    errors.collect(cdk.propertyValidator('parNumerator', cdk.validateNumber)(properties.parNumerator));
    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));
    errors.collect(cdk.propertyValidator('qvbrQualityLevel', cdk.validateNumber)(properties.qvbrQualityLevel));
    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));
    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));
    errors.collect(cdk.propertyValidator('sceneChangeDetect', cdk.validateString)(properties.sceneChangeDetect));
    errors.collect(cdk.propertyValidator('slices', cdk.validateNumber)(properties.slices));
    errors.collect(cdk.propertyValidator('tier', cdk.validateString)(properties.tier));
    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));
    return errors.wrap('supplied properties not correct for "H265SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265Settings` resource
 *
 * @param properties - the TypeScript properties of a `H265SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelH265SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_H265SettingsPropertyValidator(properties).assertSuccess();
    return {
        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),
        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),
        AlternativeTransferFunction: cdk.stringToCloudFormation(properties.alternativeTransferFunction),
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        BufSize: cdk.numberToCloudFormation(properties.bufSize),
        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),
        ColorSpaceSettings: cfnChannelH265ColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),
        FilterSettings: cfnChannelH265FilterSettingsPropertyToCloudFormation(properties.filterSettings),
        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),
        FlickerAq: cdk.stringToCloudFormation(properties.flickerAq),
        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),
        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),
        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),
        GopSize: cdk.numberToCloudFormation(properties.gopSize),
        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),
        Level: cdk.stringToCloudFormation(properties.level),
        LookAheadRateControl: cdk.stringToCloudFormation(properties.lookAheadRateControl),
        MaxBitrate: cdk.numberToCloudFormation(properties.maxBitrate),
        MinIInterval: cdk.numberToCloudFormation(properties.minIInterval),
        ParDenominator: cdk.numberToCloudFormation(properties.parDenominator),
        ParNumerator: cdk.numberToCloudFormation(properties.parNumerator),
        Profile: cdk.stringToCloudFormation(properties.profile),
        QvbrQualityLevel: cdk.numberToCloudFormation(properties.qvbrQualityLevel),
        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),
        ScanType: cdk.stringToCloudFormation(properties.scanType),
        SceneChangeDetect: cdk.stringToCloudFormation(properties.sceneChangeDetect),
        Slices: cdk.numberToCloudFormation(properties.slices),
        Tier: cdk.stringToCloudFormation(properties.tier),
        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),
    };
}
// @ts-ignore TS6133
function CfnChannelH265SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);
    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);
    ret.addPropertyResult('alternativeTransferFunction', 'AlternativeTransferFunction', properties.AlternativeTransferFunction != null ? cfn_parse.FromCloudFormation.getString(properties.AlternativeTransferFunction) : undefined);
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('bufSize', 'BufSize', properties.BufSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufSize) : undefined);
    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);
    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelH265ColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);
    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelH265FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);
    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);
    ret.addPropertyResult('flickerAq', 'FlickerAq', properties.FlickerAq != null ? cfn_parse.FromCloudFormation.getString(properties.FlickerAq) : undefined);
    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);
    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);
    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);
    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);
    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);
    ret.addPropertyResult('level', 'Level', properties.Level != null ? cfn_parse.FromCloudFormation.getString(properties.Level) : undefined);
    ret.addPropertyResult('lookAheadRateControl', 'LookAheadRateControl', properties.LookAheadRateControl != null ? cfn_parse.FromCloudFormation.getString(properties.LookAheadRateControl) : undefined);
    ret.addPropertyResult('maxBitrate', 'MaxBitrate', properties.MaxBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxBitrate) : undefined);
    ret.addPropertyResult('minIInterval', 'MinIInterval', properties.MinIInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinIInterval) : undefined);
    ret.addPropertyResult('parDenominator', 'ParDenominator', properties.ParDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParDenominator) : undefined);
    ret.addPropertyResult('parNumerator', 'ParNumerator', properties.ParNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParNumerator) : undefined);
    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);
    ret.addPropertyResult('qvbrQualityLevel', 'QvbrQualityLevel', properties.QvbrQualityLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.QvbrQualityLevel) : undefined);
    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);
    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);
    ret.addPropertyResult('sceneChangeDetect', 'SceneChangeDetect', properties.SceneChangeDetect != null ? cfn_parse.FromCloudFormation.getString(properties.SceneChangeDetect) : undefined);
    ret.addPropertyResult('slices', 'Slices', properties.Slices != null ? cfn_parse.FromCloudFormation.getNumber(properties.Slices) : undefined);
    ret.addPropertyResult('tier', 'Tier', properties.Tier != null ? cfn_parse.FromCloudFormation.getString(properties.Tier) : undefined);
    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Hdr10SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Hdr10SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Hdr10SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('maxCll', cdk.validateNumber)(properties.maxCll));
    errors.collect(cdk.propertyValidator('maxFall', cdk.validateNumber)(properties.maxFall));
    return errors.wrap('supplied properties not correct for "Hdr10SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Hdr10Settings` resource
 *
 * @param properties - the TypeScript properties of a `Hdr10SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Hdr10Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHdr10SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Hdr10SettingsPropertyValidator(properties).assertSuccess();
    return {
        MaxCll: cdk.numberToCloudFormation(properties.maxCll),
        MaxFall: cdk.numberToCloudFormation(properties.maxFall),
    };
}
// @ts-ignore TS6133
function CfnChannelHdr10SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('maxCll', 'MaxCll', properties.MaxCll != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCll) : undefined);
    ret.addPropertyResult('maxFall', 'MaxFall', properties.MaxFall != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxFall) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsAkamaiSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsAkamaiSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsAkamaiSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));
    errors.collect(cdk.propertyValidator('httpTransferMode', cdk.validateString)(properties.httpTransferMode));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    errors.collect(cdk.propertyValidator('salt', cdk.validateString)(properties.salt));
    errors.collect(cdk.propertyValidator('token', cdk.validateString)(properties.token));
    return errors.wrap('supplied properties not correct for "HlsAkamaiSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsAkamaiSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsAkamaiSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsAkamaiSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsAkamaiSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsAkamaiSettingsPropertyValidator(properties).assertSuccess();
    return {
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),
        HttpTransferMode: cdk.stringToCloudFormation(properties.httpTransferMode),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
        Salt: cdk.stringToCloudFormation(properties.salt),
        Token: cdk.stringToCloudFormation(properties.token),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsAkamaiSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);
    ret.addPropertyResult('httpTransferMode', 'HttpTransferMode', properties.HttpTransferMode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTransferMode) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addPropertyResult('salt', 'Salt', properties.Salt != null ? cfn_parse.FromCloudFormation.getString(properties.Salt) : undefined);
    ret.addPropertyResult('token', 'Token', properties.Token != null ? cfn_parse.FromCloudFormation.getString(properties.Token) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsBasicPutSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsBasicPutSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsBasicPutSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    return errors.wrap('supplied properties not correct for "HlsBasicPutSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsBasicPutSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsBasicPutSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsBasicPutSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsBasicPutSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsBasicPutSettingsPropertyValidator(properties).assertSuccess();
    return {
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsBasicPutSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsCdnSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsCdnSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsCdnSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('hlsAkamaiSettings', CfnChannel_HlsAkamaiSettingsPropertyValidator)(properties.hlsAkamaiSettings));
    errors.collect(cdk.propertyValidator('hlsBasicPutSettings', CfnChannel_HlsBasicPutSettingsPropertyValidator)(properties.hlsBasicPutSettings));
    errors.collect(cdk.propertyValidator('hlsMediaStoreSettings', CfnChannel_HlsMediaStoreSettingsPropertyValidator)(properties.hlsMediaStoreSettings));
    errors.collect(cdk.propertyValidator('hlsS3Settings', CfnChannel_HlsS3SettingsPropertyValidator)(properties.hlsS3Settings));
    errors.collect(cdk.propertyValidator('hlsWebdavSettings', CfnChannel_HlsWebdavSettingsPropertyValidator)(properties.hlsWebdavSettings));
    return errors.wrap('supplied properties not correct for "HlsCdnSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsCdnSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsCdnSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsCdnSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsCdnSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsCdnSettingsPropertyValidator(properties).assertSuccess();
    return {
        HlsAkamaiSettings: cfnChannelHlsAkamaiSettingsPropertyToCloudFormation(properties.hlsAkamaiSettings),
        HlsBasicPutSettings: cfnChannelHlsBasicPutSettingsPropertyToCloudFormation(properties.hlsBasicPutSettings),
        HlsMediaStoreSettings: cfnChannelHlsMediaStoreSettingsPropertyToCloudFormation(properties.hlsMediaStoreSettings),
        HlsS3Settings: cfnChannelHlsS3SettingsPropertyToCloudFormation(properties.hlsS3Settings),
        HlsWebdavSettings: cfnChannelHlsWebdavSettingsPropertyToCloudFormation(properties.hlsWebdavSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsCdnSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('hlsAkamaiSettings', 'HlsAkamaiSettings', properties.HlsAkamaiSettings != null ? CfnChannelHlsAkamaiSettingsPropertyFromCloudFormation(properties.HlsAkamaiSettings) : undefined);
    ret.addPropertyResult('hlsBasicPutSettings', 'HlsBasicPutSettings', properties.HlsBasicPutSettings != null ? CfnChannelHlsBasicPutSettingsPropertyFromCloudFormation(properties.HlsBasicPutSettings) : undefined);
    ret.addPropertyResult('hlsMediaStoreSettings', 'HlsMediaStoreSettings', properties.HlsMediaStoreSettings != null ? CfnChannelHlsMediaStoreSettingsPropertyFromCloudFormation(properties.HlsMediaStoreSettings) : undefined);
    ret.addPropertyResult('hlsS3Settings', 'HlsS3Settings', properties.HlsS3Settings != null ? CfnChannelHlsS3SettingsPropertyFromCloudFormation(properties.HlsS3Settings) : undefined);
    ret.addPropertyResult('hlsWebdavSettings', 'HlsWebdavSettings', properties.HlsWebdavSettings != null ? CfnChannelHlsWebdavSettingsPropertyFromCloudFormation(properties.HlsWebdavSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adMarkers', cdk.listValidator(cdk.validateString))(properties.adMarkers));
    errors.collect(cdk.propertyValidator('baseUrlContent', cdk.validateString)(properties.baseUrlContent));
    errors.collect(cdk.propertyValidator('baseUrlContent1', cdk.validateString)(properties.baseUrlContent1));
    errors.collect(cdk.propertyValidator('baseUrlManifest', cdk.validateString)(properties.baseUrlManifest));
    errors.collect(cdk.propertyValidator('baseUrlManifest1', cdk.validateString)(properties.baseUrlManifest1));
    errors.collect(cdk.propertyValidator('captionLanguageMappings', cdk.listValidator(CfnChannel_CaptionLanguageMappingPropertyValidator))(properties.captionLanguageMappings));
    errors.collect(cdk.propertyValidator('captionLanguageSetting', cdk.validateString)(properties.captionLanguageSetting));
    errors.collect(cdk.propertyValidator('clientCache', cdk.validateString)(properties.clientCache));
    errors.collect(cdk.propertyValidator('codecSpecification', cdk.validateString)(properties.codecSpecification));
    errors.collect(cdk.propertyValidator('constantIv', cdk.validateString)(properties.constantIv));
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('directoryStructure', cdk.validateString)(properties.directoryStructure));
    errors.collect(cdk.propertyValidator('discontinuityTags', cdk.validateString)(properties.discontinuityTags));
    errors.collect(cdk.propertyValidator('encryptionType', cdk.validateString)(properties.encryptionType));
    errors.collect(cdk.propertyValidator('hlsCdnSettings', CfnChannel_HlsCdnSettingsPropertyValidator)(properties.hlsCdnSettings));
    errors.collect(cdk.propertyValidator('hlsId3SegmentTagging', cdk.validateString)(properties.hlsId3SegmentTagging));
    errors.collect(cdk.propertyValidator('iFrameOnlyPlaylists', cdk.validateString)(properties.iFrameOnlyPlaylists));
    errors.collect(cdk.propertyValidator('incompleteSegmentBehavior', cdk.validateString)(properties.incompleteSegmentBehavior));
    errors.collect(cdk.propertyValidator('indexNSegments', cdk.validateNumber)(properties.indexNSegments));
    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));
    errors.collect(cdk.propertyValidator('ivInManifest', cdk.validateString)(properties.ivInManifest));
    errors.collect(cdk.propertyValidator('ivSource', cdk.validateString)(properties.ivSource));
    errors.collect(cdk.propertyValidator('keepSegments', cdk.validateNumber)(properties.keepSegments));
    errors.collect(cdk.propertyValidator('keyFormat', cdk.validateString)(properties.keyFormat));
    errors.collect(cdk.propertyValidator('keyFormatVersions', cdk.validateString)(properties.keyFormatVersions));
    errors.collect(cdk.propertyValidator('keyProviderSettings', CfnChannel_KeyProviderSettingsPropertyValidator)(properties.keyProviderSettings));
    errors.collect(cdk.propertyValidator('manifestCompression', cdk.validateString)(properties.manifestCompression));
    errors.collect(cdk.propertyValidator('manifestDurationFormat', cdk.validateString)(properties.manifestDurationFormat));
    errors.collect(cdk.propertyValidator('minSegmentLength', cdk.validateNumber)(properties.minSegmentLength));
    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));
    errors.collect(cdk.propertyValidator('outputSelection', cdk.validateString)(properties.outputSelection));
    errors.collect(cdk.propertyValidator('programDateTime', cdk.validateString)(properties.programDateTime));
    errors.collect(cdk.propertyValidator('programDateTimeClock', cdk.validateString)(properties.programDateTimeClock));
    errors.collect(cdk.propertyValidator('programDateTimePeriod', cdk.validateNumber)(properties.programDateTimePeriod));
    errors.collect(cdk.propertyValidator('redundantManifest', cdk.validateString)(properties.redundantManifest));
    errors.collect(cdk.propertyValidator('segmentLength', cdk.validateNumber)(properties.segmentLength));
    errors.collect(cdk.propertyValidator('segmentationMode', cdk.validateString)(properties.segmentationMode));
    errors.collect(cdk.propertyValidator('segmentsPerSubdirectory', cdk.validateNumber)(properties.segmentsPerSubdirectory));
    errors.collect(cdk.propertyValidator('streamInfResolution', cdk.validateString)(properties.streamInfResolution));
    errors.collect(cdk.propertyValidator('timedMetadataId3Frame', cdk.validateString)(properties.timedMetadataId3Frame));
    errors.collect(cdk.propertyValidator('timedMetadataId3Period', cdk.validateNumber)(properties.timedMetadataId3Period));
    errors.collect(cdk.propertyValidator('timestampDeltaMilliseconds', cdk.validateNumber)(properties.timestampDeltaMilliseconds));
    errors.collect(cdk.propertyValidator('tsFileMode', cdk.validateString)(properties.tsFileMode));
    return errors.wrap('supplied properties not correct for "HlsGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        AdMarkers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adMarkers),
        BaseUrlContent: cdk.stringToCloudFormation(properties.baseUrlContent),
        BaseUrlContent1: cdk.stringToCloudFormation(properties.baseUrlContent1),
        BaseUrlManifest: cdk.stringToCloudFormation(properties.baseUrlManifest),
        BaseUrlManifest1: cdk.stringToCloudFormation(properties.baseUrlManifest1),
        CaptionLanguageMappings: cdk.listMapper(cfnChannelCaptionLanguageMappingPropertyToCloudFormation)(properties.captionLanguageMappings),
        CaptionLanguageSetting: cdk.stringToCloudFormation(properties.captionLanguageSetting),
        ClientCache: cdk.stringToCloudFormation(properties.clientCache),
        CodecSpecification: cdk.stringToCloudFormation(properties.codecSpecification),
        ConstantIv: cdk.stringToCloudFormation(properties.constantIv),
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        DirectoryStructure: cdk.stringToCloudFormation(properties.directoryStructure),
        DiscontinuityTags: cdk.stringToCloudFormation(properties.discontinuityTags),
        EncryptionType: cdk.stringToCloudFormation(properties.encryptionType),
        HlsCdnSettings: cfnChannelHlsCdnSettingsPropertyToCloudFormation(properties.hlsCdnSettings),
        HlsId3SegmentTagging: cdk.stringToCloudFormation(properties.hlsId3SegmentTagging),
        IFrameOnlyPlaylists: cdk.stringToCloudFormation(properties.iFrameOnlyPlaylists),
        IncompleteSegmentBehavior: cdk.stringToCloudFormation(properties.incompleteSegmentBehavior),
        IndexNSegments: cdk.numberToCloudFormation(properties.indexNSegments),
        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),
        IvInManifest: cdk.stringToCloudFormation(properties.ivInManifest),
        IvSource: cdk.stringToCloudFormation(properties.ivSource),
        KeepSegments: cdk.numberToCloudFormation(properties.keepSegments),
        KeyFormat: cdk.stringToCloudFormation(properties.keyFormat),
        KeyFormatVersions: cdk.stringToCloudFormation(properties.keyFormatVersions),
        KeyProviderSettings: cfnChannelKeyProviderSettingsPropertyToCloudFormation(properties.keyProviderSettings),
        ManifestCompression: cdk.stringToCloudFormation(properties.manifestCompression),
        ManifestDurationFormat: cdk.stringToCloudFormation(properties.manifestDurationFormat),
        MinSegmentLength: cdk.numberToCloudFormation(properties.minSegmentLength),
        Mode: cdk.stringToCloudFormation(properties.mode),
        OutputSelection: cdk.stringToCloudFormation(properties.outputSelection),
        ProgramDateTime: cdk.stringToCloudFormation(properties.programDateTime),
        ProgramDateTimeClock: cdk.stringToCloudFormation(properties.programDateTimeClock),
        ProgramDateTimePeriod: cdk.numberToCloudFormation(properties.programDateTimePeriod),
        RedundantManifest: cdk.stringToCloudFormation(properties.redundantManifest),
        SegmentLength: cdk.numberToCloudFormation(properties.segmentLength),
        SegmentationMode: cdk.stringToCloudFormation(properties.segmentationMode),
        SegmentsPerSubdirectory: cdk.numberToCloudFormation(properties.segmentsPerSubdirectory),
        StreamInfResolution: cdk.stringToCloudFormation(properties.streamInfResolution),
        TimedMetadataId3Frame: cdk.stringToCloudFormation(properties.timedMetadataId3Frame),
        TimedMetadataId3Period: cdk.numberToCloudFormation(properties.timedMetadataId3Period),
        TimestampDeltaMilliseconds: cdk.numberToCloudFormation(properties.timestampDeltaMilliseconds),
        TsFileMode: cdk.stringToCloudFormation(properties.tsFileMode),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdMarkers) : undefined);
    ret.addPropertyResult('baseUrlContent', 'BaseUrlContent', properties.BaseUrlContent != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlContent) : undefined);
    ret.addPropertyResult('baseUrlContent1', 'BaseUrlContent1', properties.BaseUrlContent1 != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlContent1) : undefined);
    ret.addPropertyResult('baseUrlManifest', 'BaseUrlManifest', properties.BaseUrlManifest != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlManifest) : undefined);
    ret.addPropertyResult('baseUrlManifest1', 'BaseUrlManifest1', properties.BaseUrlManifest1 != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlManifest1) : undefined);
    ret.addPropertyResult('captionLanguageMappings', 'CaptionLanguageMappings', properties.CaptionLanguageMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionLanguageMappingPropertyFromCloudFormation)(properties.CaptionLanguageMappings) : undefined);
    ret.addPropertyResult('captionLanguageSetting', 'CaptionLanguageSetting', properties.CaptionLanguageSetting != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionLanguageSetting) : undefined);
    ret.addPropertyResult('clientCache', 'ClientCache', properties.ClientCache != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCache) : undefined);
    ret.addPropertyResult('codecSpecification', 'CodecSpecification', properties.CodecSpecification != null ? cfn_parse.FromCloudFormation.getString(properties.CodecSpecification) : undefined);
    ret.addPropertyResult('constantIv', 'ConstantIv', properties.ConstantIv != null ? cfn_parse.FromCloudFormation.getString(properties.ConstantIv) : undefined);
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('directoryStructure', 'DirectoryStructure', properties.DirectoryStructure != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryStructure) : undefined);
    ret.addPropertyResult('discontinuityTags', 'DiscontinuityTags', properties.DiscontinuityTags != null ? cfn_parse.FromCloudFormation.getString(properties.DiscontinuityTags) : undefined);
    ret.addPropertyResult('encryptionType', 'EncryptionType', properties.EncryptionType != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionType) : undefined);
    ret.addPropertyResult('hlsCdnSettings', 'HlsCdnSettings', properties.HlsCdnSettings != null ? CfnChannelHlsCdnSettingsPropertyFromCloudFormation(properties.HlsCdnSettings) : undefined);
    ret.addPropertyResult('hlsId3SegmentTagging', 'HlsId3SegmentTagging', properties.HlsId3SegmentTagging != null ? cfn_parse.FromCloudFormation.getString(properties.HlsId3SegmentTagging) : undefined);
    ret.addPropertyResult('iFrameOnlyPlaylists', 'IFrameOnlyPlaylists', properties.IFrameOnlyPlaylists != null ? cfn_parse.FromCloudFormation.getString(properties.IFrameOnlyPlaylists) : undefined);
    ret.addPropertyResult('incompleteSegmentBehavior', 'IncompleteSegmentBehavior', properties.IncompleteSegmentBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.IncompleteSegmentBehavior) : undefined);
    ret.addPropertyResult('indexNSegments', 'IndexNSegments', properties.IndexNSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.IndexNSegments) : undefined);
    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);
    ret.addPropertyResult('ivInManifest', 'IvInManifest', properties.IvInManifest != null ? cfn_parse.FromCloudFormation.getString(properties.IvInManifest) : undefined);
    ret.addPropertyResult('ivSource', 'IvSource', properties.IvSource != null ? cfn_parse.FromCloudFormation.getString(properties.IvSource) : undefined);
    ret.addPropertyResult('keepSegments', 'KeepSegments', properties.KeepSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.KeepSegments) : undefined);
    ret.addPropertyResult('keyFormat', 'KeyFormat', properties.KeyFormat != null ? cfn_parse.FromCloudFormation.getString(properties.KeyFormat) : undefined);
    ret.addPropertyResult('keyFormatVersions', 'KeyFormatVersions', properties.KeyFormatVersions != null ? cfn_parse.FromCloudFormation.getString(properties.KeyFormatVersions) : undefined);
    ret.addPropertyResult('keyProviderSettings', 'KeyProviderSettings', properties.KeyProviderSettings != null ? CfnChannelKeyProviderSettingsPropertyFromCloudFormation(properties.KeyProviderSettings) : undefined);
    ret.addPropertyResult('manifestCompression', 'ManifestCompression', properties.ManifestCompression != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestCompression) : undefined);
    ret.addPropertyResult('manifestDurationFormat', 'ManifestDurationFormat', properties.ManifestDurationFormat != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestDurationFormat) : undefined);
    ret.addPropertyResult('minSegmentLength', 'MinSegmentLength', properties.MinSegmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinSegmentLength) : undefined);
    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);
    ret.addPropertyResult('outputSelection', 'OutputSelection', properties.OutputSelection != null ? cfn_parse.FromCloudFormation.getString(properties.OutputSelection) : undefined);
    ret.addPropertyResult('programDateTime', 'ProgramDateTime', properties.ProgramDateTime != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramDateTime) : undefined);
    ret.addPropertyResult('programDateTimeClock', 'ProgramDateTimeClock', properties.ProgramDateTimeClock != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramDateTimeClock) : undefined);
    ret.addPropertyResult('programDateTimePeriod', 'ProgramDateTimePeriod', properties.ProgramDateTimePeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramDateTimePeriod) : undefined);
    ret.addPropertyResult('redundantManifest', 'RedundantManifest', properties.RedundantManifest != null ? cfn_parse.FromCloudFormation.getString(properties.RedundantManifest) : undefined);
    ret.addPropertyResult('segmentLength', 'SegmentLength', properties.SegmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentLength) : undefined);
    ret.addPropertyResult('segmentationMode', 'SegmentationMode', properties.SegmentationMode != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMode) : undefined);
    ret.addPropertyResult('segmentsPerSubdirectory', 'SegmentsPerSubdirectory', properties.SegmentsPerSubdirectory != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentsPerSubdirectory) : undefined);
    ret.addPropertyResult('streamInfResolution', 'StreamInfResolution', properties.StreamInfResolution != null ? cfn_parse.FromCloudFormation.getString(properties.StreamInfResolution) : undefined);
    ret.addPropertyResult('timedMetadataId3Frame', 'TimedMetadataId3Frame', properties.TimedMetadataId3Frame != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataId3Frame) : undefined);
    ret.addPropertyResult('timedMetadataId3Period', 'TimedMetadataId3Period', properties.TimedMetadataId3Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimedMetadataId3Period) : undefined);
    ret.addPropertyResult('timestampDeltaMilliseconds', 'TimestampDeltaMilliseconds', properties.TimestampDeltaMilliseconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimestampDeltaMilliseconds) : undefined);
    ret.addPropertyResult('tsFileMode', 'TsFileMode', properties.TsFileMode != null ? cfn_parse.FromCloudFormation.getString(properties.TsFileMode) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsInputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsInputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsInputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bandwidth', cdk.validateNumber)(properties.bandwidth));
    errors.collect(cdk.propertyValidator('bufferSegments', cdk.validateNumber)(properties.bufferSegments));
    errors.collect(cdk.propertyValidator('retries', cdk.validateNumber)(properties.retries));
    errors.collect(cdk.propertyValidator('retryInterval', cdk.validateNumber)(properties.retryInterval));
    errors.collect(cdk.propertyValidator('scte35Source', cdk.validateString)(properties.scte35Source));
    return errors.wrap('supplied properties not correct for "HlsInputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsInputSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsInputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsInputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsInputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsInputSettingsPropertyValidator(properties).assertSuccess();
    return {
        Bandwidth: cdk.numberToCloudFormation(properties.bandwidth),
        BufferSegments: cdk.numberToCloudFormation(properties.bufferSegments),
        Retries: cdk.numberToCloudFormation(properties.retries),
        RetryInterval: cdk.numberToCloudFormation(properties.retryInterval),
        Scte35Source: cdk.stringToCloudFormation(properties.scte35Source),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsInputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bandwidth', 'Bandwidth', properties.Bandwidth != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bandwidth) : undefined);
    ret.addPropertyResult('bufferSegments', 'BufferSegments', properties.BufferSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufferSegments) : undefined);
    ret.addPropertyResult('retries', 'Retries', properties.Retries != null ? cfn_parse.FromCloudFormation.getNumber(properties.Retries) : undefined);
    ret.addPropertyResult('retryInterval', 'RetryInterval', properties.RetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetryInterval) : undefined);
    ret.addPropertyResult('scte35Source', 'Scte35Source', properties.Scte35Source != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Source) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsMediaStoreSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsMediaStoreSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsMediaStoreSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));
    errors.collect(cdk.propertyValidator('mediaStoreStorageClass', cdk.validateString)(properties.mediaStoreStorageClass));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    return errors.wrap('supplied properties not correct for "HlsMediaStoreSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsMediaStoreSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsMediaStoreSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsMediaStoreSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsMediaStoreSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsMediaStoreSettingsPropertyValidator(properties).assertSuccess();
    return {
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),
        MediaStoreStorageClass: cdk.stringToCloudFormation(properties.mediaStoreStorageClass),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsMediaStoreSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);
    ret.addPropertyResult('mediaStoreStorageClass', 'MediaStoreStorageClass', properties.MediaStoreStorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.MediaStoreStorageClass) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('h265PackagingType', cdk.validateString)(properties.h265PackagingType));
    errors.collect(cdk.propertyValidator('hlsSettings', CfnChannel_HlsSettingsPropertyValidator)(properties.hlsSettings));
    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));
    errors.collect(cdk.propertyValidator('segmentModifier', cdk.validateString)(properties.segmentModifier));
    return errors.wrap('supplied properties not correct for "HlsOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        H265PackagingType: cdk.stringToCloudFormation(properties.h265PackagingType),
        HlsSettings: cfnChannelHlsSettingsPropertyToCloudFormation(properties.hlsSettings),
        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),
        SegmentModifier: cdk.stringToCloudFormation(properties.segmentModifier),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('h265PackagingType', 'H265PackagingType', properties.H265PackagingType != null ? cfn_parse.FromCloudFormation.getString(properties.H265PackagingType) : undefined);
    ret.addPropertyResult('hlsSettings', 'HlsSettings', properties.HlsSettings != null ? CfnChannelHlsSettingsPropertyFromCloudFormation(properties.HlsSettings) : undefined);
    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);
    ret.addPropertyResult('segmentModifier', 'SegmentModifier', properties.SegmentModifier != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentModifier) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsS3SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsS3SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsS3SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));
    return errors.wrap('supplied properties not correct for "HlsS3SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsS3Settings` resource
 *
 * @param properties - the TypeScript properties of a `HlsS3SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsS3Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsS3SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsS3SettingsPropertyValidator(properties).assertSuccess();
    return {
        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsS3SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioOnlyHlsSettings', CfnChannel_AudioOnlyHlsSettingsPropertyValidator)(properties.audioOnlyHlsSettings));
    errors.collect(cdk.propertyValidator('fmp4HlsSettings', CfnChannel_Fmp4HlsSettingsPropertyValidator)(properties.fmp4HlsSettings));
    errors.collect(cdk.propertyValidator('frameCaptureHlsSettings', CfnChannel_FrameCaptureHlsSettingsPropertyValidator)(properties.frameCaptureHlsSettings));
    errors.collect(cdk.propertyValidator('standardHlsSettings', CfnChannel_StandardHlsSettingsPropertyValidator)(properties.standardHlsSettings));
    return errors.wrap('supplied properties not correct for "HlsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioOnlyHlsSettings: cfnChannelAudioOnlyHlsSettingsPropertyToCloudFormation(properties.audioOnlyHlsSettings),
        Fmp4HlsSettings: cfnChannelFmp4HlsSettingsPropertyToCloudFormation(properties.fmp4HlsSettings),
        FrameCaptureHlsSettings: cfnChannelFrameCaptureHlsSettingsPropertyToCloudFormation(properties.frameCaptureHlsSettings),
        StandardHlsSettings: cfnChannelStandardHlsSettingsPropertyToCloudFormation(properties.standardHlsSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioOnlyHlsSettings', 'AudioOnlyHlsSettings', properties.AudioOnlyHlsSettings != null ? CfnChannelAudioOnlyHlsSettingsPropertyFromCloudFormation(properties.AudioOnlyHlsSettings) : undefined);
    ret.addPropertyResult('fmp4HlsSettings', 'Fmp4HlsSettings', properties.Fmp4HlsSettings != null ? CfnChannelFmp4HlsSettingsPropertyFromCloudFormation(properties.Fmp4HlsSettings) : undefined);
    ret.addPropertyResult('frameCaptureHlsSettings', 'FrameCaptureHlsSettings', properties.FrameCaptureHlsSettings != null ? CfnChannelFrameCaptureHlsSettingsPropertyFromCloudFormation(properties.FrameCaptureHlsSettings) : undefined);
    ret.addPropertyResult('standardHlsSettings', 'StandardHlsSettings', properties.StandardHlsSettings != null ? CfnChannelStandardHlsSettingsPropertyFromCloudFormation(properties.StandardHlsSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HlsWebdavSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HlsWebdavSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HlsWebdavSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));
    errors.collect(cdk.propertyValidator('httpTransferMode', cdk.validateString)(properties.httpTransferMode));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    return errors.wrap('supplied properties not correct for "HlsWebdavSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsWebdavSettings` resource
 *
 * @param properties - the TypeScript properties of a `HlsWebdavSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsWebdavSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHlsWebdavSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HlsWebdavSettingsPropertyValidator(properties).assertSuccess();
    return {
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),
        HttpTransferMode: cdk.stringToCloudFormation(properties.httpTransferMode),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
    };
}
// @ts-ignore TS6133
function CfnChannelHlsWebdavSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);
    ret.addPropertyResult('httpTransferMode', 'HttpTransferMode', properties.HttpTransferMode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTransferMode) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `HtmlMotionGraphicsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `HtmlMotionGraphicsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "HtmlMotionGraphicsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HtmlMotionGraphicsSettings` resource
 *
 * @param properties - the TypeScript properties of a `HtmlMotionGraphicsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HtmlMotionGraphicsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelHtmlMotionGraphicsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelHtmlMotionGraphicsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputAttachmentProperty`
 *
 * @param properties - the TypeScript properties of a `InputAttachmentProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputAttachmentPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('automaticInputFailoverSettings', CfnChannel_AutomaticInputFailoverSettingsPropertyValidator)(properties.automaticInputFailoverSettings));
    errors.collect(cdk.propertyValidator('inputAttachmentName', cdk.validateString)(properties.inputAttachmentName));
    errors.collect(cdk.propertyValidator('inputId', cdk.validateString)(properties.inputId));
    errors.collect(cdk.propertyValidator('inputSettings', CfnChannel_InputSettingsPropertyValidator)(properties.inputSettings));
    return errors.wrap('supplied properties not correct for "InputAttachmentProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputAttachment` resource
 *
 * @param properties - the TypeScript properties of a `InputAttachmentProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputAttachment` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputAttachmentPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputAttachmentPropertyValidator(properties).assertSuccess();
    return {
        AutomaticInputFailoverSettings: cfnChannelAutomaticInputFailoverSettingsPropertyToCloudFormation(properties.automaticInputFailoverSettings),
        InputAttachmentName: cdk.stringToCloudFormation(properties.inputAttachmentName),
        InputId: cdk.stringToCloudFormation(properties.inputId),
        InputSettings: cfnChannelInputSettingsPropertyToCloudFormation(properties.inputSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelInputAttachmentPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('automaticInputFailoverSettings', 'AutomaticInputFailoverSettings', properties.AutomaticInputFailoverSettings != null ? CfnChannelAutomaticInputFailoverSettingsPropertyFromCloudFormation(properties.AutomaticInputFailoverSettings) : undefined);
    ret.addPropertyResult('inputAttachmentName', 'InputAttachmentName', properties.InputAttachmentName != null ? cfn_parse.FromCloudFormation.getString(properties.InputAttachmentName) : undefined);
    ret.addPropertyResult('inputId', 'InputId', properties.InputId != null ? cfn_parse.FromCloudFormation.getString(properties.InputId) : undefined);
    ret.addPropertyResult('inputSettings', 'InputSettings', properties.InputSettings != null ? CfnChannelInputSettingsPropertyFromCloudFormation(properties.InputSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputChannelLevelProperty`
 *
 * @param properties - the TypeScript properties of a `InputChannelLevelProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputChannelLevelPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('gain', cdk.validateNumber)(properties.gain));
    errors.collect(cdk.propertyValidator('inputChannel', cdk.validateNumber)(properties.inputChannel));
    return errors.wrap('supplied properties not correct for "InputChannelLevelProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputChannelLevel` resource
 *
 * @param properties - the TypeScript properties of a `InputChannelLevelProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputChannelLevel` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputChannelLevelPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputChannelLevelPropertyValidator(properties).assertSuccess();
    return {
        Gain: cdk.numberToCloudFormation(properties.gain),
        InputChannel: cdk.numberToCloudFormation(properties.inputChannel),
    };
}
// @ts-ignore TS6133
function CfnChannelInputChannelLevelPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('gain', 'Gain', properties.Gain != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gain) : undefined);
    ret.addPropertyResult('inputChannel', 'InputChannel', properties.InputChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.InputChannel) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputLocationProperty`
 *
 * @param properties - the TypeScript properties of a `InputLocationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputLocationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));
    errors.collect(cdk.propertyValidator('uri', cdk.validateString)(properties.uri));
    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));
    return errors.wrap('supplied properties not correct for "InputLocationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLocation` resource
 *
 * @param properties - the TypeScript properties of a `InputLocationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLocation` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputLocationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputLocationPropertyValidator(properties).assertSuccess();
    return {
        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),
        Uri: cdk.stringToCloudFormation(properties.uri),
        Username: cdk.stringToCloudFormation(properties.username),
    };
}
// @ts-ignore TS6133
function CfnChannelInputLocationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);
    ret.addPropertyResult('uri', 'Uri', properties.Uri != null ? cfn_parse.FromCloudFormation.getString(properties.Uri) : undefined);
    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputLossBehaviorProperty`
 *
 * @param properties - the TypeScript properties of a `InputLossBehaviorProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputLossBehaviorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('blackFrameMsec', cdk.validateNumber)(properties.blackFrameMsec));
    errors.collect(cdk.propertyValidator('inputLossImageColor', cdk.validateString)(properties.inputLossImageColor));
    errors.collect(cdk.propertyValidator('inputLossImageSlate', CfnChannel_InputLocationPropertyValidator)(properties.inputLossImageSlate));
    errors.collect(cdk.propertyValidator('inputLossImageType', cdk.validateString)(properties.inputLossImageType));
    errors.collect(cdk.propertyValidator('repeatFrameMsec', cdk.validateNumber)(properties.repeatFrameMsec));
    return errors.wrap('supplied properties not correct for "InputLossBehaviorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossBehavior` resource
 *
 * @param properties - the TypeScript properties of a `InputLossBehaviorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossBehavior` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputLossBehaviorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputLossBehaviorPropertyValidator(properties).assertSuccess();
    return {
        BlackFrameMsec: cdk.numberToCloudFormation(properties.blackFrameMsec),
        InputLossImageColor: cdk.stringToCloudFormation(properties.inputLossImageColor),
        InputLossImageSlate: cfnChannelInputLocationPropertyToCloudFormation(properties.inputLossImageSlate),
        InputLossImageType: cdk.stringToCloudFormation(properties.inputLossImageType),
        RepeatFrameMsec: cdk.numberToCloudFormation(properties.repeatFrameMsec),
    };
}
// @ts-ignore TS6133
function CfnChannelInputLossBehaviorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('blackFrameMsec', 'BlackFrameMsec', properties.BlackFrameMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlackFrameMsec) : undefined);
    ret.addPropertyResult('inputLossImageColor', 'InputLossImageColor', properties.InputLossImageColor != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossImageColor) : undefined);
    ret.addPropertyResult('inputLossImageSlate', 'InputLossImageSlate', properties.InputLossImageSlate != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.InputLossImageSlate) : undefined);
    ret.addPropertyResult('inputLossImageType', 'InputLossImageType', properties.InputLossImageType != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossImageType) : undefined);
    ret.addPropertyResult('repeatFrameMsec', 'RepeatFrameMsec', properties.RepeatFrameMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepeatFrameMsec) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputLossFailoverSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `InputLossFailoverSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputLossFailoverSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('inputLossThresholdMsec', cdk.validateNumber)(properties.inputLossThresholdMsec));
    return errors.wrap('supplied properties not correct for "InputLossFailoverSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossFailoverSettings` resource
 *
 * @param properties - the TypeScript properties of a `InputLossFailoverSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossFailoverSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputLossFailoverSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputLossFailoverSettingsPropertyValidator(properties).assertSuccess();
    return {
        InputLossThresholdMsec: cdk.numberToCloudFormation(properties.inputLossThresholdMsec),
    };
}
// @ts-ignore TS6133
function CfnChannelInputLossFailoverSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('inputLossThresholdMsec', 'InputLossThresholdMsec', properties.InputLossThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.InputLossThresholdMsec) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `InputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioSelectors', cdk.listValidator(CfnChannel_AudioSelectorPropertyValidator))(properties.audioSelectors));
    errors.collect(cdk.propertyValidator('captionSelectors', cdk.listValidator(CfnChannel_CaptionSelectorPropertyValidator))(properties.captionSelectors));
    errors.collect(cdk.propertyValidator('deblockFilter', cdk.validateString)(properties.deblockFilter));
    errors.collect(cdk.propertyValidator('denoiseFilter', cdk.validateString)(properties.denoiseFilter));
    errors.collect(cdk.propertyValidator('filterStrength', cdk.validateNumber)(properties.filterStrength));
    errors.collect(cdk.propertyValidator('inputFilter', cdk.validateString)(properties.inputFilter));
    errors.collect(cdk.propertyValidator('networkInputSettings', CfnChannel_NetworkInputSettingsPropertyValidator)(properties.networkInputSettings));
    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateNumber)(properties.scte35Pid));
    errors.collect(cdk.propertyValidator('smpte2038DataPreference', cdk.validateString)(properties.smpte2038DataPreference));
    errors.collect(cdk.propertyValidator('sourceEndBehavior', cdk.validateString)(properties.sourceEndBehavior));
    errors.collect(cdk.propertyValidator('videoSelector', CfnChannel_VideoSelectorPropertyValidator)(properties.videoSelector));
    return errors.wrap('supplied properties not correct for "InputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSettings` resource
 *
 * @param properties - the TypeScript properties of a `InputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioSelectors: cdk.listMapper(cfnChannelAudioSelectorPropertyToCloudFormation)(properties.audioSelectors),
        CaptionSelectors: cdk.listMapper(cfnChannelCaptionSelectorPropertyToCloudFormation)(properties.captionSelectors),
        DeblockFilter: cdk.stringToCloudFormation(properties.deblockFilter),
        DenoiseFilter: cdk.stringToCloudFormation(properties.denoiseFilter),
        FilterStrength: cdk.numberToCloudFormation(properties.filterStrength),
        InputFilter: cdk.stringToCloudFormation(properties.inputFilter),
        NetworkInputSettings: cfnChannelNetworkInputSettingsPropertyToCloudFormation(properties.networkInputSettings),
        Scte35Pid: cdk.numberToCloudFormation(properties.scte35Pid),
        Smpte2038DataPreference: cdk.stringToCloudFormation(properties.smpte2038DataPreference),
        SourceEndBehavior: cdk.stringToCloudFormation(properties.sourceEndBehavior),
        VideoSelector: cfnChannelVideoSelectorPropertyToCloudFormation(properties.videoSelector),
    };
}
// @ts-ignore TS6133
function CfnChannelInputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioSelectors', 'AudioSelectors', properties.AudioSelectors != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioSelectorPropertyFromCloudFormation)(properties.AudioSelectors) : undefined);
    ret.addPropertyResult('captionSelectors', 'CaptionSelectors', properties.CaptionSelectors != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionSelectorPropertyFromCloudFormation)(properties.CaptionSelectors) : undefined);
    ret.addPropertyResult('deblockFilter', 'DeblockFilter', properties.DeblockFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DeblockFilter) : undefined);
    ret.addPropertyResult('denoiseFilter', 'DenoiseFilter', properties.DenoiseFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DenoiseFilter) : undefined);
    ret.addPropertyResult('filterStrength', 'FilterStrength', properties.FilterStrength != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilterStrength) : undefined);
    ret.addPropertyResult('inputFilter', 'InputFilter', properties.InputFilter != null ? cfn_parse.FromCloudFormation.getString(properties.InputFilter) : undefined);
    ret.addPropertyResult('networkInputSettings', 'NetworkInputSettings', properties.NetworkInputSettings != null ? CfnChannelNetworkInputSettingsPropertyFromCloudFormation(properties.NetworkInputSettings) : undefined);
    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Scte35Pid) : undefined);
    ret.addPropertyResult('smpte2038DataPreference', 'Smpte2038DataPreference', properties.Smpte2038DataPreference != null ? cfn_parse.FromCloudFormation.getString(properties.Smpte2038DataPreference) : undefined);
    ret.addPropertyResult('sourceEndBehavior', 'SourceEndBehavior', properties.SourceEndBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.SourceEndBehavior) : undefined);
    ret.addPropertyResult('videoSelector', 'VideoSelector', properties.VideoSelector != null ? CfnChannelVideoSelectorPropertyFromCloudFormation(properties.VideoSelector) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `InputSpecificationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_InputSpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('codec', cdk.validateString)(properties.codec));
    errors.collect(cdk.propertyValidator('maximumBitrate', cdk.validateString)(properties.maximumBitrate));
    errors.collect(cdk.propertyValidator('resolution', cdk.validateString)(properties.resolution));
    return errors.wrap('supplied properties not correct for "InputSpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSpecification` resource
 *
 * @param properties - the TypeScript properties of a `InputSpecificationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSpecification` resource.
 */
// @ts-ignore TS6133
function cfnChannelInputSpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_InputSpecificationPropertyValidator(properties).assertSuccess();
    return {
        Codec: cdk.stringToCloudFormation(properties.codec),
        MaximumBitrate: cdk.stringToCloudFormation(properties.maximumBitrate),
        Resolution: cdk.stringToCloudFormation(properties.resolution),
    };
}
// @ts-ignore TS6133
function CfnChannelInputSpecificationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('codec', 'Codec', properties.Codec != null ? cfn_parse.FromCloudFormation.getString(properties.Codec) : undefined);
    ret.addPropertyResult('maximumBitrate', 'MaximumBitrate', properties.MaximumBitrate != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumBitrate) : undefined);
    ret.addPropertyResult('resolution', 'Resolution', properties.Resolution != null ? cfn_parse.FromCloudFormation.getString(properties.Resolution) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `KeyProviderSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `KeyProviderSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_KeyProviderSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('staticKeySettings', CfnChannel_StaticKeySettingsPropertyValidator)(properties.staticKeySettings));
    return errors.wrap('supplied properties not correct for "KeyProviderSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.KeyProviderSettings` resource
 *
 * @param properties - the TypeScript properties of a `KeyProviderSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.KeyProviderSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelKeyProviderSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_KeyProviderSettingsPropertyValidator(properties).assertSuccess();
    return {
        StaticKeySettings: cfnChannelStaticKeySettingsPropertyToCloudFormation(properties.staticKeySettings),
    };
}
// @ts-ignore TS6133
function CfnChannelKeyProviderSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('staticKeySettings', 'StaticKeySettings', properties.StaticKeySettings != null ? CfnChannelStaticKeySettingsPropertyFromCloudFormation(properties.StaticKeySettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `M2tsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `M2tsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_M2tsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('absentInputAudioBehavior', cdk.validateString)(properties.absentInputAudioBehavior));
    errors.collect(cdk.propertyValidator('arib', cdk.validateString)(properties.arib));
    errors.collect(cdk.propertyValidator('aribCaptionsPid', cdk.validateString)(properties.aribCaptionsPid));
    errors.collect(cdk.propertyValidator('aribCaptionsPidControl', cdk.validateString)(properties.aribCaptionsPidControl));
    errors.collect(cdk.propertyValidator('audioBufferModel', cdk.validateString)(properties.audioBufferModel));
    errors.collect(cdk.propertyValidator('audioFramesPerPes', cdk.validateNumber)(properties.audioFramesPerPes));
    errors.collect(cdk.propertyValidator('audioPids', cdk.validateString)(properties.audioPids));
    errors.collect(cdk.propertyValidator('audioStreamType', cdk.validateString)(properties.audioStreamType));
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('bufferModel', cdk.validateString)(properties.bufferModel));
    errors.collect(cdk.propertyValidator('ccDescriptor', cdk.validateString)(properties.ccDescriptor));
    errors.collect(cdk.propertyValidator('dvbNitSettings', CfnChannel_DvbNitSettingsPropertyValidator)(properties.dvbNitSettings));
    errors.collect(cdk.propertyValidator('dvbSdtSettings', CfnChannel_DvbSdtSettingsPropertyValidator)(properties.dvbSdtSettings));
    errors.collect(cdk.propertyValidator('dvbSubPids', cdk.validateString)(properties.dvbSubPids));
    errors.collect(cdk.propertyValidator('dvbTdtSettings', CfnChannel_DvbTdtSettingsPropertyValidator)(properties.dvbTdtSettings));
    errors.collect(cdk.propertyValidator('dvbTeletextPid', cdk.validateString)(properties.dvbTeletextPid));
    errors.collect(cdk.propertyValidator('ebif', cdk.validateString)(properties.ebif));
    errors.collect(cdk.propertyValidator('ebpAudioInterval', cdk.validateString)(properties.ebpAudioInterval));
    errors.collect(cdk.propertyValidator('ebpLookaheadMs', cdk.validateNumber)(properties.ebpLookaheadMs));
    errors.collect(cdk.propertyValidator('ebpPlacement', cdk.validateString)(properties.ebpPlacement));
    errors.collect(cdk.propertyValidator('ecmPid', cdk.validateString)(properties.ecmPid));
    errors.collect(cdk.propertyValidator('esRateInPes', cdk.validateString)(properties.esRateInPes));
    errors.collect(cdk.propertyValidator('etvPlatformPid', cdk.validateString)(properties.etvPlatformPid));
    errors.collect(cdk.propertyValidator('etvSignalPid', cdk.validateString)(properties.etvSignalPid));
    errors.collect(cdk.propertyValidator('fragmentTime', cdk.validateNumber)(properties.fragmentTime));
    errors.collect(cdk.propertyValidator('klv', cdk.validateString)(properties.klv));
    errors.collect(cdk.propertyValidator('klvDataPids', cdk.validateString)(properties.klvDataPids));
    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));
    errors.collect(cdk.propertyValidator('nullPacketBitrate', cdk.validateNumber)(properties.nullPacketBitrate));
    errors.collect(cdk.propertyValidator('patInterval', cdk.validateNumber)(properties.patInterval));
    errors.collect(cdk.propertyValidator('pcrControl', cdk.validateString)(properties.pcrControl));
    errors.collect(cdk.propertyValidator('pcrPeriod', cdk.validateNumber)(properties.pcrPeriod));
    errors.collect(cdk.propertyValidator('pcrPid', cdk.validateString)(properties.pcrPid));
    errors.collect(cdk.propertyValidator('pmtInterval', cdk.validateNumber)(properties.pmtInterval));
    errors.collect(cdk.propertyValidator('pmtPid', cdk.validateString)(properties.pmtPid));
    errors.collect(cdk.propertyValidator('programNum', cdk.validateNumber)(properties.programNum));
    errors.collect(cdk.propertyValidator('rateMode', cdk.validateString)(properties.rateMode));
    errors.collect(cdk.propertyValidator('scte27Pids', cdk.validateString)(properties.scte27Pids));
    errors.collect(cdk.propertyValidator('scte35Control', cdk.validateString)(properties.scte35Control));
    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateString)(properties.scte35Pid));
    errors.collect(cdk.propertyValidator('segmentationMarkers', cdk.validateString)(properties.segmentationMarkers));
    errors.collect(cdk.propertyValidator('segmentationStyle', cdk.validateString)(properties.segmentationStyle));
    errors.collect(cdk.propertyValidator('segmentationTime', cdk.validateNumber)(properties.segmentationTime));
    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));
    errors.collect(cdk.propertyValidator('timedMetadataPid', cdk.validateString)(properties.timedMetadataPid));
    errors.collect(cdk.propertyValidator('transportStreamId', cdk.validateNumber)(properties.transportStreamId));
    errors.collect(cdk.propertyValidator('videoPid', cdk.validateString)(properties.videoPid));
    return errors.wrap('supplied properties not correct for "M2tsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M2tsSettings` resource
 *
 * @param properties - the TypeScript properties of a `M2tsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M2tsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelM2tsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_M2tsSettingsPropertyValidator(properties).assertSuccess();
    return {
        AbsentInputAudioBehavior: cdk.stringToCloudFormation(properties.absentInputAudioBehavior),
        Arib: cdk.stringToCloudFormation(properties.arib),
        AribCaptionsPid: cdk.stringToCloudFormation(properties.aribCaptionsPid),
        AribCaptionsPidControl: cdk.stringToCloudFormation(properties.aribCaptionsPidControl),
        AudioBufferModel: cdk.stringToCloudFormation(properties.audioBufferModel),
        AudioFramesPerPes: cdk.numberToCloudFormation(properties.audioFramesPerPes),
        AudioPids: cdk.stringToCloudFormation(properties.audioPids),
        AudioStreamType: cdk.stringToCloudFormation(properties.audioStreamType),
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        BufferModel: cdk.stringToCloudFormation(properties.bufferModel),
        CcDescriptor: cdk.stringToCloudFormation(properties.ccDescriptor),
        DvbNitSettings: cfnChannelDvbNitSettingsPropertyToCloudFormation(properties.dvbNitSettings),
        DvbSdtSettings: cfnChannelDvbSdtSettingsPropertyToCloudFormation(properties.dvbSdtSettings),
        DvbSubPids: cdk.stringToCloudFormation(properties.dvbSubPids),
        DvbTdtSettings: cfnChannelDvbTdtSettingsPropertyToCloudFormation(properties.dvbTdtSettings),
        DvbTeletextPid: cdk.stringToCloudFormation(properties.dvbTeletextPid),
        Ebif: cdk.stringToCloudFormation(properties.ebif),
        EbpAudioInterval: cdk.stringToCloudFormation(properties.ebpAudioInterval),
        EbpLookaheadMs: cdk.numberToCloudFormation(properties.ebpLookaheadMs),
        EbpPlacement: cdk.stringToCloudFormation(properties.ebpPlacement),
        EcmPid: cdk.stringToCloudFormation(properties.ecmPid),
        EsRateInPes: cdk.stringToCloudFormation(properties.esRateInPes),
        EtvPlatformPid: cdk.stringToCloudFormation(properties.etvPlatformPid),
        EtvSignalPid: cdk.stringToCloudFormation(properties.etvSignalPid),
        FragmentTime: cdk.numberToCloudFormation(properties.fragmentTime),
        Klv: cdk.stringToCloudFormation(properties.klv),
        KlvDataPids: cdk.stringToCloudFormation(properties.klvDataPids),
        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),
        NullPacketBitrate: cdk.numberToCloudFormation(properties.nullPacketBitrate),
        PatInterval: cdk.numberToCloudFormation(properties.patInterval),
        PcrControl: cdk.stringToCloudFormation(properties.pcrControl),
        PcrPeriod: cdk.numberToCloudFormation(properties.pcrPeriod),
        PcrPid: cdk.stringToCloudFormation(properties.pcrPid),
        PmtInterval: cdk.numberToCloudFormation(properties.pmtInterval),
        PmtPid: cdk.stringToCloudFormation(properties.pmtPid),
        ProgramNum: cdk.numberToCloudFormation(properties.programNum),
        RateMode: cdk.stringToCloudFormation(properties.rateMode),
        Scte27Pids: cdk.stringToCloudFormation(properties.scte27Pids),
        Scte35Control: cdk.stringToCloudFormation(properties.scte35Control),
        Scte35Pid: cdk.stringToCloudFormation(properties.scte35Pid),
        SegmentationMarkers: cdk.stringToCloudFormation(properties.segmentationMarkers),
        SegmentationStyle: cdk.stringToCloudFormation(properties.segmentationStyle),
        SegmentationTime: cdk.numberToCloudFormation(properties.segmentationTime),
        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),
        TimedMetadataPid: cdk.stringToCloudFormation(properties.timedMetadataPid),
        TransportStreamId: cdk.numberToCloudFormation(properties.transportStreamId),
        VideoPid: cdk.stringToCloudFormation(properties.videoPid),
    };
}
// @ts-ignore TS6133
function CfnChannelM2tsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('absentInputAudioBehavior', 'AbsentInputAudioBehavior', properties.AbsentInputAudioBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.AbsentInputAudioBehavior) : undefined);
    ret.addPropertyResult('arib', 'Arib', properties.Arib != null ? cfn_parse.FromCloudFormation.getString(properties.Arib) : undefined);
    ret.addPropertyResult('aribCaptionsPid', 'AribCaptionsPid', properties.AribCaptionsPid != null ? cfn_parse.FromCloudFormation.getString(properties.AribCaptionsPid) : undefined);
    ret.addPropertyResult('aribCaptionsPidControl', 'AribCaptionsPidControl', properties.AribCaptionsPidControl != null ? cfn_parse.FromCloudFormation.getString(properties.AribCaptionsPidControl) : undefined);
    ret.addPropertyResult('audioBufferModel', 'AudioBufferModel', properties.AudioBufferModel != null ? cfn_parse.FromCloudFormation.getString(properties.AudioBufferModel) : undefined);
    ret.addPropertyResult('audioFramesPerPes', 'AudioFramesPerPes', properties.AudioFramesPerPes != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioFramesPerPes) : undefined);
    ret.addPropertyResult('audioPids', 'AudioPids', properties.AudioPids != null ? cfn_parse.FromCloudFormation.getString(properties.AudioPids) : undefined);
    ret.addPropertyResult('audioStreamType', 'AudioStreamType', properties.AudioStreamType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioStreamType) : undefined);
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('bufferModel', 'BufferModel', properties.BufferModel != null ? cfn_parse.FromCloudFormation.getString(properties.BufferModel) : undefined);
    ret.addPropertyResult('ccDescriptor', 'CcDescriptor', properties.CcDescriptor != null ? cfn_parse.FromCloudFormation.getString(properties.CcDescriptor) : undefined);
    ret.addPropertyResult('dvbNitSettings', 'DvbNitSettings', properties.DvbNitSettings != null ? CfnChannelDvbNitSettingsPropertyFromCloudFormation(properties.DvbNitSettings) : undefined);
    ret.addPropertyResult('dvbSdtSettings', 'DvbSdtSettings', properties.DvbSdtSettings != null ? CfnChannelDvbSdtSettingsPropertyFromCloudFormation(properties.DvbSdtSettings) : undefined);
    ret.addPropertyResult('dvbSubPids', 'DvbSubPids', properties.DvbSubPids != null ? cfn_parse.FromCloudFormation.getString(properties.DvbSubPids) : undefined);
    ret.addPropertyResult('dvbTdtSettings', 'DvbTdtSettings', properties.DvbTdtSettings != null ? CfnChannelDvbTdtSettingsPropertyFromCloudFormation(properties.DvbTdtSettings) : undefined);
    ret.addPropertyResult('dvbTeletextPid', 'DvbTeletextPid', properties.DvbTeletextPid != null ? cfn_parse.FromCloudFormation.getString(properties.DvbTeletextPid) : undefined);
    ret.addPropertyResult('ebif', 'Ebif', properties.Ebif != null ? cfn_parse.FromCloudFormation.getString(properties.Ebif) : undefined);
    ret.addPropertyResult('ebpAudioInterval', 'EbpAudioInterval', properties.EbpAudioInterval != null ? cfn_parse.FromCloudFormation.getString(properties.EbpAudioInterval) : undefined);
    ret.addPropertyResult('ebpLookaheadMs', 'EbpLookaheadMs', properties.EbpLookaheadMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.EbpLookaheadMs) : undefined);
    ret.addPropertyResult('ebpPlacement', 'EbpPlacement', properties.EbpPlacement != null ? cfn_parse.FromCloudFormation.getString(properties.EbpPlacement) : undefined);
    ret.addPropertyResult('ecmPid', 'EcmPid', properties.EcmPid != null ? cfn_parse.FromCloudFormation.getString(properties.EcmPid) : undefined);
    ret.addPropertyResult('esRateInPes', 'EsRateInPes', properties.EsRateInPes != null ? cfn_parse.FromCloudFormation.getString(properties.EsRateInPes) : undefined);
    ret.addPropertyResult('etvPlatformPid', 'EtvPlatformPid', properties.EtvPlatformPid != null ? cfn_parse.FromCloudFormation.getString(properties.EtvPlatformPid) : undefined);
    ret.addPropertyResult('etvSignalPid', 'EtvSignalPid', properties.EtvSignalPid != null ? cfn_parse.FromCloudFormation.getString(properties.EtvSignalPid) : undefined);
    ret.addPropertyResult('fragmentTime', 'FragmentTime', properties.FragmentTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.FragmentTime) : undefined);
    ret.addPropertyResult('klv', 'Klv', properties.Klv != null ? cfn_parse.FromCloudFormation.getString(properties.Klv) : undefined);
    ret.addPropertyResult('klvDataPids', 'KlvDataPids', properties.KlvDataPids != null ? cfn_parse.FromCloudFormation.getString(properties.KlvDataPids) : undefined);
    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);
    ret.addPropertyResult('nullPacketBitrate', 'NullPacketBitrate', properties.NullPacketBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.NullPacketBitrate) : undefined);
    ret.addPropertyResult('patInterval', 'PatInterval', properties.PatInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PatInterval) : undefined);
    ret.addPropertyResult('pcrControl', 'PcrControl', properties.PcrControl != null ? cfn_parse.FromCloudFormation.getString(properties.PcrControl) : undefined);
    ret.addPropertyResult('pcrPeriod', 'PcrPeriod', properties.PcrPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.PcrPeriod) : undefined);
    ret.addPropertyResult('pcrPid', 'PcrPid', properties.PcrPid != null ? cfn_parse.FromCloudFormation.getString(properties.PcrPid) : undefined);
    ret.addPropertyResult('pmtInterval', 'PmtInterval', properties.PmtInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PmtInterval) : undefined);
    ret.addPropertyResult('pmtPid', 'PmtPid', properties.PmtPid != null ? cfn_parse.FromCloudFormation.getString(properties.PmtPid) : undefined);
    ret.addPropertyResult('programNum', 'ProgramNum', properties.ProgramNum != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramNum) : undefined);
    ret.addPropertyResult('rateMode', 'RateMode', properties.RateMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateMode) : undefined);
    ret.addPropertyResult('scte27Pids', 'Scte27Pids', properties.Scte27Pids != null ? cfn_parse.FromCloudFormation.getString(properties.Scte27Pids) : undefined);
    ret.addPropertyResult('scte35Control', 'Scte35Control', properties.Scte35Control != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Control) : undefined);
    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Pid) : undefined);
    ret.addPropertyResult('segmentationMarkers', 'SegmentationMarkers', properties.SegmentationMarkers != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMarkers) : undefined);
    ret.addPropertyResult('segmentationStyle', 'SegmentationStyle', properties.SegmentationStyle != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationStyle) : undefined);
    ret.addPropertyResult('segmentationTime', 'SegmentationTime', properties.SegmentationTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentationTime) : undefined);
    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);
    ret.addPropertyResult('timedMetadataPid', 'TimedMetadataPid', properties.TimedMetadataPid != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataPid) : undefined);
    ret.addPropertyResult('transportStreamId', 'TransportStreamId', properties.TransportStreamId != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransportStreamId) : undefined);
    ret.addPropertyResult('videoPid', 'VideoPid', properties.VideoPid != null ? cfn_parse.FromCloudFormation.getString(properties.VideoPid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `M3u8SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `M3u8SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_M3u8SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioFramesPerPes', cdk.validateNumber)(properties.audioFramesPerPes));
    errors.collect(cdk.propertyValidator('audioPids', cdk.validateString)(properties.audioPids));
    errors.collect(cdk.propertyValidator('ecmPid', cdk.validateString)(properties.ecmPid));
    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));
    errors.collect(cdk.propertyValidator('patInterval', cdk.validateNumber)(properties.patInterval));
    errors.collect(cdk.propertyValidator('pcrControl', cdk.validateString)(properties.pcrControl));
    errors.collect(cdk.propertyValidator('pcrPeriod', cdk.validateNumber)(properties.pcrPeriod));
    errors.collect(cdk.propertyValidator('pcrPid', cdk.validateString)(properties.pcrPid));
    errors.collect(cdk.propertyValidator('pmtInterval', cdk.validateNumber)(properties.pmtInterval));
    errors.collect(cdk.propertyValidator('pmtPid', cdk.validateString)(properties.pmtPid));
    errors.collect(cdk.propertyValidator('programNum', cdk.validateNumber)(properties.programNum));
    errors.collect(cdk.propertyValidator('scte35Behavior', cdk.validateString)(properties.scte35Behavior));
    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateString)(properties.scte35Pid));
    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));
    errors.collect(cdk.propertyValidator('timedMetadataPid', cdk.validateString)(properties.timedMetadataPid));
    errors.collect(cdk.propertyValidator('transportStreamId', cdk.validateNumber)(properties.transportStreamId));
    errors.collect(cdk.propertyValidator('videoPid', cdk.validateString)(properties.videoPid));
    return errors.wrap('supplied properties not correct for "M3u8SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M3u8Settings` resource
 *
 * @param properties - the TypeScript properties of a `M3u8SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M3u8Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelM3u8SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_M3u8SettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioFramesPerPes: cdk.numberToCloudFormation(properties.audioFramesPerPes),
        AudioPids: cdk.stringToCloudFormation(properties.audioPids),
        EcmPid: cdk.stringToCloudFormation(properties.ecmPid),
        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),
        PatInterval: cdk.numberToCloudFormation(properties.patInterval),
        PcrControl: cdk.stringToCloudFormation(properties.pcrControl),
        PcrPeriod: cdk.numberToCloudFormation(properties.pcrPeriod),
        PcrPid: cdk.stringToCloudFormation(properties.pcrPid),
        PmtInterval: cdk.numberToCloudFormation(properties.pmtInterval),
        PmtPid: cdk.stringToCloudFormation(properties.pmtPid),
        ProgramNum: cdk.numberToCloudFormation(properties.programNum),
        Scte35Behavior: cdk.stringToCloudFormation(properties.scte35Behavior),
        Scte35Pid: cdk.stringToCloudFormation(properties.scte35Pid),
        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),
        TimedMetadataPid: cdk.stringToCloudFormation(properties.timedMetadataPid),
        TransportStreamId: cdk.numberToCloudFormation(properties.transportStreamId),
        VideoPid: cdk.stringToCloudFormation(properties.videoPid),
    };
}
// @ts-ignore TS6133
function CfnChannelM3u8SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioFramesPerPes', 'AudioFramesPerPes', properties.AudioFramesPerPes != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioFramesPerPes) : undefined);
    ret.addPropertyResult('audioPids', 'AudioPids', properties.AudioPids != null ? cfn_parse.FromCloudFormation.getString(properties.AudioPids) : undefined);
    ret.addPropertyResult('ecmPid', 'EcmPid', properties.EcmPid != null ? cfn_parse.FromCloudFormation.getString(properties.EcmPid) : undefined);
    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);
    ret.addPropertyResult('patInterval', 'PatInterval', properties.PatInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PatInterval) : undefined);
    ret.addPropertyResult('pcrControl', 'PcrControl', properties.PcrControl != null ? cfn_parse.FromCloudFormation.getString(properties.PcrControl) : undefined);
    ret.addPropertyResult('pcrPeriod', 'PcrPeriod', properties.PcrPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.PcrPeriod) : undefined);
    ret.addPropertyResult('pcrPid', 'PcrPid', properties.PcrPid != null ? cfn_parse.FromCloudFormation.getString(properties.PcrPid) : undefined);
    ret.addPropertyResult('pmtInterval', 'PmtInterval', properties.PmtInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PmtInterval) : undefined);
    ret.addPropertyResult('pmtPid', 'PmtPid', properties.PmtPid != null ? cfn_parse.FromCloudFormation.getString(properties.PmtPid) : undefined);
    ret.addPropertyResult('programNum', 'ProgramNum', properties.ProgramNum != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramNum) : undefined);
    ret.addPropertyResult('scte35Behavior', 'Scte35Behavior', properties.Scte35Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Behavior) : undefined);
    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Pid) : undefined);
    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);
    ret.addPropertyResult('timedMetadataPid', 'TimedMetadataPid', properties.TimedMetadataPid != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataPid) : undefined);
    ret.addPropertyResult('transportStreamId', 'TransportStreamId', properties.TransportStreamId != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransportStreamId) : undefined);
    ret.addPropertyResult('videoPid', 'VideoPid', properties.VideoPid != null ? cfn_parse.FromCloudFormation.getString(properties.VideoPid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MediaPackageGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MediaPackageGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MediaPackageGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    return errors.wrap('supplied properties not correct for "MediaPackageGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `MediaPackageGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMediaPackageGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MediaPackageGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
    };
}
// @ts-ignore TS6133
function CfnChannelMediaPackageGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MediaPackageOutputDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MediaPackageOutputDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('channelId', cdk.validateString)(properties.channelId));
    return errors.wrap('supplied properties not correct for "MediaPackageOutputDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `MediaPackageOutputDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMediaPackageOutputDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        ChannelId: cdk.stringToCloudFormation(properties.channelId),
    };
}
// @ts-ignore TS6133
function CfnChannelMediaPackageOutputDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('channelId', 'ChannelId', properties.ChannelId != null ? cfn_parse.FromCloudFormation.getString(properties.ChannelId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MediaPackageOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MediaPackageOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MediaPackageOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "MediaPackageOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `MediaPackageOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMediaPackageOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MediaPackageOutputSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelMediaPackageOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MotionGraphicsConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `MotionGraphicsConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MotionGraphicsConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('motionGraphicsInsertion', cdk.validateString)(properties.motionGraphicsInsertion));
    errors.collect(cdk.propertyValidator('motionGraphicsSettings', CfnChannel_MotionGraphicsSettingsPropertyValidator)(properties.motionGraphicsSettings));
    return errors.wrap('supplied properties not correct for "MotionGraphicsConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `MotionGraphicsConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnChannelMotionGraphicsConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MotionGraphicsConfigurationPropertyValidator(properties).assertSuccess();
    return {
        MotionGraphicsInsertion: cdk.stringToCloudFormation(properties.motionGraphicsInsertion),
        MotionGraphicsSettings: cfnChannelMotionGraphicsSettingsPropertyToCloudFormation(properties.motionGraphicsSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelMotionGraphicsConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('motionGraphicsInsertion', 'MotionGraphicsInsertion', properties.MotionGraphicsInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.MotionGraphicsInsertion) : undefined);
    ret.addPropertyResult('motionGraphicsSettings', 'MotionGraphicsSettings', properties.MotionGraphicsSettings != null ? CfnChannelMotionGraphicsSettingsPropertyFromCloudFormation(properties.MotionGraphicsSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MotionGraphicsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MotionGraphicsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MotionGraphicsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('htmlMotionGraphicsSettings', CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator)(properties.htmlMotionGraphicsSettings));
    return errors.wrap('supplied properties not correct for "MotionGraphicsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsSettings` resource
 *
 * @param properties - the TypeScript properties of a `MotionGraphicsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMotionGraphicsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MotionGraphicsSettingsPropertyValidator(properties).assertSuccess();
    return {
        HtmlMotionGraphicsSettings: cfnChannelHtmlMotionGraphicsSettingsPropertyToCloudFormation(properties.htmlMotionGraphicsSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelMotionGraphicsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('htmlMotionGraphicsSettings', 'HtmlMotionGraphicsSettings', properties.HtmlMotionGraphicsSettings != null ? CfnChannelHtmlMotionGraphicsSettingsPropertyFromCloudFormation(properties.HtmlMotionGraphicsSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Mp2SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Mp2SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Mp2SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));
    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));
    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));
    return errors.wrap('supplied properties not correct for "Mp2SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mp2Settings` resource
 *
 * @param properties - the TypeScript properties of a `Mp2SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mp2Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMp2SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Mp2SettingsPropertyValidator(properties).assertSuccess();
    return {
        Bitrate: cdk.numberToCloudFormation(properties.bitrate),
        CodingMode: cdk.stringToCloudFormation(properties.codingMode),
        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),
    };
}
// @ts-ignore TS6133
function CfnChannelMp2SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);
    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);
    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Mpeg2FilterSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Mpeg2FilterSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Mpeg2FilterSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));
    return errors.wrap('supplied properties not correct for "Mpeg2FilterSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2FilterSettings` resource
 *
 * @param properties - the TypeScript properties of a `Mpeg2FilterSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2FilterSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMpeg2FilterSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Mpeg2FilterSettingsPropertyValidator(properties).assertSuccess();
    return {
        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelMpeg2FilterSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Mpeg2SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Mpeg2SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Mpeg2SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));
    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));
    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));
    errors.collect(cdk.propertyValidator('colorSpace', cdk.validateString)(properties.colorSpace));
    errors.collect(cdk.propertyValidator('displayAspectRatio', cdk.validateString)(properties.displayAspectRatio));
    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_Mpeg2FilterSettingsPropertyValidator)(properties.filterSettings));
    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));
    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));
    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));
    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));
    errors.collect(cdk.propertyValidator('gopNumBFrames', cdk.validateNumber)(properties.gopNumBFrames));
    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));
    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));
    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));
    errors.collect(cdk.propertyValidator('subgopLength', cdk.validateString)(properties.subgopLength));
    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));
    return errors.wrap('supplied properties not correct for "Mpeg2SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2Settings` resource
 *
 * @param properties - the TypeScript properties of a `Mpeg2SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMpeg2SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Mpeg2SettingsPropertyValidator(properties).assertSuccess();
    return {
        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),
        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),
        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),
        ColorSpace: cdk.stringToCloudFormation(properties.colorSpace),
        DisplayAspectRatio: cdk.stringToCloudFormation(properties.displayAspectRatio),
        FilterSettings: cfnChannelMpeg2FilterSettingsPropertyToCloudFormation(properties.filterSettings),
        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),
        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),
        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),
        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),
        GopNumBFrames: cdk.numberToCloudFormation(properties.gopNumBFrames),
        GopSize: cdk.numberToCloudFormation(properties.gopSize),
        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),
        ScanType: cdk.stringToCloudFormation(properties.scanType),
        SubgopLength: cdk.stringToCloudFormation(properties.subgopLength),
        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),
    };
}
// @ts-ignore TS6133
function CfnChannelMpeg2SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);
    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);
    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);
    ret.addPropertyResult('colorSpace', 'ColorSpace', properties.ColorSpace != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpace) : undefined);
    ret.addPropertyResult('displayAspectRatio', 'DisplayAspectRatio', properties.DisplayAspectRatio != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayAspectRatio) : undefined);
    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelMpeg2FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);
    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);
    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);
    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);
    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);
    ret.addPropertyResult('gopNumBFrames', 'GopNumBFrames', properties.GopNumBFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopNumBFrames) : undefined);
    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);
    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);
    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);
    ret.addPropertyResult('subgopLength', 'SubgopLength', properties.SubgopLength != null ? cfn_parse.FromCloudFormation.getString(properties.SubgopLength) : undefined);
    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MsSmoothGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MsSmoothGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MsSmoothGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('acquisitionPointId', cdk.validateString)(properties.acquisitionPointId));
    errors.collect(cdk.propertyValidator('audioOnlyTimecodeControl', cdk.validateString)(properties.audioOnlyTimecodeControl));
    errors.collect(cdk.propertyValidator('certificateMode', cdk.validateString)(properties.certificateMode));
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('eventId', cdk.validateString)(properties.eventId));
    errors.collect(cdk.propertyValidator('eventIdMode', cdk.validateString)(properties.eventIdMode));
    errors.collect(cdk.propertyValidator('eventStopBehavior', cdk.validateString)(properties.eventStopBehavior));
    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));
    errors.collect(cdk.propertyValidator('fragmentLength', cdk.validateNumber)(properties.fragmentLength));
    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    errors.collect(cdk.propertyValidator('segmentationMode', cdk.validateString)(properties.segmentationMode));
    errors.collect(cdk.propertyValidator('sendDelayMs', cdk.validateNumber)(properties.sendDelayMs));
    errors.collect(cdk.propertyValidator('sparseTrackType', cdk.validateString)(properties.sparseTrackType));
    errors.collect(cdk.propertyValidator('streamManifestBehavior', cdk.validateString)(properties.streamManifestBehavior));
    errors.collect(cdk.propertyValidator('timestampOffset', cdk.validateString)(properties.timestampOffset));
    errors.collect(cdk.propertyValidator('timestampOffsetMode', cdk.validateString)(properties.timestampOffsetMode));
    return errors.wrap('supplied properties not correct for "MsSmoothGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `MsSmoothGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMsSmoothGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MsSmoothGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        AcquisitionPointId: cdk.stringToCloudFormation(properties.acquisitionPointId),
        AudioOnlyTimecodeControl: cdk.stringToCloudFormation(properties.audioOnlyTimecodeControl),
        CertificateMode: cdk.stringToCloudFormation(properties.certificateMode),
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        EventId: cdk.stringToCloudFormation(properties.eventId),
        EventIdMode: cdk.stringToCloudFormation(properties.eventIdMode),
        EventStopBehavior: cdk.stringToCloudFormation(properties.eventStopBehavior),
        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),
        FragmentLength: cdk.numberToCloudFormation(properties.fragmentLength),
        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
        SegmentationMode: cdk.stringToCloudFormation(properties.segmentationMode),
        SendDelayMs: cdk.numberToCloudFormation(properties.sendDelayMs),
        SparseTrackType: cdk.stringToCloudFormation(properties.sparseTrackType),
        StreamManifestBehavior: cdk.stringToCloudFormation(properties.streamManifestBehavior),
        TimestampOffset: cdk.stringToCloudFormation(properties.timestampOffset),
        TimestampOffsetMode: cdk.stringToCloudFormation(properties.timestampOffsetMode),
    };
}
// @ts-ignore TS6133
function CfnChannelMsSmoothGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('acquisitionPointId', 'AcquisitionPointId', properties.AcquisitionPointId != null ? cfn_parse.FromCloudFormation.getString(properties.AcquisitionPointId) : undefined);
    ret.addPropertyResult('audioOnlyTimecodeControl', 'AudioOnlyTimecodeControl', properties.AudioOnlyTimecodeControl != null ? cfn_parse.FromCloudFormation.getString(properties.AudioOnlyTimecodeControl) : undefined);
    ret.addPropertyResult('certificateMode', 'CertificateMode', properties.CertificateMode != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateMode) : undefined);
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('eventId', 'EventId', properties.EventId != null ? cfn_parse.FromCloudFormation.getString(properties.EventId) : undefined);
    ret.addPropertyResult('eventIdMode', 'EventIdMode', properties.EventIdMode != null ? cfn_parse.FromCloudFormation.getString(properties.EventIdMode) : undefined);
    ret.addPropertyResult('eventStopBehavior', 'EventStopBehavior', properties.EventStopBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.EventStopBehavior) : undefined);
    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);
    ret.addPropertyResult('fragmentLength', 'FragmentLength', properties.FragmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.FragmentLength) : undefined);
    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addPropertyResult('segmentationMode', 'SegmentationMode', properties.SegmentationMode != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMode) : undefined);
    ret.addPropertyResult('sendDelayMs', 'SendDelayMs', properties.SendDelayMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.SendDelayMs) : undefined);
    ret.addPropertyResult('sparseTrackType', 'SparseTrackType', properties.SparseTrackType != null ? cfn_parse.FromCloudFormation.getString(properties.SparseTrackType) : undefined);
    ret.addPropertyResult('streamManifestBehavior', 'StreamManifestBehavior', properties.StreamManifestBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.StreamManifestBehavior) : undefined);
    ret.addPropertyResult('timestampOffset', 'TimestampOffset', properties.TimestampOffset != null ? cfn_parse.FromCloudFormation.getString(properties.TimestampOffset) : undefined);
    ret.addPropertyResult('timestampOffsetMode', 'TimestampOffsetMode', properties.TimestampOffsetMode != null ? cfn_parse.FromCloudFormation.getString(properties.TimestampOffsetMode) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MsSmoothOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MsSmoothOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MsSmoothOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('h265PackagingType', cdk.validateString)(properties.h265PackagingType));
    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));
    return errors.wrap('supplied properties not correct for "MsSmoothOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `MsSmoothOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMsSmoothOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MsSmoothOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        H265PackagingType: cdk.stringToCloudFormation(properties.h265PackagingType),
        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),
    };
}
// @ts-ignore TS6133
function CfnChannelMsSmoothOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('h265PackagingType', 'H265PackagingType', properties.H265PackagingType != null ? cfn_parse.FromCloudFormation.getString(properties.H265PackagingType) : undefined);
    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MultiplexGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MultiplexGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MultiplexGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "MultiplexGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `MultiplexGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMultiplexGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MultiplexGroupSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelMultiplexGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MultiplexOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MultiplexOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MultiplexOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    return errors.wrap('supplied properties not correct for "MultiplexOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `MultiplexOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMultiplexOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MultiplexOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
    };
}
// @ts-ignore TS6133
function CfnChannelMultiplexOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MultiplexProgramChannelDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `MultiplexProgramChannelDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('multiplexId', cdk.validateString)(properties.multiplexId));
    errors.collect(cdk.propertyValidator('programName', cdk.validateString)(properties.programName));
    return errors.wrap('supplied properties not correct for "MultiplexProgramChannelDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `MultiplexProgramChannelDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelMultiplexProgramChannelDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        MultiplexId: cdk.stringToCloudFormation(properties.multiplexId),
        ProgramName: cdk.stringToCloudFormation(properties.programName),
    };
}
// @ts-ignore TS6133
function CfnChannelMultiplexProgramChannelDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('multiplexId', 'MultiplexId', properties.MultiplexId != null ? cfn_parse.FromCloudFormation.getString(properties.MultiplexId) : undefined);
    ret.addPropertyResult('programName', 'ProgramName', properties.ProgramName != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramName) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `NetworkInputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkInputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_NetworkInputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('hlsInputSettings', CfnChannel_HlsInputSettingsPropertyValidator)(properties.hlsInputSettings));
    errors.collect(cdk.propertyValidator('serverValidation', cdk.validateString)(properties.serverValidation));
    return errors.wrap('supplied properties not correct for "NetworkInputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NetworkInputSettings` resource
 *
 * @param properties - the TypeScript properties of a `NetworkInputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NetworkInputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelNetworkInputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_NetworkInputSettingsPropertyValidator(properties).assertSuccess();
    return {
        HlsInputSettings: cfnChannelHlsInputSettingsPropertyToCloudFormation(properties.hlsInputSettings),
        ServerValidation: cdk.stringToCloudFormation(properties.serverValidation),
    };
}
// @ts-ignore TS6133
function CfnChannelNetworkInputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('hlsInputSettings', 'HlsInputSettings', properties.HlsInputSettings != null ? CfnChannelHlsInputSettingsPropertyFromCloudFormation(properties.HlsInputSettings) : undefined);
    ret.addPropertyResult('serverValidation', 'ServerValidation', properties.ServerValidation != null ? cfn_parse.FromCloudFormation.getString(properties.ServerValidation) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `NielsenCBETProperty`
 *
 * @param properties - the TypeScript properties of a `NielsenCBETProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_NielsenCBETPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cbetCheckDigitString', cdk.validateString)(properties.cbetCheckDigitString));
    errors.collect(cdk.propertyValidator('cbetStepaside', cdk.validateString)(properties.cbetStepaside));
    errors.collect(cdk.propertyValidator('csid', cdk.validateString)(properties.csid));
    return errors.wrap('supplied properties not correct for "NielsenCBETProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenCBET` resource
 *
 * @param properties - the TypeScript properties of a `NielsenCBETProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenCBET` resource.
 */
// @ts-ignore TS6133
function cfnChannelNielsenCBETPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_NielsenCBETPropertyValidator(properties).assertSuccess();
    return {
        CbetCheckDigitString: cdk.stringToCloudFormation(properties.cbetCheckDigitString),
        CbetStepaside: cdk.stringToCloudFormation(properties.cbetStepaside),
        Csid: cdk.stringToCloudFormation(properties.csid),
    };
}
// @ts-ignore TS6133
function CfnChannelNielsenCBETPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cbetCheckDigitString', 'CbetCheckDigitString', properties.CbetCheckDigitString != null ? cfn_parse.FromCloudFormation.getString(properties.CbetCheckDigitString) : undefined);
    ret.addPropertyResult('cbetStepaside', 'CbetStepaside', properties.CbetStepaside != null ? cfn_parse.FromCloudFormation.getString(properties.CbetStepaside) : undefined);
    ret.addPropertyResult('csid', 'Csid', properties.Csid != null ? cfn_parse.FromCloudFormation.getString(properties.Csid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `NielsenConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `NielsenConfigurationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_NielsenConfigurationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('distributorId', cdk.validateString)(properties.distributorId));
    errors.collect(cdk.propertyValidator('nielsenPcmToId3Tagging', cdk.validateString)(properties.nielsenPcmToId3Tagging));
    return errors.wrap('supplied properties not correct for "NielsenConfigurationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `NielsenConfigurationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenConfiguration` resource.
 */
// @ts-ignore TS6133
function cfnChannelNielsenConfigurationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_NielsenConfigurationPropertyValidator(properties).assertSuccess();
    return {
        DistributorId: cdk.stringToCloudFormation(properties.distributorId),
        NielsenPcmToId3Tagging: cdk.stringToCloudFormation(properties.nielsenPcmToId3Tagging),
    };
}
// @ts-ignore TS6133
function CfnChannelNielsenConfigurationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('distributorId', 'DistributorId', properties.DistributorId != null ? cfn_parse.FromCloudFormation.getString(properties.DistributorId) : undefined);
    ret.addPropertyResult('nielsenPcmToId3Tagging', 'NielsenPcmToId3Tagging', properties.NielsenPcmToId3Tagging != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenPcmToId3Tagging) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `NielsenNaesIiNwProperty`
 *
 * @param properties - the TypeScript properties of a `NielsenNaesIiNwProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_NielsenNaesIiNwPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('checkDigitString', cdk.validateString)(properties.checkDigitString));
    errors.collect(cdk.propertyValidator('sid', cdk.validateNumber)(properties.sid));
    return errors.wrap('supplied properties not correct for "NielsenNaesIiNwProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenNaesIiNw` resource
 *
 * @param properties - the TypeScript properties of a `NielsenNaesIiNwProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenNaesIiNw` resource.
 */
// @ts-ignore TS6133
function cfnChannelNielsenNaesIiNwPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_NielsenNaesIiNwPropertyValidator(properties).assertSuccess();
    return {
        CheckDigitString: cdk.stringToCloudFormation(properties.checkDigitString),
        Sid: cdk.numberToCloudFormation(properties.sid),
    };
}
// @ts-ignore TS6133
function CfnChannelNielsenNaesIiNwPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('checkDigitString', 'CheckDigitString', properties.CheckDigitString != null ? cfn_parse.FromCloudFormation.getString(properties.CheckDigitString) : undefined);
    ret.addPropertyResult('sid', 'Sid', properties.Sid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Sid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `NielsenWatermarksSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `NielsenWatermarksSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_NielsenWatermarksSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('nielsenCbetSettings', CfnChannel_NielsenCBETPropertyValidator)(properties.nielsenCbetSettings));
    errors.collect(cdk.propertyValidator('nielsenDistributionType', cdk.validateString)(properties.nielsenDistributionType));
    errors.collect(cdk.propertyValidator('nielsenNaesIiNwSettings', CfnChannel_NielsenNaesIiNwPropertyValidator)(properties.nielsenNaesIiNwSettings));
    return errors.wrap('supplied properties not correct for "NielsenWatermarksSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenWatermarksSettings` resource
 *
 * @param properties - the TypeScript properties of a `NielsenWatermarksSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenWatermarksSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelNielsenWatermarksSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_NielsenWatermarksSettingsPropertyValidator(properties).assertSuccess();
    return {
        NielsenCbetSettings: cfnChannelNielsenCBETPropertyToCloudFormation(properties.nielsenCbetSettings),
        NielsenDistributionType: cdk.stringToCloudFormation(properties.nielsenDistributionType),
        NielsenNaesIiNwSettings: cfnChannelNielsenNaesIiNwPropertyToCloudFormation(properties.nielsenNaesIiNwSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelNielsenWatermarksSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('nielsenCbetSettings', 'NielsenCbetSettings', properties.NielsenCbetSettings != null ? CfnChannelNielsenCBETPropertyFromCloudFormation(properties.NielsenCbetSettings) : undefined);
    ret.addPropertyResult('nielsenDistributionType', 'NielsenDistributionType', properties.NielsenDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenDistributionType) : undefined);
    ret.addPropertyResult('nielsenNaesIiNwSettings', 'NielsenNaesIiNwSettings', properties.NielsenNaesIiNwSettings != null ? CfnChannelNielsenNaesIiNwPropertyFromCloudFormation(properties.NielsenNaesIiNwSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputProperty`
 *
 * @param properties - the TypeScript properties of a `OutputProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioDescriptionNames', cdk.listValidator(cdk.validateString))(properties.audioDescriptionNames));
    errors.collect(cdk.propertyValidator('captionDescriptionNames', cdk.listValidator(cdk.validateString))(properties.captionDescriptionNames));
    errors.collect(cdk.propertyValidator('outputName', cdk.validateString)(properties.outputName));
    errors.collect(cdk.propertyValidator('outputSettings', CfnChannel_OutputSettingsPropertyValidator)(properties.outputSettings));
    errors.collect(cdk.propertyValidator('videoDescriptionName', cdk.validateString)(properties.videoDescriptionName));
    return errors.wrap('supplied properties not correct for "OutputProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Output` resource
 *
 * @param properties - the TypeScript properties of a `OutputProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Output` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputPropertyValidator(properties).assertSuccess();
    return {
        AudioDescriptionNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.audioDescriptionNames),
        CaptionDescriptionNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.captionDescriptionNames),
        OutputName: cdk.stringToCloudFormation(properties.outputName),
        OutputSettings: cfnChannelOutputSettingsPropertyToCloudFormation(properties.outputSettings),
        VideoDescriptionName: cdk.stringToCloudFormation(properties.videoDescriptionName),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioDescriptionNames', 'AudioDescriptionNames', properties.AudioDescriptionNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AudioDescriptionNames) : undefined);
    ret.addPropertyResult('captionDescriptionNames', 'CaptionDescriptionNames', properties.CaptionDescriptionNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CaptionDescriptionNames) : undefined);
    ret.addPropertyResult('outputName', 'OutputName', properties.OutputName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputName) : undefined);
    ret.addPropertyResult('outputSettings', 'OutputSettings', properties.OutputSettings != null ? CfnChannelOutputSettingsPropertyFromCloudFormation(properties.OutputSettings) : undefined);
    ret.addPropertyResult('videoDescriptionName', 'VideoDescriptionName', properties.VideoDescriptionName != null ? cfn_parse.FromCloudFormation.getString(properties.VideoDescriptionName) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputDestinationProperty`
 *
 * @param properties - the TypeScript properties of a `OutputDestinationProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputDestinationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('mediaPackageSettings', cdk.listValidator(CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator))(properties.mediaPackageSettings));
    errors.collect(cdk.propertyValidator('multiplexSettings', CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator)(properties.multiplexSettings));
    errors.collect(cdk.propertyValidator('settings', cdk.listValidator(CfnChannel_OutputDestinationSettingsPropertyValidator))(properties.settings));
    return errors.wrap('supplied properties not correct for "OutputDestinationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestination` resource
 *
 * @param properties - the TypeScript properties of a `OutputDestinationProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestination` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputDestinationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputDestinationPropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
        MediaPackageSettings: cdk.listMapper(cfnChannelMediaPackageOutputDestinationSettingsPropertyToCloudFormation)(properties.mediaPackageSettings),
        MultiplexSettings: cfnChannelMultiplexProgramChannelDestinationSettingsPropertyToCloudFormation(properties.multiplexSettings),
        Settings: cdk.listMapper(cfnChannelOutputDestinationSettingsPropertyToCloudFormation)(properties.settings),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputDestinationPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);
    ret.addPropertyResult('mediaPackageSettings', 'MediaPackageSettings', properties.MediaPackageSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelMediaPackageOutputDestinationSettingsPropertyFromCloudFormation)(properties.MediaPackageSettings) : undefined);
    ret.addPropertyResult('multiplexSettings', 'MultiplexSettings', properties.MultiplexSettings != null ? CfnChannelMultiplexProgramChannelDestinationSettingsPropertyFromCloudFormation(properties.MultiplexSettings) : undefined);
    ret.addPropertyResult('settings', 'Settings', properties.Settings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputDestinationSettingsPropertyFromCloudFormation)(properties.Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `OutputDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));
    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));
    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));
    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));
    return errors.wrap('supplied properties not correct for "OutputDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `OutputDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),
        StreamName: cdk.stringToCloudFormation(properties.streamName),
        Url: cdk.stringToCloudFormation(properties.url),
        Username: cdk.stringToCloudFormation(properties.username),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);
    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);
    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);
    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputGroupProperty`
 *
 * @param properties - the TypeScript properties of a `OutputGroupProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputGroupPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('outputGroupSettings', CfnChannel_OutputGroupSettingsPropertyValidator)(properties.outputGroupSettings));
    errors.collect(cdk.propertyValidator('outputs', cdk.listValidator(CfnChannel_OutputPropertyValidator))(properties.outputs));
    return errors.wrap('supplied properties not correct for "OutputGroupProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroup` resource
 *
 * @param properties - the TypeScript properties of a `OutputGroupProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroup` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputGroupPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputGroupPropertyValidator(properties).assertSuccess();
    return {
        Name: cdk.stringToCloudFormation(properties.name),
        OutputGroupSettings: cfnChannelOutputGroupSettingsPropertyToCloudFormation(properties.outputGroupSettings),
        Outputs: cdk.listMapper(cfnChannelOutputPropertyToCloudFormation)(properties.outputs),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputGroupPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('outputGroupSettings', 'OutputGroupSettings', properties.OutputGroupSettings != null ? CfnChannelOutputGroupSettingsPropertyFromCloudFormation(properties.OutputGroupSettings) : undefined);
    ret.addPropertyResult('outputs', 'Outputs', properties.Outputs != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputPropertyFromCloudFormation)(properties.Outputs) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `OutputGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('archiveGroupSettings', CfnChannel_ArchiveGroupSettingsPropertyValidator)(properties.archiveGroupSettings));
    errors.collect(cdk.propertyValidator('frameCaptureGroupSettings', CfnChannel_FrameCaptureGroupSettingsPropertyValidator)(properties.frameCaptureGroupSettings));
    errors.collect(cdk.propertyValidator('hlsGroupSettings', CfnChannel_HlsGroupSettingsPropertyValidator)(properties.hlsGroupSettings));
    errors.collect(cdk.propertyValidator('mediaPackageGroupSettings', CfnChannel_MediaPackageGroupSettingsPropertyValidator)(properties.mediaPackageGroupSettings));
    errors.collect(cdk.propertyValidator('msSmoothGroupSettings', CfnChannel_MsSmoothGroupSettingsPropertyValidator)(properties.msSmoothGroupSettings));
    errors.collect(cdk.propertyValidator('multiplexGroupSettings', CfnChannel_MultiplexGroupSettingsPropertyValidator)(properties.multiplexGroupSettings));
    errors.collect(cdk.propertyValidator('rtmpGroupSettings', CfnChannel_RtmpGroupSettingsPropertyValidator)(properties.rtmpGroupSettings));
    errors.collect(cdk.propertyValidator('udpGroupSettings', CfnChannel_UdpGroupSettingsPropertyValidator)(properties.udpGroupSettings));
    return errors.wrap('supplied properties not correct for "OutputGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `OutputGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        ArchiveGroupSettings: cfnChannelArchiveGroupSettingsPropertyToCloudFormation(properties.archiveGroupSettings),
        FrameCaptureGroupSettings: cfnChannelFrameCaptureGroupSettingsPropertyToCloudFormation(properties.frameCaptureGroupSettings),
        HlsGroupSettings: cfnChannelHlsGroupSettingsPropertyToCloudFormation(properties.hlsGroupSettings),
        MediaPackageGroupSettings: cfnChannelMediaPackageGroupSettingsPropertyToCloudFormation(properties.mediaPackageGroupSettings),
        MsSmoothGroupSettings: cfnChannelMsSmoothGroupSettingsPropertyToCloudFormation(properties.msSmoothGroupSettings),
        MultiplexGroupSettings: cfnChannelMultiplexGroupSettingsPropertyToCloudFormation(properties.multiplexGroupSettings),
        RtmpGroupSettings: cfnChannelRtmpGroupSettingsPropertyToCloudFormation(properties.rtmpGroupSettings),
        UdpGroupSettings: cfnChannelUdpGroupSettingsPropertyToCloudFormation(properties.udpGroupSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('archiveGroupSettings', 'ArchiveGroupSettings', properties.ArchiveGroupSettings != null ? CfnChannelArchiveGroupSettingsPropertyFromCloudFormation(properties.ArchiveGroupSettings) : undefined);
    ret.addPropertyResult('frameCaptureGroupSettings', 'FrameCaptureGroupSettings', properties.FrameCaptureGroupSettings != null ? CfnChannelFrameCaptureGroupSettingsPropertyFromCloudFormation(properties.FrameCaptureGroupSettings) : undefined);
    ret.addPropertyResult('hlsGroupSettings', 'HlsGroupSettings', properties.HlsGroupSettings != null ? CfnChannelHlsGroupSettingsPropertyFromCloudFormation(properties.HlsGroupSettings) : undefined);
    ret.addPropertyResult('mediaPackageGroupSettings', 'MediaPackageGroupSettings', properties.MediaPackageGroupSettings != null ? CfnChannelMediaPackageGroupSettingsPropertyFromCloudFormation(properties.MediaPackageGroupSettings) : undefined);
    ret.addPropertyResult('msSmoothGroupSettings', 'MsSmoothGroupSettings', properties.MsSmoothGroupSettings != null ? CfnChannelMsSmoothGroupSettingsPropertyFromCloudFormation(properties.MsSmoothGroupSettings) : undefined);
    ret.addPropertyResult('multiplexGroupSettings', 'MultiplexGroupSettings', properties.MultiplexGroupSettings != null ? CfnChannelMultiplexGroupSettingsPropertyFromCloudFormation(properties.MultiplexGroupSettings) : undefined);
    ret.addPropertyResult('rtmpGroupSettings', 'RtmpGroupSettings', properties.RtmpGroupSettings != null ? CfnChannelRtmpGroupSettingsPropertyFromCloudFormation(properties.RtmpGroupSettings) : undefined);
    ret.addPropertyResult('udpGroupSettings', 'UdpGroupSettings', properties.UdpGroupSettings != null ? CfnChannelUdpGroupSettingsPropertyFromCloudFormation(properties.UdpGroupSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputLocationRefProperty`
 *
 * @param properties - the TypeScript properties of a `OutputLocationRefProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputLocationRefPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinationRefId', cdk.validateString)(properties.destinationRefId));
    return errors.wrap('supplied properties not correct for "OutputLocationRefProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputLocationRef` resource
 *
 * @param properties - the TypeScript properties of a `OutputLocationRefProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputLocationRef` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputLocationRefPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputLocationRefPropertyValidator(properties).assertSuccess();
    return {
        DestinationRefId: cdk.stringToCloudFormation(properties.destinationRefId),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputLocationRefPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinationRefId', 'DestinationRefId', properties.DestinationRefId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationRefId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `OutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `OutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_OutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('archiveOutputSettings', CfnChannel_ArchiveOutputSettingsPropertyValidator)(properties.archiveOutputSettings));
    errors.collect(cdk.propertyValidator('frameCaptureOutputSettings', CfnChannel_FrameCaptureOutputSettingsPropertyValidator)(properties.frameCaptureOutputSettings));
    errors.collect(cdk.propertyValidator('hlsOutputSettings', CfnChannel_HlsOutputSettingsPropertyValidator)(properties.hlsOutputSettings));
    errors.collect(cdk.propertyValidator('mediaPackageOutputSettings', CfnChannel_MediaPackageOutputSettingsPropertyValidator)(properties.mediaPackageOutputSettings));
    errors.collect(cdk.propertyValidator('msSmoothOutputSettings', CfnChannel_MsSmoothOutputSettingsPropertyValidator)(properties.msSmoothOutputSettings));
    errors.collect(cdk.propertyValidator('multiplexOutputSettings', CfnChannel_MultiplexOutputSettingsPropertyValidator)(properties.multiplexOutputSettings));
    errors.collect(cdk.propertyValidator('rtmpOutputSettings', CfnChannel_RtmpOutputSettingsPropertyValidator)(properties.rtmpOutputSettings));
    errors.collect(cdk.propertyValidator('udpOutputSettings', CfnChannel_UdpOutputSettingsPropertyValidator)(properties.udpOutputSettings));
    return errors.wrap('supplied properties not correct for "OutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `OutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_OutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        ArchiveOutputSettings: cfnChannelArchiveOutputSettingsPropertyToCloudFormation(properties.archiveOutputSettings),
        FrameCaptureOutputSettings: cfnChannelFrameCaptureOutputSettingsPropertyToCloudFormation(properties.frameCaptureOutputSettings),
        HlsOutputSettings: cfnChannelHlsOutputSettingsPropertyToCloudFormation(properties.hlsOutputSettings),
        MediaPackageOutputSettings: cfnChannelMediaPackageOutputSettingsPropertyToCloudFormation(properties.mediaPackageOutputSettings),
        MsSmoothOutputSettings: cfnChannelMsSmoothOutputSettingsPropertyToCloudFormation(properties.msSmoothOutputSettings),
        MultiplexOutputSettings: cfnChannelMultiplexOutputSettingsPropertyToCloudFormation(properties.multiplexOutputSettings),
        RtmpOutputSettings: cfnChannelRtmpOutputSettingsPropertyToCloudFormation(properties.rtmpOutputSettings),
        UdpOutputSettings: cfnChannelUdpOutputSettingsPropertyToCloudFormation(properties.udpOutputSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('archiveOutputSettings', 'ArchiveOutputSettings', properties.ArchiveOutputSettings != null ? CfnChannelArchiveOutputSettingsPropertyFromCloudFormation(properties.ArchiveOutputSettings) : undefined);
    ret.addPropertyResult('frameCaptureOutputSettings', 'FrameCaptureOutputSettings', properties.FrameCaptureOutputSettings != null ? CfnChannelFrameCaptureOutputSettingsPropertyFromCloudFormation(properties.FrameCaptureOutputSettings) : undefined);
    ret.addPropertyResult('hlsOutputSettings', 'HlsOutputSettings', properties.HlsOutputSettings != null ? CfnChannelHlsOutputSettingsPropertyFromCloudFormation(properties.HlsOutputSettings) : undefined);
    ret.addPropertyResult('mediaPackageOutputSettings', 'MediaPackageOutputSettings', properties.MediaPackageOutputSettings != null ? CfnChannelMediaPackageOutputSettingsPropertyFromCloudFormation(properties.MediaPackageOutputSettings) : undefined);
    ret.addPropertyResult('msSmoothOutputSettings', 'MsSmoothOutputSettings', properties.MsSmoothOutputSettings != null ? CfnChannelMsSmoothOutputSettingsPropertyFromCloudFormation(properties.MsSmoothOutputSettings) : undefined);
    ret.addPropertyResult('multiplexOutputSettings', 'MultiplexOutputSettings', properties.MultiplexOutputSettings != null ? CfnChannelMultiplexOutputSettingsPropertyFromCloudFormation(properties.MultiplexOutputSettings) : undefined);
    ret.addPropertyResult('rtmpOutputSettings', 'RtmpOutputSettings', properties.RtmpOutputSettings != null ? CfnChannelRtmpOutputSettingsPropertyFromCloudFormation(properties.RtmpOutputSettings) : undefined);
    ret.addPropertyResult('udpOutputSettings', 'UdpOutputSettings', properties.UdpOutputSettings != null ? CfnChannelUdpOutputSettingsPropertyFromCloudFormation(properties.UdpOutputSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `PassThroughSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `PassThroughSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_PassThroughSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "PassThroughSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.PassThroughSettings` resource
 *
 * @param properties - the TypeScript properties of a `PassThroughSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.PassThroughSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelPassThroughSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_PassThroughSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelPassThroughSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RawSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RawSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_RawSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "RawSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RawSettings` resource
 *
 * @param properties - the TypeScript properties of a `RawSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RawSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRawSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_RawSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelRawSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Rec601SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Rec601SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Rec601SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "Rec601SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec601Settings` resource
 *
 * @param properties - the TypeScript properties of a `Rec601SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec601Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRec601SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Rec601SettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelRec601SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Rec709SettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Rec709SettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Rec709SettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "Rec709SettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec709Settings` resource
 *
 * @param properties - the TypeScript properties of a `Rec709SettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec709Settings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRec709SettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Rec709SettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelRec709SettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RemixSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RemixSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_RemixSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('channelMappings', cdk.listValidator(CfnChannel_AudioChannelMappingPropertyValidator))(properties.channelMappings));
    errors.collect(cdk.propertyValidator('channelsIn', cdk.validateNumber)(properties.channelsIn));
    errors.collect(cdk.propertyValidator('channelsOut', cdk.validateNumber)(properties.channelsOut));
    return errors.wrap('supplied properties not correct for "RemixSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RemixSettings` resource
 *
 * @param properties - the TypeScript properties of a `RemixSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RemixSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRemixSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_RemixSettingsPropertyValidator(properties).assertSuccess();
    return {
        ChannelMappings: cdk.listMapper(cfnChannelAudioChannelMappingPropertyToCloudFormation)(properties.channelMappings),
        ChannelsIn: cdk.numberToCloudFormation(properties.channelsIn),
        ChannelsOut: cdk.numberToCloudFormation(properties.channelsOut),
    };
}
// @ts-ignore TS6133
function CfnChannelRemixSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('channelMappings', 'ChannelMappings', properties.ChannelMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioChannelMappingPropertyFromCloudFormation)(properties.ChannelMappings) : undefined);
    ret.addPropertyResult('channelsIn', 'ChannelsIn', properties.ChannelsIn != null ? cfn_parse.FromCloudFormation.getNumber(properties.ChannelsIn) : undefined);
    ret.addPropertyResult('channelsOut', 'ChannelsOut', properties.ChannelsOut != null ? cfn_parse.FromCloudFormation.getNumber(properties.ChannelsOut) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RtmpCaptionInfoDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RtmpCaptionInfoDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "RtmpCaptionInfoDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `RtmpCaptionInfoDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRtmpCaptionInfoDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelRtmpCaptionInfoDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RtmpGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RtmpGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_RtmpGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adMarkers', cdk.listValidator(cdk.validateString))(properties.adMarkers));
    errors.collect(cdk.propertyValidator('authenticationScheme', cdk.validateString)(properties.authenticationScheme));
    errors.collect(cdk.propertyValidator('cacheFullBehavior', cdk.validateString)(properties.cacheFullBehavior));
    errors.collect(cdk.propertyValidator('cacheLength', cdk.validateNumber)(properties.cacheLength));
    errors.collect(cdk.propertyValidator('captionData', cdk.validateString)(properties.captionData));
    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));
    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));
    return errors.wrap('supplied properties not correct for "RtmpGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `RtmpGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRtmpGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_RtmpGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        AdMarkers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adMarkers),
        AuthenticationScheme: cdk.stringToCloudFormation(properties.authenticationScheme),
        CacheFullBehavior: cdk.stringToCloudFormation(properties.cacheFullBehavior),
        CacheLength: cdk.numberToCloudFormation(properties.cacheLength),
        CaptionData: cdk.stringToCloudFormation(properties.captionData),
        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),
        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),
    };
}
// @ts-ignore TS6133
function CfnChannelRtmpGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdMarkers) : undefined);
    ret.addPropertyResult('authenticationScheme', 'AuthenticationScheme', properties.AuthenticationScheme != null ? cfn_parse.FromCloudFormation.getString(properties.AuthenticationScheme) : undefined);
    ret.addPropertyResult('cacheFullBehavior', 'CacheFullBehavior', properties.CacheFullBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.CacheFullBehavior) : undefined);
    ret.addPropertyResult('cacheLength', 'CacheLength', properties.CacheLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheLength) : undefined);
    ret.addPropertyResult('captionData', 'CaptionData', properties.CaptionData != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionData) : undefined);
    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);
    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `RtmpOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RtmpOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_RtmpOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('certificateMode', cdk.validateString)(properties.certificateMode));
    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));
    return errors.wrap('supplied properties not correct for "RtmpOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `RtmpOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelRtmpOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_RtmpOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        CertificateMode: cdk.stringToCloudFormation(properties.certificateMode),
        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        NumRetries: cdk.numberToCloudFormation(properties.numRetries),
    };
}
// @ts-ignore TS6133
function CfnChannelRtmpOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('certificateMode', 'CertificateMode', properties.CertificateMode != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateMode) : undefined);
    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte20PlusEmbeddedDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Scte20PlusEmbeddedDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "Scte20PlusEmbeddedDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `Scte20PlusEmbeddedDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte20PlusEmbeddedDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelScte20PlusEmbeddedDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte20SourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Scte20SourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte20SourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('convert608To708', cdk.validateString)(properties.convert608To708));
    errors.collect(cdk.propertyValidator('source608ChannelNumber', cdk.validateNumber)(properties.source608ChannelNumber));
    return errors.wrap('supplied properties not correct for "Scte20SourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20SourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `Scte20SourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20SourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte20SourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte20SourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        Convert608To708: cdk.stringToCloudFormation(properties.convert608To708),
        Source608ChannelNumber: cdk.numberToCloudFormation(properties.source608ChannelNumber),
    };
}
// @ts-ignore TS6133
function CfnChannelScte20SourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('convert608To708', 'Convert608To708', properties.Convert608To708 != null ? cfn_parse.FromCloudFormation.getString(properties.Convert608To708) : undefined);
    ret.addPropertyResult('source608ChannelNumber', 'Source608ChannelNumber', properties.Source608ChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608ChannelNumber) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte27DestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Scte27DestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte27DestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "Scte27DestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27DestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `Scte27DestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27DestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte27DestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte27DestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelScte27DestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte27SourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `Scte27SourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte27SourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('ocrLanguage', cdk.validateString)(properties.ocrLanguage));
    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));
    return errors.wrap('supplied properties not correct for "Scte27SourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27SourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `Scte27SourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27SourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte27SourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte27SourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        OcrLanguage: cdk.stringToCloudFormation(properties.ocrLanguage),
        Pid: cdk.numberToCloudFormation(properties.pid),
    };
}
// @ts-ignore TS6133
function CfnChannelScte27SourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('ocrLanguage', 'OcrLanguage', properties.OcrLanguage != null ? cfn_parse.FromCloudFormation.getString(properties.OcrLanguage) : undefined);
    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte35SpliceInsertProperty`
 *
 * @param properties - the TypeScript properties of a `Scte35SpliceInsertProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte35SpliceInsertPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adAvailOffset', cdk.validateNumber)(properties.adAvailOffset));
    errors.collect(cdk.propertyValidator('noRegionalBlackoutFlag', cdk.validateString)(properties.noRegionalBlackoutFlag));
    errors.collect(cdk.propertyValidator('webDeliveryAllowedFlag', cdk.validateString)(properties.webDeliveryAllowedFlag));
    return errors.wrap('supplied properties not correct for "Scte35SpliceInsertProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35SpliceInsert` resource
 *
 * @param properties - the TypeScript properties of a `Scte35SpliceInsertProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35SpliceInsert` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte35SpliceInsertPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte35SpliceInsertPropertyValidator(properties).assertSuccess();
    return {
        AdAvailOffset: cdk.numberToCloudFormation(properties.adAvailOffset),
        NoRegionalBlackoutFlag: cdk.stringToCloudFormation(properties.noRegionalBlackoutFlag),
        WebDeliveryAllowedFlag: cdk.stringToCloudFormation(properties.webDeliveryAllowedFlag),
    };
}
// @ts-ignore TS6133
function CfnChannelScte35SpliceInsertPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adAvailOffset', 'AdAvailOffset', properties.AdAvailOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.AdAvailOffset) : undefined);
    ret.addPropertyResult('noRegionalBlackoutFlag', 'NoRegionalBlackoutFlag', properties.NoRegionalBlackoutFlag != null ? cfn_parse.FromCloudFormation.getString(properties.NoRegionalBlackoutFlag) : undefined);
    ret.addPropertyResult('webDeliveryAllowedFlag', 'WebDeliveryAllowedFlag', properties.WebDeliveryAllowedFlag != null ? cfn_parse.FromCloudFormation.getString(properties.WebDeliveryAllowedFlag) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `Scte35TimeSignalAposProperty`
 *
 * @param properties - the TypeScript properties of a `Scte35TimeSignalAposProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_Scte35TimeSignalAposPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('adAvailOffset', cdk.validateNumber)(properties.adAvailOffset));
    errors.collect(cdk.propertyValidator('noRegionalBlackoutFlag', cdk.validateString)(properties.noRegionalBlackoutFlag));
    errors.collect(cdk.propertyValidator('webDeliveryAllowedFlag', cdk.validateString)(properties.webDeliveryAllowedFlag));
    return errors.wrap('supplied properties not correct for "Scte35TimeSignalAposProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35TimeSignalApos` resource
 *
 * @param properties - the TypeScript properties of a `Scte35TimeSignalAposProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35TimeSignalApos` resource.
 */
// @ts-ignore TS6133
function cfnChannelScte35TimeSignalAposPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_Scte35TimeSignalAposPropertyValidator(properties).assertSuccess();
    return {
        AdAvailOffset: cdk.numberToCloudFormation(properties.adAvailOffset),
        NoRegionalBlackoutFlag: cdk.stringToCloudFormation(properties.noRegionalBlackoutFlag),
        WebDeliveryAllowedFlag: cdk.stringToCloudFormation(properties.webDeliveryAllowedFlag),
    };
}
// @ts-ignore TS6133
function CfnChannelScte35TimeSignalAposPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('adAvailOffset', 'AdAvailOffset', properties.AdAvailOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.AdAvailOffset) : undefined);
    ret.addPropertyResult('noRegionalBlackoutFlag', 'NoRegionalBlackoutFlag', properties.NoRegionalBlackoutFlag != null ? cfn_parse.FromCloudFormation.getString(properties.NoRegionalBlackoutFlag) : undefined);
    ret.addPropertyResult('webDeliveryAllowedFlag', 'WebDeliveryAllowedFlag', properties.WebDeliveryAllowedFlag != null ? cfn_parse.FromCloudFormation.getString(properties.WebDeliveryAllowedFlag) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `SmpteTtDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `SmpteTtDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_SmpteTtDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "SmpteTtDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.SmpteTtDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `SmpteTtDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.SmpteTtDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelSmpteTtDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_SmpteTtDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelSmpteTtDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `StandardHlsSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `StandardHlsSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_StandardHlsSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('audioRenditionSets', cdk.validateString)(properties.audioRenditionSets));
    errors.collect(cdk.propertyValidator('m3U8Settings', CfnChannel_M3u8SettingsPropertyValidator)(properties.m3U8Settings));
    return errors.wrap('supplied properties not correct for "StandardHlsSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StandardHlsSettings` resource
 *
 * @param properties - the TypeScript properties of a `StandardHlsSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StandardHlsSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelStandardHlsSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_StandardHlsSettingsPropertyValidator(properties).assertSuccess();
    return {
        AudioRenditionSets: cdk.stringToCloudFormation(properties.audioRenditionSets),
        M3u8Settings: cfnChannelM3u8SettingsPropertyToCloudFormation(properties.m3U8Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelStandardHlsSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('audioRenditionSets', 'AudioRenditionSets', properties.AudioRenditionSets != null ? cfn_parse.FromCloudFormation.getString(properties.AudioRenditionSets) : undefined);
    ret.addPropertyResult('m3U8Settings', 'M3u8Settings', properties.M3u8Settings != null ? CfnChannelM3u8SettingsPropertyFromCloudFormation(properties.M3u8Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `StaticKeySettingsProperty`
 *
 * @param properties - the TypeScript properties of a `StaticKeySettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_StaticKeySettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('keyProviderServer', CfnChannel_InputLocationPropertyValidator)(properties.keyProviderServer));
    errors.collect(cdk.propertyValidator('staticKeyValue', cdk.validateString)(properties.staticKeyValue));
    return errors.wrap('supplied properties not correct for "StaticKeySettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StaticKeySettings` resource
 *
 * @param properties - the TypeScript properties of a `StaticKeySettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StaticKeySettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelStaticKeySettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_StaticKeySettingsPropertyValidator(properties).assertSuccess();
    return {
        KeyProviderServer: cfnChannelInputLocationPropertyToCloudFormation(properties.keyProviderServer),
        StaticKeyValue: cdk.stringToCloudFormation(properties.staticKeyValue),
    };
}
// @ts-ignore TS6133
function CfnChannelStaticKeySettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('keyProviderServer', 'KeyProviderServer', properties.KeyProviderServer != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.KeyProviderServer) : undefined);
    ret.addPropertyResult('staticKeyValue', 'StaticKeyValue', properties.StaticKeyValue != null ? cfn_parse.FromCloudFormation.getString(properties.StaticKeyValue) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TeletextDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `TeletextDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_TeletextDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    return errors.wrap('supplied properties not correct for "TeletextDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `TeletextDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelTeletextDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_TeletextDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {};
}
// @ts-ignore TS6133
function CfnChannelTeletextDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TeletextSourceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `TeletextSourceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_TeletextSourceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('outputRectangle', CfnChannel_CaptionRectanglePropertyValidator)(properties.outputRectangle));
    errors.collect(cdk.propertyValidator('pageNumber', cdk.validateString)(properties.pageNumber));
    return errors.wrap('supplied properties not correct for "TeletextSourceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextSourceSettings` resource
 *
 * @param properties - the TypeScript properties of a `TeletextSourceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextSourceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelTeletextSourceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_TeletextSourceSettingsPropertyValidator(properties).assertSuccess();
    return {
        OutputRectangle: cfnChannelCaptionRectanglePropertyToCloudFormation(properties.outputRectangle),
        PageNumber: cdk.stringToCloudFormation(properties.pageNumber),
    };
}
// @ts-ignore TS6133
function CfnChannelTeletextSourceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('outputRectangle', 'OutputRectangle', properties.OutputRectangle != null ? CfnChannelCaptionRectanglePropertyFromCloudFormation(properties.OutputRectangle) : undefined);
    ret.addPropertyResult('pageNumber', 'PageNumber', properties.PageNumber != null ? cfn_parse.FromCloudFormation.getString(properties.PageNumber) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TemporalFilterSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `TemporalFilterSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_TemporalFilterSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('postFilterSharpening', cdk.validateString)(properties.postFilterSharpening));
    errors.collect(cdk.propertyValidator('strength', cdk.validateString)(properties.strength));
    return errors.wrap('supplied properties not correct for "TemporalFilterSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TemporalFilterSettings` resource
 *
 * @param properties - the TypeScript properties of a `TemporalFilterSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TemporalFilterSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_TemporalFilterSettingsPropertyValidator(properties).assertSuccess();
    return {
        PostFilterSharpening: cdk.stringToCloudFormation(properties.postFilterSharpening),
        Strength: cdk.stringToCloudFormation(properties.strength),
    };
}
// @ts-ignore TS6133
function CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('postFilterSharpening', 'PostFilterSharpening', properties.PostFilterSharpening != null ? cfn_parse.FromCloudFormation.getString(properties.PostFilterSharpening) : undefined);
    ret.addPropertyResult('strength', 'Strength', properties.Strength != null ? cfn_parse.FromCloudFormation.getString(properties.Strength) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TimecodeConfigProperty`
 *
 * @param properties - the TypeScript properties of a `TimecodeConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_TimecodeConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));
    errors.collect(cdk.propertyValidator('syncThreshold', cdk.validateNumber)(properties.syncThreshold));
    return errors.wrap('supplied properties not correct for "TimecodeConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TimecodeConfig` resource
 *
 * @param properties - the TypeScript properties of a `TimecodeConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TimecodeConfig` resource.
 */
// @ts-ignore TS6133
function cfnChannelTimecodeConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_TimecodeConfigPropertyValidator(properties).assertSuccess();
    return {
        Source: cdk.stringToCloudFormation(properties.source),
        SyncThreshold: cdk.numberToCloudFormation(properties.syncThreshold),
    };
}
// @ts-ignore TS6133
function CfnChannelTimecodeConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('source', 'Source', properties.Source != null ? cfn_parse.FromCloudFormation.getString(properties.Source) : undefined);
    ret.addPropertyResult('syncThreshold', 'SyncThreshold', properties.SyncThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.SyncThreshold) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TtmlDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `TtmlDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_TtmlDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));
    return errors.wrap('supplied properties not correct for "TtmlDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TtmlDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `TtmlDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TtmlDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelTtmlDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_TtmlDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        StyleControl: cdk.stringToCloudFormation(properties.styleControl),
    };
}
// @ts-ignore TS6133
function CfnChannelTtmlDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `UdpContainerSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `UdpContainerSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_UdpContainerSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('m2TsSettings', CfnChannel_M2tsSettingsPropertyValidator)(properties.m2TsSettings));
    return errors.wrap('supplied properties not correct for "UdpContainerSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpContainerSettings` resource
 *
 * @param properties - the TypeScript properties of a `UdpContainerSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpContainerSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelUdpContainerSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_UdpContainerSettingsPropertyValidator(properties).assertSuccess();
    return {
        M2tsSettings: cfnChannelM2tsSettingsPropertyToCloudFormation(properties.m2TsSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelUdpContainerSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('m2TsSettings', 'M2tsSettings', properties.M2tsSettings != null ? CfnChannelM2tsSettingsPropertyFromCloudFormation(properties.M2tsSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `UdpGroupSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `UdpGroupSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_UdpGroupSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));
    errors.collect(cdk.propertyValidator('timedMetadataId3Frame', cdk.validateString)(properties.timedMetadataId3Frame));
    errors.collect(cdk.propertyValidator('timedMetadataId3Period', cdk.validateNumber)(properties.timedMetadataId3Period));
    return errors.wrap('supplied properties not correct for "UdpGroupSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpGroupSettings` resource
 *
 * @param properties - the TypeScript properties of a `UdpGroupSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpGroupSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelUdpGroupSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_UdpGroupSettingsPropertyValidator(properties).assertSuccess();
    return {
        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),
        TimedMetadataId3Frame: cdk.stringToCloudFormation(properties.timedMetadataId3Frame),
        TimedMetadataId3Period: cdk.numberToCloudFormation(properties.timedMetadataId3Period),
    };
}
// @ts-ignore TS6133
function CfnChannelUdpGroupSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);
    ret.addPropertyResult('timedMetadataId3Frame', 'TimedMetadataId3Frame', properties.TimedMetadataId3Frame != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataId3Frame) : undefined);
    ret.addPropertyResult('timedMetadataId3Period', 'TimedMetadataId3Period', properties.TimedMetadataId3Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimedMetadataId3Period) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `UdpOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `UdpOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_UdpOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bufferMsec', cdk.validateNumber)(properties.bufferMsec));
    errors.collect(cdk.propertyValidator('containerSettings', CfnChannel_UdpContainerSettingsPropertyValidator)(properties.containerSettings));
    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));
    errors.collect(cdk.propertyValidator('fecOutputSettings', CfnChannel_FecOutputSettingsPropertyValidator)(properties.fecOutputSettings));
    return errors.wrap('supplied properties not correct for "UdpOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `UdpOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelUdpOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_UdpOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        BufferMsec: cdk.numberToCloudFormation(properties.bufferMsec),
        ContainerSettings: cfnChannelUdpContainerSettingsPropertyToCloudFormation(properties.containerSettings),
        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),
        FecOutputSettings: cfnChannelFecOutputSettingsPropertyToCloudFormation(properties.fecOutputSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelUdpOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bufferMsec', 'BufferMsec', properties.BufferMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufferMsec) : undefined);
    ret.addPropertyResult('containerSettings', 'ContainerSettings', properties.ContainerSettings != null ? CfnChannelUdpContainerSettingsPropertyFromCloudFormation(properties.ContainerSettings) : undefined);
    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);
    ret.addPropertyResult('fecOutputSettings', 'FecOutputSettings', properties.FecOutputSettings != null ? CfnChannelFecOutputSettingsPropertyFromCloudFormation(properties.FecOutputSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoBlackFailoverSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `VideoBlackFailoverSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoBlackFailoverSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('blackDetectThreshold', cdk.validateNumber)(properties.blackDetectThreshold));
    errors.collect(cdk.propertyValidator('videoBlackThresholdMsec', cdk.validateNumber)(properties.videoBlackThresholdMsec));
    return errors.wrap('supplied properties not correct for "VideoBlackFailoverSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoBlackFailoverSettings` resource
 *
 * @param properties - the TypeScript properties of a `VideoBlackFailoverSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoBlackFailoverSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoBlackFailoverSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoBlackFailoverSettingsPropertyValidator(properties).assertSuccess();
    return {
        BlackDetectThreshold: cdk.numberToCloudFormation(properties.blackDetectThreshold),
        VideoBlackThresholdMsec: cdk.numberToCloudFormation(properties.videoBlackThresholdMsec),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoBlackFailoverSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('blackDetectThreshold', 'BlackDetectThreshold', properties.BlackDetectThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlackDetectThreshold) : undefined);
    ret.addPropertyResult('videoBlackThresholdMsec', 'VideoBlackThresholdMsec', properties.VideoBlackThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.VideoBlackThresholdMsec) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoCodecSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `VideoCodecSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoCodecSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('frameCaptureSettings', CfnChannel_FrameCaptureSettingsPropertyValidator)(properties.frameCaptureSettings));
    errors.collect(cdk.propertyValidator('h264Settings', CfnChannel_H264SettingsPropertyValidator)(properties.h264Settings));
    errors.collect(cdk.propertyValidator('h265Settings', CfnChannel_H265SettingsPropertyValidator)(properties.h265Settings));
    errors.collect(cdk.propertyValidator('mpeg2Settings', CfnChannel_Mpeg2SettingsPropertyValidator)(properties.mpeg2Settings));
    return errors.wrap('supplied properties not correct for "VideoCodecSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoCodecSettings` resource
 *
 * @param properties - the TypeScript properties of a `VideoCodecSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoCodecSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoCodecSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoCodecSettingsPropertyValidator(properties).assertSuccess();
    return {
        FrameCaptureSettings: cfnChannelFrameCaptureSettingsPropertyToCloudFormation(properties.frameCaptureSettings),
        H264Settings: cfnChannelH264SettingsPropertyToCloudFormation(properties.h264Settings),
        H265Settings: cfnChannelH265SettingsPropertyToCloudFormation(properties.h265Settings),
        Mpeg2Settings: cfnChannelMpeg2SettingsPropertyToCloudFormation(properties.mpeg2Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoCodecSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('frameCaptureSettings', 'FrameCaptureSettings', properties.FrameCaptureSettings != null ? CfnChannelFrameCaptureSettingsPropertyFromCloudFormation(properties.FrameCaptureSettings) : undefined);
    ret.addPropertyResult('h264Settings', 'H264Settings', properties.H264Settings != null ? CfnChannelH264SettingsPropertyFromCloudFormation(properties.H264Settings) : undefined);
    ret.addPropertyResult('h265Settings', 'H265Settings', properties.H265Settings != null ? CfnChannelH265SettingsPropertyFromCloudFormation(properties.H265Settings) : undefined);
    ret.addPropertyResult('mpeg2Settings', 'Mpeg2Settings', properties.Mpeg2Settings != null ? CfnChannelMpeg2SettingsPropertyFromCloudFormation(properties.Mpeg2Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoDescriptionProperty`
 *
 * @param properties - the TypeScript properties of a `VideoDescriptionProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoDescriptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('codecSettings', CfnChannel_VideoCodecSettingsPropertyValidator)(properties.codecSettings));
    errors.collect(cdk.propertyValidator('height', cdk.validateNumber)(properties.height));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('respondToAfd', cdk.validateString)(properties.respondToAfd));
    errors.collect(cdk.propertyValidator('scalingBehavior', cdk.validateString)(properties.scalingBehavior));
    errors.collect(cdk.propertyValidator('sharpness', cdk.validateNumber)(properties.sharpness));
    errors.collect(cdk.propertyValidator('width', cdk.validateNumber)(properties.width));
    return errors.wrap('supplied properties not correct for "VideoDescriptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoDescription` resource
 *
 * @param properties - the TypeScript properties of a `VideoDescriptionProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoDescription` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoDescriptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoDescriptionPropertyValidator(properties).assertSuccess();
    return {
        CodecSettings: cfnChannelVideoCodecSettingsPropertyToCloudFormation(properties.codecSettings),
        Height: cdk.numberToCloudFormation(properties.height),
        Name: cdk.stringToCloudFormation(properties.name),
        RespondToAfd: cdk.stringToCloudFormation(properties.respondToAfd),
        ScalingBehavior: cdk.stringToCloudFormation(properties.scalingBehavior),
        Sharpness: cdk.numberToCloudFormation(properties.sharpness),
        Width: cdk.numberToCloudFormation(properties.width),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoDescriptionPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('codecSettings', 'CodecSettings', properties.CodecSettings != null ? CfnChannelVideoCodecSettingsPropertyFromCloudFormation(properties.CodecSettings) : undefined);
    ret.addPropertyResult('height', 'Height', properties.Height != null ? cfn_parse.FromCloudFormation.getNumber(properties.Height) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('respondToAfd', 'RespondToAfd', properties.RespondToAfd != null ? cfn_parse.FromCloudFormation.getString(properties.RespondToAfd) : undefined);
    ret.addPropertyResult('scalingBehavior', 'ScalingBehavior', properties.ScalingBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.ScalingBehavior) : undefined);
    ret.addPropertyResult('sharpness', 'Sharpness', properties.Sharpness != null ? cfn_parse.FromCloudFormation.getNumber(properties.Sharpness) : undefined);
    ret.addPropertyResult('width', 'Width', properties.Width != null ? cfn_parse.FromCloudFormation.getNumber(properties.Width) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoSelectorProperty`
 *
 * @param properties - the TypeScript properties of a `VideoSelectorProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoSelectorPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('colorSpace', cdk.validateString)(properties.colorSpace));
    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));
    errors.collect(cdk.propertyValidator('colorSpaceUsage', cdk.validateString)(properties.colorSpaceUsage));
    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_VideoSelectorSettingsPropertyValidator)(properties.selectorSettings));
    return errors.wrap('supplied properties not correct for "VideoSelectorProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelector` resource
 *
 * @param properties - the TypeScript properties of a `VideoSelectorProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelector` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoSelectorPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoSelectorPropertyValidator(properties).assertSuccess();
    return {
        ColorSpace: cdk.stringToCloudFormation(properties.colorSpace),
        ColorSpaceSettings: cfnChannelVideoSelectorColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),
        ColorSpaceUsage: cdk.stringToCloudFormation(properties.colorSpaceUsage),
        SelectorSettings: cfnChannelVideoSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoSelectorPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('colorSpace', 'ColorSpace', properties.ColorSpace != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpace) : undefined);
    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelVideoSelectorColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);
    ret.addPropertyResult('colorSpaceUsage', 'ColorSpaceUsage', properties.ColorSpaceUsage != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpaceUsage) : undefined);
    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelVideoSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoSelectorColorSpaceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `VideoSelectorColorSpaceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('hdr10Settings', CfnChannel_Hdr10SettingsPropertyValidator)(properties.hdr10Settings));
    return errors.wrap('supplied properties not correct for "VideoSelectorColorSpaceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorColorSpaceSettings` resource
 *
 * @param properties - the TypeScript properties of a `VideoSelectorColorSpaceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorColorSpaceSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoSelectorColorSpaceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator(properties).assertSuccess();
    return {
        Hdr10Settings: cfnChannelHdr10SettingsPropertyToCloudFormation(properties.hdr10Settings),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoSelectorColorSpaceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('hdr10Settings', 'Hdr10Settings', properties.Hdr10Settings != null ? CfnChannelHdr10SettingsPropertyFromCloudFormation(properties.Hdr10Settings) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoSelectorPidProperty`
 *
 * @param properties - the TypeScript properties of a `VideoSelectorPidProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoSelectorPidPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));
    return errors.wrap('supplied properties not correct for "VideoSelectorPidProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorPid` resource
 *
 * @param properties - the TypeScript properties of a `VideoSelectorPidProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorPid` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoSelectorPidPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoSelectorPidPropertyValidator(properties).assertSuccess();
    return {
        Pid: cdk.numberToCloudFormation(properties.pid),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoSelectorPidPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoSelectorProgramIdProperty`
 *
 * @param properties - the TypeScript properties of a `VideoSelectorProgramIdProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoSelectorProgramIdPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('programId', cdk.validateNumber)(properties.programId));
    return errors.wrap('supplied properties not correct for "VideoSelectorProgramIdProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorProgramId` resource
 *
 * @param properties - the TypeScript properties of a `VideoSelectorProgramIdProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorProgramId` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoSelectorProgramIdPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoSelectorProgramIdPropertyValidator(properties).assertSuccess();
    return {
        ProgramId: cdk.numberToCloudFormation(properties.programId),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoSelectorProgramIdPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('programId', 'ProgramId', properties.ProgramId != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VideoSelectorSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `VideoSelectorSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VideoSelectorSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('videoSelectorPid', CfnChannel_VideoSelectorPidPropertyValidator)(properties.videoSelectorPid));
    errors.collect(cdk.propertyValidator('videoSelectorProgramId', CfnChannel_VideoSelectorProgramIdPropertyValidator)(properties.videoSelectorProgramId));
    return errors.wrap('supplied properties not correct for "VideoSelectorSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorSettings` resource
 *
 * @param properties - the TypeScript properties of a `VideoSelectorSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelVideoSelectorSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VideoSelectorSettingsPropertyValidator(properties).assertSuccess();
    return {
        VideoSelectorPid: cfnChannelVideoSelectorPidPropertyToCloudFormation(properties.videoSelectorPid),
        VideoSelectorProgramId: cfnChannelVideoSelectorProgramIdPropertyToCloudFormation(properties.videoSelectorProgramId),
    };
}
// @ts-ignore TS6133
function CfnChannelVideoSelectorSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('videoSelectorPid', 'VideoSelectorPid', properties.VideoSelectorPid != null ? CfnChannelVideoSelectorPidPropertyFromCloudFormation(properties.VideoSelectorPid) : undefined);
    ret.addPropertyResult('videoSelectorProgramId', 'VideoSelectorProgramId', properties.VideoSelectorProgramId != null ? CfnChannelVideoSelectorProgramIdPropertyFromCloudFormation(properties.VideoSelectorProgramId) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VpcOutputSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `VpcOutputSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_VpcOutputSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('publicAddressAllocationIds', cdk.listValidator(cdk.validateString))(properties.publicAddressAllocationIds));
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));
    return errors.wrap('supplied properties not correct for "VpcOutputSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VpcOutputSettings` resource
 *
 * @param properties - the TypeScript properties of a `VpcOutputSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VpcOutputSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelVpcOutputSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_VpcOutputSettingsPropertyValidator(properties).assertSuccess();
    return {
        PublicAddressAllocationIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.publicAddressAllocationIds),
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
    };
}
// @ts-ignore TS6133
function CfnChannelVpcOutputSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('publicAddressAllocationIds', 'PublicAddressAllocationIds', properties.PublicAddressAllocationIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PublicAddressAllocationIds) : undefined);
    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);
    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `WavSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `WavSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_WavSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('bitDepth', cdk.validateNumber)(properties.bitDepth));
    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));
    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));
    return errors.wrap('supplied properties not correct for "WavSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WavSettings` resource
 *
 * @param properties - the TypeScript properties of a `WavSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WavSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelWavSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_WavSettingsPropertyValidator(properties).assertSuccess();
    return {
        BitDepth: cdk.numberToCloudFormation(properties.bitDepth),
        CodingMode: cdk.stringToCloudFormation(properties.codingMode),
        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),
    };
}
// @ts-ignore TS6133
function CfnChannelWavSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('bitDepth', 'BitDepth', properties.BitDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.BitDepth) : undefined);
    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);
    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `WebvttDestinationSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `WebvttDestinationSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnChannel_WebvttDestinationSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));
    return errors.wrap('supplied properties not correct for "WebvttDestinationSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WebvttDestinationSettings` resource
 *
 * @param properties - the TypeScript properties of a `WebvttDestinationSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WebvttDestinationSettings` resource.
 */
// @ts-ignore TS6133
function cfnChannelWebvttDestinationSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnChannel_WebvttDestinationSettingsPropertyValidator(properties).assertSuccess();
    return {
        StyleControl: cdk.stringToCloudFormation(properties.styleControl),
    };
}
// @ts-ignore TS6133
function CfnChannelWebvttDestinationSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnInputProps`
 *
 * @param properties - the TypeScript properties of a `CfnInputProps`
 *
 * @returns the result of the validation.
 */
function CfnInputPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnInput_InputDestinationRequestPropertyValidator))(properties.destinations));
    errors.collect(cdk.propertyValidator('inputDevices', cdk.listValidator(CfnInput_InputDeviceSettingsPropertyValidator))(properties.inputDevices));
    errors.collect(cdk.propertyValidator('inputSecurityGroups', cdk.listValidator(cdk.validateString))(properties.inputSecurityGroups));
    errors.collect(cdk.propertyValidator('mediaConnectFlows', cdk.listValidator(CfnInput_MediaConnectFlowRequestPropertyValidator))(properties.mediaConnectFlows));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
    errors.collect(cdk.propertyValidator('sources', cdk.listValidator(CfnInput_InputSourceRequestPropertyValidator))(properties.sources));
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
    errors.collect(cdk.propertyValidator('vpc', CfnInput_InputVpcRequestPropertyValidator)(properties.vpc));
    return errors.wrap('supplied properties not correct for "CfnInputProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input` resource
 *
 * @param properties - the TypeScript properties of a `CfnInputProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input` resource.
 */
// @ts-ignore TS6133
function cfnInputPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInputPropsValidator(properties).assertSuccess();
    return {
        Destinations: cdk.listMapper(cfnInputInputDestinationRequestPropertyToCloudFormation)(properties.destinations),
        InputDevices: cdk.listMapper(cfnInputInputDeviceSettingsPropertyToCloudFormation)(properties.inputDevices),
        InputSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.inputSecurityGroups),
        MediaConnectFlows: cdk.listMapper(cfnInputMediaConnectFlowRequestPropertyToCloudFormation)(properties.mediaConnectFlows),
        Name: cdk.stringToCloudFormation(properties.name),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        Sources: cdk.listMapper(cfnInputInputSourceRequestPropertyToCloudFormation)(properties.sources),
        Tags: cdk.objectToCloudFormation(properties.tags),
        Type: cdk.stringToCloudFormation(properties.type),
        Vpc: cfnInputInputVpcRequestPropertyToCloudFormation(properties.vpc),
    };
}
// @ts-ignore TS6133
function CfnInputPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputDestinationRequestPropertyFromCloudFormation)(properties.Destinations) : undefined);
    ret.addPropertyResult('inputDevices', 'InputDevices', properties.InputDevices != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputDeviceSettingsPropertyFromCloudFormation)(properties.InputDevices) : undefined);
    ret.addPropertyResult('inputSecurityGroups', 'InputSecurityGroups', properties.InputSecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InputSecurityGroups) : undefined);
    ret.addPropertyResult('mediaConnectFlows', 'MediaConnectFlows', properties.MediaConnectFlows != null ? cfn_parse.FromCloudFormation.getArray(CfnInputMediaConnectFlowRequestPropertyFromCloudFormation)(properties.MediaConnectFlows) : undefined);
    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);
    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);
    ret.addPropertyResult('sources', 'Sources', properties.Sources != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputSourceRequestPropertyFromCloudFormation)(properties.Sources) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);
    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnInputInputVpcRequestPropertyFromCloudFormation(properties.Vpc) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::MediaLive::Input`
 *
 * The AWS::MediaLive::Input resource is a MediaLive resource type that creates an input.
 *
 * A MediaLive input holds information that describes how the MediaLive channel is connected to the upstream system that is providing the source content that is to be transcoded.
 *
 * @cloudformationResource AWS::MediaLive::Input
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-input.html
 */
class CfnInput extends cdk.CfnResource {
    /**
     * Create a new `AWS::MediaLive::Input`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnInput.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_medialive_CfnInputProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnInput);
            }
            throw error;
        }
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.attrDestinations = cdk.Token.asList(this.getAtt('Destinations', cdk.ResolutionTypeHint.STRING_LIST));
        this.attrSources = cdk.Token.asList(this.getAtt('Sources', cdk.ResolutionTypeHint.STRING_LIST));
        this.destinations = props.destinations;
        this.inputDevices = props.inputDevices;
        this.inputSecurityGroups = props.inputSecurityGroups;
        this.mediaConnectFlows = props.mediaConnectFlows;
        this.name = props.name;
        this.roleArn = props.roleArn;
        this.sources = props.sources;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::MediaLive::Input", props.tags, { tagPropertyName: 'tags' });
        this.type = props.type;
        this.vpc = props.vpc;
    }
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInputPropsFromCloudFormation(resourceProperties);
        const ret = new CfnInput(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInput.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            destinations: this.destinations,
            inputDevices: this.inputDevices,
            inputSecurityGroups: this.inputSecurityGroups,
            mediaConnectFlows: this.mediaConnectFlows,
            name: this.name,
            roleArn: this.roleArn,
            sources: this.sources,
            tags: this.tags.renderTags(),
            type: this.type,
            vpc: this.vpc,
        };
    }
    renderProperties(props) {
        return cfnInputPropsToCloudFormation(props);
    }
}
exports.CfnInput = CfnInput;
_b = JSII_RTTI_SYMBOL_1;
CfnInput[_b] = { fqn: "@aws-cdk/aws-medialive.CfnInput", version: "0.0.0" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnInput.CFN_RESOURCE_TYPE_NAME = "AWS::MediaLive::Input";
/**
 * Determine whether the given properties match those of a `InputDestinationRequestProperty`
 *
 * @param properties - the TypeScript properties of a `InputDestinationRequestProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_InputDestinationRequestPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));
    return errors.wrap('supplied properties not correct for "InputDestinationRequestProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDestinationRequest` resource
 *
 * @param properties - the TypeScript properties of a `InputDestinationRequestProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDestinationRequest` resource.
 */
// @ts-ignore TS6133
function cfnInputInputDestinationRequestPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_InputDestinationRequestPropertyValidator(properties).assertSuccess();
    return {
        StreamName: cdk.stringToCloudFormation(properties.streamName),
    };
}
// @ts-ignore TS6133
function CfnInputInputDestinationRequestPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputDeviceRequestProperty`
 *
 * @param properties - the TypeScript properties of a `InputDeviceRequestProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_InputDeviceRequestPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    return errors.wrap('supplied properties not correct for "InputDeviceRequestProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceRequest` resource
 *
 * @param properties - the TypeScript properties of a `InputDeviceRequestProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceRequest` resource.
 */
// @ts-ignore TS6133
function cfnInputInputDeviceRequestPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_InputDeviceRequestPropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
    };
}
// @ts-ignore TS6133
function CfnInputInputDeviceRequestPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputDeviceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `InputDeviceSettingsProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_InputDeviceSettingsPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    return errors.wrap('supplied properties not correct for "InputDeviceSettingsProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceSettings` resource
 *
 * @param properties - the TypeScript properties of a `InputDeviceSettingsProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceSettings` resource.
 */
// @ts-ignore TS6133
function cfnInputInputDeviceSettingsPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_InputDeviceSettingsPropertyValidator(properties).assertSuccess();
    return {
        Id: cdk.stringToCloudFormation(properties.id),
    };
}
// @ts-ignore TS6133
function CfnInputInputDeviceSettingsPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputSourceRequestProperty`
 *
 * @param properties - the TypeScript properties of a `InputSourceRequestProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_InputSourceRequestPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));
    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));
    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));
    return errors.wrap('supplied properties not correct for "InputSourceRequestProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputSourceRequest` resource
 *
 * @param properties - the TypeScript properties of a `InputSourceRequestProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputSourceRequest` resource.
 */
// @ts-ignore TS6133
function cfnInputInputSourceRequestPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_InputSourceRequestPropertyValidator(properties).assertSuccess();
    return {
        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),
        Url: cdk.stringToCloudFormation(properties.url),
        Username: cdk.stringToCloudFormation(properties.username),
    };
}
// @ts-ignore TS6133
function CfnInputInputSourceRequestPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);
    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);
    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `InputVpcRequestProperty`
 *
 * @param properties - the TypeScript properties of a `InputVpcRequestProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_InputVpcRequestPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));
    return errors.wrap('supplied properties not correct for "InputVpcRequestProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputVpcRequest` resource
 *
 * @param properties - the TypeScript properties of a `InputVpcRequestProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputVpcRequest` resource.
 */
// @ts-ignore TS6133
function cfnInputInputVpcRequestPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_InputVpcRequestPropertyValidator(properties).assertSuccess();
    return {
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
    };
}
// @ts-ignore TS6133
function CfnInputInputVpcRequestPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);
    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `MediaConnectFlowRequestProperty`
 *
 * @param properties - the TypeScript properties of a `MediaConnectFlowRequestProperty`
 *
 * @returns the result of the validation.
 */
function CfnInput_MediaConnectFlowRequestPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('flowArn', cdk.validateString)(properties.flowArn));
    return errors.wrap('supplied properties not correct for "MediaConnectFlowRequestProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.MediaConnectFlowRequest` resource
 *
 * @param properties - the TypeScript properties of a `MediaConnectFlowRequestProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.MediaConnectFlowRequest` resource.
 */
// @ts-ignore TS6133
function cfnInputMediaConnectFlowRequestPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInput_MediaConnectFlowRequestPropertyValidator(properties).assertSuccess();
    return {
        FlowArn: cdk.stringToCloudFormation(properties.flowArn),
    };
}
// @ts-ignore TS6133
function CfnInputMediaConnectFlowRequestPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('flowArn', 'FlowArn', properties.FlowArn != null ? cfn_parse.FromCloudFormation.getString(properties.FlowArn) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `CfnInputSecurityGroupProps`
 *
 * @param properties - the TypeScript properties of a `CfnInputSecurityGroupProps`
 *
 * @returns the result of the validation.
 */
function CfnInputSecurityGroupPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));
    errors.collect(cdk.propertyValidator('whitelistRules', cdk.listValidator(CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator))(properties.whitelistRules));
    return errors.wrap('supplied properties not correct for "CfnInputSecurityGroupProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup` resource
 *
 * @param properties - the TypeScript properties of a `CfnInputSecurityGroupProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup` resource.
 */
// @ts-ignore TS6133
function cfnInputSecurityGroupPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInputSecurityGroupPropsValidator(properties).assertSuccess();
    return {
        Tags: cdk.objectToCloudFormation(properties.tags),
        WhitelistRules: cdk.listMapper(cfnInputSecurityGroupInputWhitelistRuleCidrPropertyToCloudFormation)(properties.whitelistRules),
    };
}
// @ts-ignore TS6133
function CfnInputSecurityGroupPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined);
    ret.addPropertyResult('whitelistRules', 'WhitelistRules', properties.WhitelistRules != null ? cfn_parse.FromCloudFormation.getArray(CfnInputSecurityGroupInputWhitelistRuleCidrPropertyFromCloudFormation)(properties.WhitelistRules) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::MediaLive::InputSecurityGroup`
 *
 * The AWS::MediaLive::InputSecurityGroup is a MediaLive resource type that creates an input security group.
 *
 * A MediaLive input security group is associated with a MediaLive input. The input security group is an "allow list" of IP addresses that controls whether an external IP address can push content to the associated MediaLive input.
 *
 * @cloudformationResource AWS::MediaLive::InputSecurityGroup
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-inputsecuritygroup.html
 */
class CfnInputSecurityGroup extends cdk.CfnResource {
    /**
     * Create a new `AWS::MediaLive::InputSecurityGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnInputSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_medialive_CfnInputSecurityGroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnInputSecurityGroup);
            }
            throw error;
        }
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::MediaLive::InputSecurityGroup", props.tags, { tagPropertyName: 'tags' });
        this.whitelistRules = props.whitelistRules;
    }
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInputSecurityGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnInputSecurityGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInputSecurityGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            tags: this.tags.renderTags(),
            whitelistRules: this.whitelistRules,
        };
    }
    renderProperties(props) {
        return cfnInputSecurityGroupPropsToCloudFormation(props);
    }
}
exports.CfnInputSecurityGroup = CfnInputSecurityGroup;
_c = JSII_RTTI_SYMBOL_1;
CfnInputSecurityGroup[_c] = { fqn: "@aws-cdk/aws-medialive.CfnInputSecurityGroup", version: "0.0.0" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnInputSecurityGroup.CFN_RESOURCE_TYPE_NAME = "AWS::MediaLive::InputSecurityGroup";
/**
 * Determine whether the given properties match those of a `InputWhitelistRuleCidrProperty`
 *
 * @param properties - the TypeScript properties of a `InputWhitelistRuleCidrProperty`
 *
 * @returns the result of the validation.
 */
function CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));
    return errors.wrap('supplied properties not correct for "InputWhitelistRuleCidrProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr` resource
 *
 * @param properties - the TypeScript properties of a `InputWhitelistRuleCidrProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr` resource.
 */
// @ts-ignore TS6133
function cfnInputSecurityGroupInputWhitelistRuleCidrPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator(properties).assertSuccess();
    return {
        Cidr: cdk.stringToCloudFormation(properties.cidr),
    };
}
// @ts-ignore TS6133
function CfnInputSecurityGroupInputWhitelistRuleCidrPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('cidr', 'Cidr', properties.Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.Cidr) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
//# sourceMappingURL=data:application/json;base64,