"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ec2 = require("@aws-cdk/aws-ec2");
const ecrAssets = require("@aws-cdk/aws-ecr-assets");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const cdk8s = require("cdk8s");
const kplus = require("cdk8s-plus-24");
const bucket_pinger_1 = require("./bucket-pinger/bucket-pinger");
const eks = require("../lib");
const app = new core_1.App();
const stack = new core_1.Stack(app, 'aws-eks-service-account-sdk-calls-test');
// this bucket gets created by a kubernetes pod.
const bucketName = `eks-bucket-${stack.account}-${stack.region}`;
const dockerImage = new ecrAssets.DockerImageAsset(stack, 'sdk-call-making-docker-image', {
    directory: path.join(__dirname, 'sdk-call-integ-test-docker-app/app'),
});
// just need one nat gateway to simplify the test
const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 3, natGateways: 1 });
const cluster = new eks.Cluster(stack, 'Cluster', {
    vpc: vpc,
    version: eks.KubernetesVersion.V1_24,
});
const chart = new cdk8s.Chart(new cdk8s.App(), 'sdk-call-image');
const serviceAccount = cluster.addServiceAccount('my-service-account');
const kplusServiceAccount = kplus.ServiceAccount.fromServiceAccountName(stack, 'kplus-sa', serviceAccount.serviceAccountName);
new kplus.Deployment(chart, 'Deployment', {
    containers: [{
            image: dockerImage.imageUri,
            envVariables: {
                BUCKET_NAME: kplus.EnvValue.fromValue(bucketName),
            },
            securityContext: {
                user: 1000,
            },
        }],
    restartPolicy: kplus.RestartPolicy.ALWAYS,
    serviceAccount: kplusServiceAccount,
});
cluster.addCdk8sChart('sdk-call', chart).node.addDependency(serviceAccount);
serviceAccount.role.addToPrincipalPolicy(new iam.PolicyStatement({
    actions: ['s3:CreateBucket'],
    resources: [`arn:aws:s3:::${bucketName}`],
}));
// this custom resource will check that the bucket exists
// the bucket will be deleted when the custom resource is deleted
// if the bucket does not exist, then it will throw an error and fail the deployment.
const pinger = new bucket_pinger_1.BucketPinger(stack, 'S3BucketPinger', {
    bucketName,
    // we need more timeout for the sdk-call in the pod as it could take more than 1 minute.
    timeout: core_1.Duration.minutes(3),
});
// the pinger must wait for the cluster to be updated.
// interestingly, without this dependency, CFN will always run the pinger
// before the pod.
pinger.node.addDependency(cluster);
// this should confirm that the bucket actually exists
new core_1.CfnOutput(stack, 'PingerResponse', {
    value: pinger.response,
});
new integ.IntegTest(app, 'aws-cdk-eks-service-account-sdk-call', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZWtzLXNlcnZpY2UtYWNjb3VudC1zZGstY2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmVrcy1zZXJ2aWNlLWFjY291bnQtc2RrLWNhbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0Isd0NBQXdDO0FBQ3hDLHFEQUFxRDtBQUNyRCx3Q0FBd0M7QUFDeEMsd0NBQWdFO0FBQ2hFLDhDQUE4QztBQUM5QywrQkFBK0I7QUFDL0IsdUNBQXVDO0FBQ3ZDLGlFQUE2RDtBQUM3RCw4QkFBOEI7QUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztBQUV2RSxnREFBZ0Q7QUFDaEQsTUFBTSxVQUFVLEdBQUcsY0FBYyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVqRSxNQUFNLFdBQVcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsOEJBQThCLEVBQUU7SUFDeEYsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG9DQUFvQyxDQUFDO0NBQ3RFLENBQUMsQ0FBQztBQUVILGlEQUFpRDtBQUNqRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFckUsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDaEQsR0FBRyxFQUFFLEdBQUc7SUFDUixPQUFPLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUs7Q0FDckMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFakUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDOUgsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7SUFDeEMsVUFBVSxFQUFFLENBQUM7WUFDWCxLQUFLLEVBQUUsV0FBVyxDQUFDLFFBQVE7WUFDM0IsWUFBWSxFQUFFO2dCQUNaLFdBQVcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7YUFDbEQ7WUFDRCxlQUFlLEVBQUU7Z0JBQ2YsSUFBSSxFQUFFLElBQUk7YUFDWDtTQUNGLENBQUM7SUFDRixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNO0lBQ3pDLGNBQWMsRUFBRSxtQkFBbUI7Q0FDcEMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUU1RSxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUN0QyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDdEIsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUM7SUFDNUIsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLFVBQVUsRUFBRSxDQUFDO0NBQzFDLENBQUMsQ0FDSCxDQUFDO0FBRUYseURBQXlEO0FBQ3pELGlFQUFpRTtBQUNqRSxxRkFBcUY7QUFDckYsTUFBTSxNQUFNLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUN2RCxVQUFVO0lBQ1Ysd0ZBQXdGO0lBQ3hGLE9BQU8sRUFBRSxlQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUM3QixDQUFDLENBQUM7QUFFSCxzREFBc0Q7QUFDdEQseUVBQXlFO0FBQ3pFLGtCQUFrQjtBQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVuQyxzREFBc0Q7QUFDdEQsSUFBSSxnQkFBUyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNyQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVE7Q0FDdkIsQ0FBQyxDQUFDO0FBRUgsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxzQ0FBc0MsRUFBRTtJQUMvRCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdAYXdzLWNkay9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVjckFzc2V0cyBmcm9tICdAYXdzLWNkay9hd3MtZWNyLWFzc2V0cyc7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnQGF3cy1jZGsvYXdzLWlhbSc7XG5pbXBvcnQgeyBBcHAsIFN0YWNrLCBDZm5PdXRwdXQsIER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgKiBhcyBjZGs4cyBmcm9tICdjZGs4cyc7XG5pbXBvcnQgKiBhcyBrcGx1cyBmcm9tICdjZGs4cy1wbHVzLTI0JztcbmltcG9ydCB7IEJ1Y2tldFBpbmdlciB9IGZyb20gJy4vYnVja2V0LXBpbmdlci9idWNrZXQtcGluZ2VyJztcbmltcG9ydCAqIGFzIGVrcyBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdhd3MtZWtzLXNlcnZpY2UtYWNjb3VudC1zZGstY2FsbHMtdGVzdCcpO1xuXG4vLyB0aGlzIGJ1Y2tldCBnZXRzIGNyZWF0ZWQgYnkgYSBrdWJlcm5ldGVzIHBvZC5cbmNvbnN0IGJ1Y2tldE5hbWUgPSBgZWtzLWJ1Y2tldC0ke3N0YWNrLmFjY291bnR9LSR7c3RhY2sucmVnaW9ufWA7XG5cbmNvbnN0IGRvY2tlckltYWdlID0gbmV3IGVjckFzc2V0cy5Eb2NrZXJJbWFnZUFzc2V0KHN0YWNrLCAnc2RrLWNhbGwtbWFraW5nLWRvY2tlci1pbWFnZScsIHtcbiAgZGlyZWN0b3J5OiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnc2RrLWNhbGwtaW50ZWctdGVzdC1kb2NrZXItYXBwL2FwcCcpLFxufSk7XG5cbi8vIGp1c3QgbmVlZCBvbmUgbmF0IGdhdGV3YXkgdG8gc2ltcGxpZnkgdGhlIHRlc3RcbmNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVnBjJywgeyBtYXhBenM6IDMsIG5hdEdhdGV3YXlzOiAxIH0pO1xuXG5jb25zdCBjbHVzdGVyID0gbmV3IGVrcy5DbHVzdGVyKHN0YWNrLCAnQ2x1c3RlcicsIHtcbiAgdnBjOiB2cGMsXG4gIHZlcnNpb246IGVrcy5LdWJlcm5ldGVzVmVyc2lvbi5WMV8yNCxcbn0pO1xuXG5jb25zdCBjaGFydCA9IG5ldyBjZGs4cy5DaGFydChuZXcgY2RrOHMuQXBwKCksICdzZGstY2FsbC1pbWFnZScpO1xuXG5jb25zdCBzZXJ2aWNlQWNjb3VudCA9IGNsdXN0ZXIuYWRkU2VydmljZUFjY291bnQoJ215LXNlcnZpY2UtYWNjb3VudCcpO1xuY29uc3Qga3BsdXNTZXJ2aWNlQWNjb3VudCA9IGtwbHVzLlNlcnZpY2VBY2NvdW50LmZyb21TZXJ2aWNlQWNjb3VudE5hbWUoc3RhY2ssICdrcGx1cy1zYScsIHNlcnZpY2VBY2NvdW50LnNlcnZpY2VBY2NvdW50TmFtZSk7XG5uZXcga3BsdXMuRGVwbG95bWVudChjaGFydCwgJ0RlcGxveW1lbnQnLCB7XG4gIGNvbnRhaW5lcnM6IFt7XG4gICAgaW1hZ2U6IGRvY2tlckltYWdlLmltYWdlVXJpLFxuICAgIGVudlZhcmlhYmxlczoge1xuICAgICAgQlVDS0VUX05BTUU6IGtwbHVzLkVudlZhbHVlLmZyb21WYWx1ZShidWNrZXROYW1lKSxcbiAgICB9LFxuICAgIHNlY3VyaXR5Q29udGV4dDoge1xuICAgICAgdXNlcjogMTAwMCxcbiAgICB9LFxuICB9XSxcbiAgcmVzdGFydFBvbGljeToga3BsdXMuUmVzdGFydFBvbGljeS5BTFdBWVMsXG4gIHNlcnZpY2VBY2NvdW50OiBrcGx1c1NlcnZpY2VBY2NvdW50LFxufSk7XG5cbmNsdXN0ZXIuYWRkQ2RrOHNDaGFydCgnc2RrLWNhbGwnLCBjaGFydCkubm9kZS5hZGREZXBlbmRlbmN5KHNlcnZpY2VBY2NvdW50KTtcblxuc2VydmljZUFjY291bnQucm9sZS5hZGRUb1ByaW5jaXBhbFBvbGljeShcbiAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgIGFjdGlvbnM6IFsnczM6Q3JlYXRlQnVja2V0J10sXG4gICAgcmVzb3VyY2VzOiBbYGFybjphd3M6czM6Ojoke2J1Y2tldE5hbWV9YF0sXG4gIH0pLFxuKTtcblxuLy8gdGhpcyBjdXN0b20gcmVzb3VyY2Ugd2lsbCBjaGVjayB0aGF0IHRoZSBidWNrZXQgZXhpc3RzXG4vLyB0aGUgYnVja2V0IHdpbGwgYmUgZGVsZXRlZCB3aGVuIHRoZSBjdXN0b20gcmVzb3VyY2UgaXMgZGVsZXRlZFxuLy8gaWYgdGhlIGJ1Y2tldCBkb2VzIG5vdCBleGlzdCwgdGhlbiBpdCB3aWxsIHRocm93IGFuIGVycm9yIGFuZCBmYWlsIHRoZSBkZXBsb3ltZW50LlxuY29uc3QgcGluZ2VyID0gbmV3IEJ1Y2tldFBpbmdlcihzdGFjaywgJ1MzQnVja2V0UGluZ2VyJywge1xuICBidWNrZXROYW1lLFxuICAvLyB3ZSBuZWVkIG1vcmUgdGltZW91dCBmb3IgdGhlIHNkay1jYWxsIGluIHRoZSBwb2QgYXMgaXQgY291bGQgdGFrZSBtb3JlIHRoYW4gMSBtaW51dGUuXG4gIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoMyksXG59KTtcblxuLy8gdGhlIHBpbmdlciBtdXN0IHdhaXQgZm9yIHRoZSBjbHVzdGVyIHRvIGJlIHVwZGF0ZWQuXG4vLyBpbnRlcmVzdGluZ2x5LCB3aXRob3V0IHRoaXMgZGVwZW5kZW5jeSwgQ0ZOIHdpbGwgYWx3YXlzIHJ1biB0aGUgcGluZ2VyXG4vLyBiZWZvcmUgdGhlIHBvZC5cbnBpbmdlci5ub2RlLmFkZERlcGVuZGVuY3koY2x1c3Rlcik7XG5cbi8vIHRoaXMgc2hvdWxkIGNvbmZpcm0gdGhhdCB0aGUgYnVja2V0IGFjdHVhbGx5IGV4aXN0c1xubmV3IENmbk91dHB1dChzdGFjaywgJ1BpbmdlclJlc3BvbnNlJywge1xuICB2YWx1ZTogcGluZ2VyLnJlc3BvbnNlLFxufSk7XG5cbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnYXdzLWNkay1la3Mtc2VydmljZS1hY2NvdW50LXNkay1jYWxsJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=