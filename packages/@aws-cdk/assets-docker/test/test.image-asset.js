"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const fs = require("fs");
const path = require("path");
const lib_1 = require("../lib");
module.exports = {
    'test instantiating Asset Image'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.DockerImageAsset(stack, 'Image', {
            directory: path.join(__dirname, 'demo-image'),
        });
        // THEN
        const template = assert_1.SynthUtils.synthesize(stack).template;
        test.deepEqual(template.Parameters.ImageImageName5E684353, {
            Type: 'String',
            Description: 'ECR repository name and tag asset "Image"'
        });
        test.done();
    },
    'with build args'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const asset = new lib_1.DockerImageAsset(stack, 'Image', {
            directory: path.join(__dirname, 'demo-image'),
            buildArgs: {
                a: 'b'
            }
        });
        // THEN
        const assetMetadata = asset.node.metadata.find(({ type }) => type === 'aws:cdk:asset');
        test.deepEqual(assetMetadata && assetMetadata.data.buildArgs, { a: 'b' });
        test.done();
    },
    'asset.repository.grantPull can be used to grant a principal permissions to use the image'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const user = new iam.User(stack, 'MyUser');
        const asset = new lib_1.DockerImageAsset(stack, 'Image', {
            directory: path.join(__dirname, 'demo-image')
        });
        // WHEN
        asset.repository.grantPull(user);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                "Statement": [
                    {
                        "Action": [
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:BatchGetImage"
                        ],
                        "Effect": "Allow",
                        "Resource": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:",
                                    { "Ref": "AWS::Partition" },
                                    ":ecr:",
                                    { "Ref": "AWS::Region" },
                                    ":",
                                    { "Ref": "AWS::AccountId" },
                                    ":repository/",
                                    { "Fn::GetAtt": ["ImageAdoptRepositoryE1E84E35", "RepositoryName"] }
                                ]
                            ]
                        }
                    },
                    {
                        "Action": "ecr:GetAuthorizationToken",
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ],
                "Version": "2012-10-17"
            },
            "PolicyName": "MyUserDefaultPolicy7B897426",
            "Users": [
                {
                    "Ref": "MyUserDC45028B"
                }
            ]
        }));
        test.done();
    },
    'asset.repository.addToResourcePolicy can be used to modify the ECR resource policy via the adoption custom resource'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asset = new lib_1.DockerImageAsset(stack, 'Image', {
            directory: path.join(__dirname, 'demo-image')
        });
        // WHEN
        asset.repository.addToResourcePolicy(new iam.PolicyStatement()
            .addAction('BOOM')
            .addPrincipal(new iam.ServicePrincipal('test.service')));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Custom::ECRAdoptedRepository', {
            "RepositoryName": {
                "Fn::Select": [0, { "Fn::Split": ["@sha256:", { "Ref": "ImageImageName5E684353" }] }]
            },
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": "BOOM",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "test.service"
                        }
                    }
                ],
                "Version": "2012-10-17"
            }
        }));
        test.done();
    },
    'fails if the directory does not exist'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.throws(() => {
            new lib_1.DockerImageAsset(stack, 'MyAsset', {
                directory: `/does/not/exist/${Math.floor(Math.random() * 9999)}`
            });
        }, /Cannot find image directory at/);
        test.done();
    },
    'fails if the directory does not contain a Dockerfile'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.throws(() => {
            new lib_1.DockerImageAsset(stack, 'Asset', {
                directory: __dirname
            });
        }, /No 'Dockerfile' found in/);
        test.done();
    },
    'docker directory is staged if asset staging is enabled'(test) {
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'stack');
        new lib_1.DockerImageAsset(stack, 'MyAsset', {
            directory: path.join(__dirname, 'demo-image')
        });
        const session = app.synth();
        test.ok(fs.existsSync(path.join(session.directory, 'asset.1a17a141505ac69144931fe263d130f4612251caa4bbbdaf68a44ed0f405439c/Dockerfile')));
        test.ok(fs.existsSync(path.join(session.directory, 'asset.1a17a141505ac69144931fe263d130f4612251caa4bbbdaf68a44ed0f405439c/index.py')));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,