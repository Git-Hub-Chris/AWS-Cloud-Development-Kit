"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const efs = require("@aws-cdk/aws-efs");
const cdk = require("@aws-cdk/core");
const lambda = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-lambda-1');
const vpc = new ec2.Vpc(stack, 'Vpc', {
    maxAzs: 3,
    natGateways: 1,
});
const fileSystem = new efs.FileSystem(stack, 'Efs', {
    vpc,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
// create an access point and expose the root of the filesystem
const accessPoint = fileSystem.addAccessPoint('AccessPoint', {
    createAcl: {
        ownerGid: '1001',
        ownerUid: '1001',
        permissions: '750',
    },
    path: '/export/lambda',
    posixUser: {
        gid: '1001',
        uid: '1001',
    },
});
const lambdaCode = new lambda.InlineCode(`
import json
import os
import string
import random
import datetime

MSG_FILE_PATH = '/mnt/msg/content'

def randomString(stringLength=10):
  letters = string.ascii_lowercase
  return ''.join(random.choice(letters) for i in range(stringLength))

def lambda_handler(event, context):
  with open(MSG_FILE_PATH, 'a') as f:
      f.write(f"{datetime.datetime.utcnow():%Y-%m-%d-%H:%M:%S} " + randomString(5) + ' ')

  file = open(MSG_FILE_PATH, "r")
  file_content = file.read()
  file.close()

  return {
    'statusCode': 200,
    'body': str(file_content)
  }
`);
// this function will mount the access point to '/mnt/msg' and write content onto /mnt/msg/content
const lambda1 = new lambda.Function(stack, 'MyLambda', {
    code: lambdaCode,
    handler: 'index.lambda_handler',
    runtime: lambda.Runtime.PYTHON_3_7,
    vpc,
    filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),
});
let importedFileSystem = efs.FileSystem.fromFileSystemAttributes(stack, 'fileSystemImported', {
    fileSystemId: fileSystem.fileSystemId,
    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'securityGroup', fileSystem.connections.securityGroups[0].securityGroupId),
});
let importedAccessPoint = efs.AccessPoint.fromAccessPointAttributes(stack, 'AccessPointImported', {
    accessPointId: accessPoint.accessPointId,
    fileSystem: importedFileSystem,
});
// this function will mount the access point to '/mnt/msg' and write content onto /mnt/msg/content
const lambda2 = new lambda.Function(stack, 'MyLambda2', {
    code: lambdaCode,
    handler: 'index.lambda_handler',
    runtime: lambda.Runtime.PYTHON_3_7,
    vpc,
    filesystem: lambda.FileSystem.fromEfsAccessPoint(importedAccessPoint, '/mnt/msg'),
});
// lambda2 doesn't have dependencies on MountTargets because the fileSystem is imported.
// Ideally, lambda2 would be deployed in another stack but integ doesn't support it.
// We are adding a dependency on the first lambda to simulate this situation.
lambda2.node.addDependency(lambda1);
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubGFtYmRhLmZpbGVzeXN0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5sYW1iZGEuZmlsZXN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLGlDQUFpQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFHckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7SUFDcEMsTUFBTSxFQUFFLENBQUM7SUFDVCxXQUFXLEVBQUUsQ0FBQztDQUNmLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBQ2xELEdBQUc7SUFDSCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUVILCtEQUErRDtBQUMvRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRTtJQUMzRCxTQUFTLEVBQUU7UUFDVCxRQUFRLEVBQUUsTUFBTTtRQUNoQixRQUFRLEVBQUUsTUFBTTtRQUNoQixXQUFXLEVBQUUsS0FBSztLQUNuQjtJQUNELElBQUksRUFBRSxnQkFBZ0I7SUFDdEIsU0FBUyxFQUFFO1FBQ1QsR0FBRyxFQUFFLE1BQU07UUFDWCxHQUFHLEVBQUUsTUFBTTtLQUNaO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBeUJ4QyxDQUFDLENBQUM7QUFFSCxrR0FBa0c7QUFDbEcsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDckQsSUFBSSxFQUFFLFVBQVU7SUFDaEIsT0FBTyxFQUFFLHNCQUFzQjtJQUMvQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVO0lBQ2xDLEdBQUc7SUFDSCxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDO0NBQzFFLENBQUMsQ0FBQztBQUVILElBQUksa0JBQWtCLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7SUFDNUYsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZO0lBQ3JDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUNsRCxLQUFLLEVBQ0wsZUFBZSxFQUNmLFVBQVUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FDekQ7Q0FDRixDQUFDLENBQUM7QUFFSCxJQUFJLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLHFCQUFxQixFQUFFO0lBQ2hHLGFBQWEsRUFBRSxXQUFXLENBQUMsYUFBYTtJQUN4QyxVQUFVLEVBQUUsa0JBQWtCO0NBQy9CLENBQUMsQ0FBQztBQUVILGtHQUFrRztBQUNsRyxNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUN0RCxJQUFJLEVBQUUsVUFBVTtJQUNoQixPQUFPLEVBQUUsc0JBQXNCO0lBQy9CLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVU7SUFDbEMsR0FBRztJQUNILFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUM5QyxtQkFBbUIsRUFDbkIsVUFBVSxDQUNYO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsd0ZBQXdGO0FBQ3hGLG9GQUFvRjtBQUNwRiw2RUFBNkU7QUFDN0UsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFcEMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgZWZzIGZyb20gJ0Bhd3MtY2RrL2F3cy1lZnMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWxhbWJkYS0xJyk7XG5cblxuY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdWcGMnLCB7XG4gIG1heEF6czogMyxcbiAgbmF0R2F0ZXdheXM6IDEsXG59KTtcblxuY29uc3QgZmlsZVN5c3RlbSA9IG5ldyBlZnMuRmlsZVN5c3RlbShzdGFjaywgJ0VmcycsIHtcbiAgdnBjLFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5cbi8vIGNyZWF0ZSBhbiBhY2Nlc3MgcG9pbnQgYW5kIGV4cG9zZSB0aGUgcm9vdCBvZiB0aGUgZmlsZXN5c3RlbVxuY29uc3QgYWNjZXNzUG9pbnQgPSBmaWxlU3lzdGVtLmFkZEFjY2Vzc1BvaW50KCdBY2Nlc3NQb2ludCcsIHtcbiAgY3JlYXRlQWNsOiB7XG4gICAgb3duZXJHaWQ6ICcxMDAxJyxcbiAgICBvd25lclVpZDogJzEwMDEnLFxuICAgIHBlcm1pc3Npb25zOiAnNzUwJyxcbiAgfSxcbiAgcGF0aDogJy9leHBvcnQvbGFtYmRhJyxcbiAgcG9zaXhVc2VyOiB7XG4gICAgZ2lkOiAnMTAwMScsXG4gICAgdWlkOiAnMTAwMScsXG4gIH0sXG59KTtcblxuY29uc3QgbGFtYmRhQ29kZSA9IG5ldyBsYW1iZGEuSW5saW5lQ29kZShgXG5pbXBvcnQganNvblxuaW1wb3J0IG9zXG5pbXBvcnQgc3RyaW5nXG5pbXBvcnQgcmFuZG9tXG5pbXBvcnQgZGF0ZXRpbWVcblxuTVNHX0ZJTEVfUEFUSCA9ICcvbW50L21zZy9jb250ZW50J1xuXG5kZWYgcmFuZG9tU3RyaW5nKHN0cmluZ0xlbmd0aD0xMCk6XG4gIGxldHRlcnMgPSBzdHJpbmcuYXNjaWlfbG93ZXJjYXNlXG4gIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2UobGV0dGVycykgZm9yIGkgaW4gcmFuZ2Uoc3RyaW5nTGVuZ3RoKSlcblxuZGVmIGxhbWJkYV9oYW5kbGVyKGV2ZW50LCBjb250ZXh0KTpcbiAgd2l0aCBvcGVuKE1TR19GSUxFX1BBVEgsICdhJykgYXMgZjpcbiAgICAgIGYud3JpdGUoZlwie2RhdGV0aW1lLmRhdGV0aW1lLnV0Y25vdygpOiVZLSVtLSVkLSVIOiVNOiVTfSBcIiArIHJhbmRvbVN0cmluZyg1KSArICcgJylcblxuICBmaWxlID0gb3BlbihNU0dfRklMRV9QQVRILCBcInJcIilcbiAgZmlsZV9jb250ZW50ID0gZmlsZS5yZWFkKClcbiAgZmlsZS5jbG9zZSgpXG5cbiAgcmV0dXJuIHtcbiAgICAnc3RhdHVzQ29kZSc6IDIwMCxcbiAgICAnYm9keSc6IHN0cihmaWxlX2NvbnRlbnQpXG4gIH1cbmApO1xuXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgbW91bnQgdGhlIGFjY2VzcyBwb2ludCB0byAnL21udC9tc2cnIGFuZCB3cml0ZSBjb250ZW50IG9udG8gL21udC9tc2cvY29udGVudFxuY29uc3QgbGFtYmRhMSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdNeUxhbWJkYScsIHtcbiAgY29kZTogbGFtYmRhQ29kZSxcbiAgaGFuZGxlcjogJ2luZGV4LmxhbWJkYV9oYW5kbGVyJyxcbiAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUFlUSE9OXzNfNyxcbiAgdnBjLFxuICBmaWxlc3lzdGVtOiBsYW1iZGEuRmlsZVN5c3RlbS5mcm9tRWZzQWNjZXNzUG9pbnQoYWNjZXNzUG9pbnQsICcvbW50L21zZycpLFxufSk7XG5cbmxldCBpbXBvcnRlZEZpbGVTeXN0ZW0gPSBlZnMuRmlsZVN5c3RlbS5mcm9tRmlsZVN5c3RlbUF0dHJpYnV0ZXMoc3RhY2ssICdmaWxlU3lzdGVtSW1wb3J0ZWQnLCB7XG4gIGZpbGVTeXN0ZW1JZDogZmlsZVN5c3RlbS5maWxlU3lzdGVtSWQsXG4gIHNlY3VyaXR5R3JvdXA6IGVjMi5TZWN1cml0eUdyb3VwLmZyb21TZWN1cml0eUdyb3VwSWQoXG4gICAgc3RhY2ssXG4gICAgJ3NlY3VyaXR5R3JvdXAnLFxuICAgIGZpbGVTeXN0ZW0uY29ubmVjdGlvbnMuc2VjdXJpdHlHcm91cHNbMF0uc2VjdXJpdHlHcm91cElkLFxuICApLFxufSk7XG5cbmxldCBpbXBvcnRlZEFjY2Vzc1BvaW50ID0gZWZzLkFjY2Vzc1BvaW50LmZyb21BY2Nlc3NQb2ludEF0dHJpYnV0ZXMoc3RhY2ssICdBY2Nlc3NQb2ludEltcG9ydGVkJywge1xuICBhY2Nlc3NQb2ludElkOiBhY2Nlc3NQb2ludC5hY2Nlc3NQb2ludElkLFxuICBmaWxlU3lzdGVtOiBpbXBvcnRlZEZpbGVTeXN0ZW0sXG59KTtcblxuLy8gdGhpcyBmdW5jdGlvbiB3aWxsIG1vdW50IHRoZSBhY2Nlc3MgcG9pbnQgdG8gJy9tbnQvbXNnJyBhbmQgd3JpdGUgY29udGVudCBvbnRvIC9tbnQvbXNnL2NvbnRlbnRcbmNvbnN0IGxhbWJkYTIgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnTXlMYW1iZGEyJywge1xuICBjb2RlOiBsYW1iZGFDb2RlLFxuICBoYW5kbGVyOiAnaW5kZXgubGFtYmRhX2hhbmRsZXInLFxuICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5QWVRIT05fM183LFxuICB2cGMsXG4gIGZpbGVzeXN0ZW06IGxhbWJkYS5GaWxlU3lzdGVtLmZyb21FZnNBY2Nlc3NQb2ludChcbiAgICBpbXBvcnRlZEFjY2Vzc1BvaW50LFxuICAgICcvbW50L21zZycsXG4gICksXG59KTtcblxuLy8gbGFtYmRhMiBkb2Vzbid0IGhhdmUgZGVwZW5kZW5jaWVzIG9uIE1vdW50VGFyZ2V0cyBiZWNhdXNlIHRoZSBmaWxlU3lzdGVtIGlzIGltcG9ydGVkLlxuLy8gSWRlYWxseSwgbGFtYmRhMiB3b3VsZCBiZSBkZXBsb3llZCBpbiBhbm90aGVyIHN0YWNrIGJ1dCBpbnRlZyBkb2Vzbid0IHN1cHBvcnQgaXQuXG4vLyBXZSBhcmUgYWRkaW5nIGEgZGVwZW5kZW5jeSBvbiB0aGUgZmlyc3QgbGFtYmRhIHRvIHNpbXVsYXRlIHRoaXMgc2l0dWF0aW9uLlxubGFtYmRhMi5ub2RlLmFkZERlcGVuZGVuY3kobGFtYmRhMSk7XG5cbmFwcC5zeW50aCgpO1xuIl19