import { CodeMaker, toCamelCase } from 'codemaker';
import fs = require('fs');
import os = require('os');
import path = require('path');
import { promisify } from 'util';

const mkdtemp = promisify(fs.mkdtemp);
const readFile = promisify(fs.readFile);

interface ConstructDefinition {
  namespace: string;
  className: string;
  id: string;
  props: { [key: string]: any };
}

interface ParameterDefinition {
  id: string;
  props: { [key: string]: any };
}

export interface DisassemblerOptions {
  /**
   * Include a timestamp in the generated output.
   *
   * @default true
   */
  readonly timestamp?: boolean;
}

export async function dasmTypeScript(template: Template, options: DisassemblerOptions = {}) {
  
  // Collect Resources 

  const definitions = new Array<ConstructDefinition>();

  for (const [ id, resource ] of Object.entries(template.Resources || {})) {
    const type = resource.Type;
    const props = resource.Properties || {};

    definitions.push({
      id,
      ...toCfnClassName(type),
      props: capitalizeKeys(props)
    });
  }

  // Collect parameters

  const parameters = new Array<ParameterDefinition>();

  for (const [ id, parameter, ] of Object.entries(template.Parameters || {})) {
    parameters.push({
      id,
      props: capitalizeKeys(parameter)
    });
  }

  const code = new CodeMaker();

  const outFile = 'out.ts';

  code.openFile(outFile);

  const timestamp = options.timestamp !== undefined ? options.timestamp : true;
  const suffix = timestamp ?  `at ${new Date().toISOString()}` : '';

  code.line(`// generated by cdk-dasm ${suffix}`);
  code.line();

  //
  // imports
  //

  code.line(`import { Stack, StackProps, Construct, Fn, CfnParameter } from '@aws-cdk/core';`);

  for (const ns of getUniqueNamespaces(definitions)) {
    const importName = `@aws-cdk/aws-${ns}`;
    code.line(`import ${ns} = require('${importName}');`);
  }

  code.line();

  //
  // stack
  //

  code.openBlock(`export class MyStack extends Stack`);
  code.openBlock(`constructor(scope: Construct, id: string, props: StackProps = {})`);
  code.line(`super(scope, id, props);`);

  // Parameter definitions

  for (const param of parameters) {

    code.indent(`const ${param.id} = new CfnParameter(this, '${param.id}', {`);

    // Default is needed, so if not supplied in CFN, then we'll
    // allow it to be passed in context during `cdk synth`
    if (!('default' in param.props)) {
      code.line(`default: this.node.tryGetContext('${param.id}'),`); // single line
    }

    printProps(param.props, code);

    code.unindent('});');
  }

  // Resource definitions

  for (const def of definitions) {

    // no props
    if (Object.keys(def.props).length === 0) {
      code.line(`new ${def.className}(this, '${def.id}');`);
      continue;
    }

    code.indent(`new ${def.className}(this, '${def.id}', {`);

    printProps(def.props, code);

    code.unindent('});');
  }

  code.closeBlock();

  code.closeBlock(' // MyStack');

  code.closeFile(outFile);

  const workdir = await mkdtemp(path.join(os.tmpdir(), 'cdk-dasm-typescript'));
  await code.save(workdir);

  return (await readFile(path.join(workdir, outFile))).toString();
}

function printProps(props: { [key: string]: any }, code: CodeMaker) {
  for (const [key, value] of Object.entries(props)) {
    const json = JSON.stringify(value, undefined, 2);
    const [ first, ...rest ] = json.split('\n');

    if (rest.length === 0) {
      code.line(`${key}: ${first},`); // single line
    } else {
      code.line(`${key}: ${first}`);
      rest.forEach((r, i) => {
        code.line(r + ((i === rest.length - 1) ? ',' : ''));
      });
    }
  }
}

function capitalizeKeys(x: any): any {
  if (typeof(x) === 'function') {
    throw new Error(`function?`);
  }

  if (Array.isArray(x)) {
    return x.map(i => capitalizeKeys(i));
  }

  if (typeof(x) === 'object') {
    const ret: { [key: string]: any } = {};
    for (const [ key, value ] of Object.entries(x)) {
      let newKey;
      if (key === 'Ref' || key.startsWith('Fn::')) {
        newKey = key;
      } else {
        newKey = toCamelCase(key);
      }

      ret[newKey] = capitalizeKeys(value);
    }
    return ret;
  }

  // primitive
  return x;
}

function toCfnClassName(resourceType: string) {
  const [ , namespace, type ] = resourceType.split('::');
  const className = `${namespace.toLocaleLowerCase()}.Cfn${type}`;
  return { namespace: namespace.toLocaleLowerCase(), className };
}

function getUniqueNamespaces(definitions: Array<ConstructDefinition>): String[] {
  return [... new Set(definitions.map(definition => definition.namespace))];
}

interface Template {
  Resources: { [id: string]: Resource };
  Parameters: { [id: string]: Parameter};
}

interface Resource {
  Type: string;
  Properties?: { [prop: string]: any }
}

interface Parameter {
  [prop: string]: any
}
