import { ChannelNamespace, ChannelNamespaceOptions } from './channel-namespace';
import { Grant, IGrantable } from '../../aws-iam';
import { IResource, Resource } from '../../core';

/**
 * Interface for Event API
 */
export interface IApi extends IResource {

  /**
   * The unique identifier for the AWS AppSync Api generated by the service.
   *
   * @attribute
   */
  readonly apiId: string;

  /**
   * The ARN of the AWS AppSync Api.
   *
   * @attribute
   */
  readonly apiArn: string;

  /**
   * The domain name of the Api's HTTP endpoint.
   *
   * @attribute
   */
  readonly dnsHttp: string;

  /**
   * The domain name of the Api's real-time endpoint.
   *
   * @attribute
   */
  readonly dnsRealTime: string;

  /**
   * Adds a channel namespace to the Api.
   */
  addChannelNamespace(id: string, props: ChannelNamespaceOptions): ChannelNamespace;

  /**
   * Adds an IAM policy statement associated with this api to an IAM principal's policy.
   *
   * @param grantee The principal
   * @param actions The actions that should be granted to the principal (i.e. appsync:EventConnect )
   */
  grant(grantee: IGrantable, ...actions: string[]): Grant;

  /**
   * Adds an IAM policy statement to publish to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  grantPublish(grantee: IGrantable): Grant;

  /**
   * Adds an IAM policy statement to subscribe to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  grantSubscribe(grantee: IGrantable): Grant;

  /**
   * Adds an IAM policy statement to publish and subscribe to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  grantPublishSubscribe(grantee: IGrantable): Grant;
}

/**
 * Base Class for Event API
 */
export abstract class ApiBase extends Resource implements IApi {

  /**
   * The unique identifier for the AWS AppSync Api generated by the service.
   */
  public abstract readonly apiId: string;

  /**
   * The ARN of the AWS AppSync Api.
   */
  public abstract readonly apiArn: string;

  /**
   * The domain name of the Api's HTTP endpoint.
   */
  public abstract readonly dnsHttp: string;

  /**
   * The domain name of the Api's real-time endpoint.
   */
  public abstract readonly dnsRealTime: string;

  /**
   * Adds a channel namespace to the Api.
   */
  public addChannelNamespace(id: string, props: ChannelNamespaceOptions): ChannelNamespace {
    const channelNamespace = new ChannelNamespace(this, id, {
      api: this,
      ...props,
    });

    return channelNamespace;
  };

  /**
   * Adds an IAM policy statement associated with this api to an IAM principal's policy.
   *
   * @param grantee The principal
   * @param actions The actions that should be granted to the principal (i.e. appsync:EventConnect )
   */
  public grant(grantee: IGrantable, ...actions: string[]): Grant {
    return Grant.addToPrincipal({
      grantee,
      actions,
      resourceArns: [`${this.apiId}/*`],
      scope: this,
    });
  }

  /**
   * Adds an IAM policy statement to publish to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  public grantPublish(grantee: IGrantable): Grant {
    return this.grant(grantee, 'appsync:EventConnect', 'appsync:EventPublish');
  }

  /**
   * Adds an IAM policy statement to subscribe to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  public grantSubscribe(grantee: IGrantable): Grant {
    return this.grant(grantee, 'appsync:EventConnect', 'appsync:EventSubscribe');
  }

  /**
   * Adds an IAM policy statement to publish and subscribe to this API for an IAM principal's policy.
   *
   * @param grantee The principal
   */
  public grantPublishSubscribe(grantee: IGrantable): Grant {
    return this.grant(grantee, 'appsync:EventConnect', 'appsync:EventPublish', 'appsync:EventSubscribe');
  }
}
