{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "description": "CDK CLI Wrapper Library",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "5.0.2 (build fc559a8)",
  "keywords": [
    "aws",
    "cdk"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "cdk-cli-wrapper",
  "readme": {
    "markdown": "# cdk-cli-wrapper\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nCDK CLI Wrapper Library.\n\nInternal only for now.\n\n## Overview\n\nThis package provides a library which wraps the CDK CLI, allowing you to interact with the CLI programmatically.\n\nCurrently this package provides wrappers for:\n\n- `cdk deploy`\n- `cdk synth`\n- `cdk destroy`\n- `cdk list`\n\n## Usage\n\nFirst create a new `CdkCliWrapper` with the directory in which you want to execute commands,\nand optionally any environment variables that you want to include in the execution environment.\n\n```ts\nnew CdkCliWrapper({\n  directory: '/path/to/project',\n  env: {\n    KEY: 'value',\n  },\n});\n```\n\n### deploy\n\n```ts\nconst cdk = new CdkCliWrapper({\n  directory: '/project/path',\n});\n\ncdk.deploy({\n  app: 'node bin/my-app.js',\n  stacks: ['my-test-stack'],\n});\n```\n\n### synth\n\n```ts\nconst cdk = new CdkCliWrapper({\n  directory: '/project/path',\n});\n\ncdk.synth({\n  app: 'node bin/my-app.js',\n  stacks: ['my-test-stack'],\n});\n```\n\n### destroy\n\n```ts\nconst cdk = new CdkCliWrapper({\n  directory: '/project/path',\n});\n\ncdk.destroy({\n  app: 'node bin/my-app.js',\n  stacks: ['my-test-stack'],\n});\n```\n\n### list\n\n```ts\nconst cdk = new CdkCliWrapper({\n  directory: '/project/path',\n});\n\ncdk.list({\n  app: 'node bin/my-app.js',\n  stacks: ['*'],\n});\n```\n"
  },
  "repository": {
    "directory": "packages/cdk-cli-wrapper",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.CdkCliWrapper",
      "packageId": "Amazon.CDK.CdkCliWrapper"
    },
    "java": {
      "maven": {
        "artifactId": "cdk-cli-wrapper",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.cdkcliwrapper"
    },
    "js": {
      "npm": "cdk-cli-wrapper"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 2"
      ],
      "distName": "aws-cdk.cdk-cli-wrapper",
      "module": "aws_cdk.cdk_cli_wrapper"
    }
  },
  "types": {
    "cdk-cli-wrapper.CdkCliWrapper": {
      "assembly": "cdk-cli-wrapper",
      "docs": {
        "stability": "experimental",
        "summary": "Provides a programmatic interface for interacting with the CDK CLI by wrapping the CLI with exec."
      },
      "fqn": "cdk-cli-wrapper.CdkCliWrapper",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/cdk-wrapper.ts",
          "line": 130
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "cdk-cli-wrapper.CdkCliWrapperOptions"
            }
          }
        ]
      },
      "interfaces": [
        "cdk-cli-wrapper.ICdk"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cdk-wrapper.ts",
        "line": 124
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "cdk deploy."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 162
          },
          "name": "deploy",
          "overrides": "cdk-cli-wrapper.ICdk",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.DeployOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "cdk destroy."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 192
          },
          "name": "destroy",
          "overrides": "cdk-cli-wrapper.ICdk",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.DestroyOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "cdk list."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 147
          },
          "name": "list",
          "overrides": "cdk-cli-wrapper.ICdk",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.ListOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "cdk synth."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 209
          },
          "name": "synth",
          "overrides": "cdk-cli-wrapper.ICdk",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.SynthOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The CLI has a pretty slow startup time because of all the modules it needs to load,\nBypass it to be quicker!",
            "stability": "experimental",
            "summary": "Do a CDK synth, mimicking the CLI (without actually using it)."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 230
          },
          "name": "synthFast",
          "overrides": "cdk-cli-wrapper.ICdk",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.SynthFastOptions"
              }
            }
          ]
        }
      ],
      "name": "CdkCliWrapper",
      "symbolId": "lib/cdk-wrapper:CdkCliWrapper"
    },
    "cdk-cli-wrapper.CdkCliWrapperOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "AWS CDK client that provides an API to programatically execute the CDK CLI by wrapping calls to exec the CLI."
      },
      "fqn": "cdk-cli-wrapper.CdkCliWrapperOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cdk-wrapper.ts",
        "line": 90
      },
      "name": "CdkCliWrapperOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The directory to run the cdk commands from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 94
          },
          "name": "directory",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'aws-cdk/bin/cdk'",
            "stability": "experimental",
            "summary": "The path to the cdk executable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 110
          },
          "name": "cdkExecutable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional env vars",
            "stability": "experimental",
            "summary": "Additional environment variables to set in the execution environment that will be running the cdk commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 103
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Show the output from running the CDK CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 117
          },
          "name": "showOutput",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cdk-wrapper:CdkCliWrapperOptions"
    },
    "cdk-cli-wrapper.DefaultCdkOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Default CDK CLI options that apply to all commands."
      },
      "fqn": "cdk-cli-wrapper.DefaultCdkOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/commands/common.ts",
        "line": 24
      },
      "name": "DefaultCdkOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Requried if `stacks` is not set",
            "stability": "experimental",
            "summary": "Deploy all stacks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 41
          },
          "name": "all",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- read from cdk.json",
            "stability": "experimental",
            "summary": "command-line for executing your app or a cloud assembly directory e.g. \"node bin/my-app.js\" or \"cdk.out\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 51
          },
          "name": "app",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include \"aws:asset:*\" CloudFormation metadata for resources that use assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 171
          },
          "name": "assetMetadata",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- read from AWS_CA_BUNDLE environment variable",
            "stability": "experimental",
            "summary": "Path to CA certificate to use when validating HTTPS requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 143
          },
          "name": "caBundlePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Show colors and other style from console output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 201
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context",
            "stability": "experimental",
            "summary": "Additional context."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 66
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "enable emission of additional debugging information, such as creation stack traces of tokens."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 120
          },
          "name": "debug",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- guess EC2 instance status",
            "stability": "experimental",
            "summary": "Force trying to fetch EC2 instance credentials."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 150
          },
          "name": "ec2Creds",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Ignores synthesis errors, which will likely produce an invalid output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 97
          },
          "name": "ignoreErrors",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Use JSON output instead of YAML when templates are printed to STDOUT."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 105
          },
          "name": "json",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Synthesis fails if this is disabled and context lookups need\nto be performed",
            "stability": "experimental",
            "summary": "Perform context lookups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 90
          },
          "name": "lookups",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Show relevant notices."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 194
          },
          "name": "notices",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "cdk.out",
            "stability": "experimental",
            "summary": "Emits the synthesized cloud assembly into a directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 187
          },
          "name": "output",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include \"aws:cdk:path\" CloudFormation metadata for each resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 164
          },
          "name": "pathMetadata",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no profile is used",
            "stability": "experimental",
            "summary": "Use the indicated AWS profile as the default environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 127
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no proxy",
            "remarks": "Will read from\nHTTPS_PROXY environment if specified",
            "stability": "experimental",
            "summary": "Use the indicated proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 135
          },
          "name": "proxy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use the bootstrap cfn-exec role",
            "stability": "experimental",
            "summary": "Role to pass to CloudFormation for deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 59
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Requried if `all` is not set",
            "stability": "experimental",
            "summary": "List of stacks to deploy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 32
          },
          "name": "stacks",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Needed for local debugging the source files with SAM CLI",
            "stability": "experimental",
            "summary": "Copy assets to the output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 180
          },
          "name": "staging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not construct stacks with warnings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 80
          },
          "name": "strict",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Print trace for stack warnings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 73
          },
          "name": "trace",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "show debug logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 112
          },
          "name": "verbose",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include \"AWS::CDK::Metadata\" resource in synthesized templates."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/common.ts",
            "line": 157
          },
          "name": "versionReporting",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/commands/common:DefaultCdkOptions"
    },
    "cdk-cli-wrapper.DeployOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to use with cdk deploy."
      },
      "fqn": "cdk-cli-wrapper.DeployOptions",
      "interfaces": [
        "cdk-cli-wrapper.DefaultCdkOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/commands/deploy.ts",
        "line": 6
      },
      "name": "DeployOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- auto generate a name",
            "remarks": "If not provided, a name will be generated automatically.",
            "stability": "experimental",
            "summary": "Optional name to use for the CloudFormation change set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 34
          },
          "name": "changeSetName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether we are on a CI system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 96
          },
          "name": "ci",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Only perform action on the given stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 12
          },
          "name": "exclusively",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether to execute the ChangeSet Not providing `execute` parameter will result in execution of ChangeSet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 68
          },
          "name": "execute",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Always deploy, even if templates are identical."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 40
          },
          "name": "force",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no notifications",
            "stability": "experimental",
            "summary": "ARNs of SNS topics that CloudFormation will notify with stack related events."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 54
          },
          "name": "notificationArns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Outputs are not written to any file",
            "stability": "experimental",
            "summary": "Path to file where stack outputs will be written after a successful deploy as JSON."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 89
          },
          "name": "outputsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "Additional parameters for CloudFormation at deploy time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 74
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "StackActivityProgress.EVENTS",
            "remarks": "The default in the CLI is StackActivityProgress.BAR, but\nsince the cli-wrapper will most likely be run in automation it makes\nmore sense to set the default to StackActivityProgress.EVENTS",
            "stability": "experimental",
            "summary": "Display mode for stack activity events."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 107
          },
          "name": "progress",
          "optional": true,
          "type": {
            "fqn": "cdk-cli-wrapper.StackActivityProgress"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RequireApproval.Never",
            "stability": "experimental",
            "summary": "What kind of security changes require approval."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 61
          },
          "name": "requireApproval",
          "optional": true,
          "type": {
            "fqn": "cdk-cli-wrapper.RequireApproval"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- do not reuse assets",
            "stability": "experimental",
            "summary": "Reuse the assets with the given asset IDs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 26
          },
          "name": "reuseAssets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Rollback failed deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 47
          },
          "name": "rollback",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CDKToolkit",
            "stability": "experimental",
            "summary": "Name of the toolkit stack to use/deploy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 19
          },
          "name": "toolkitStackName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If not set, all parameters must be specified for every deployment.",
            "stability": "experimental",
            "summary": "Use previous values for unspecified parameters."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/deploy.ts",
            "line": 83
          },
          "name": "usePreviousParameters",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/commands/deploy:DeployOptions"
    },
    "cdk-cli-wrapper.DestroyOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to use with cdk destroy."
      },
      "fqn": "cdk-cli-wrapper.DestroyOptions",
      "interfaces": [
        "cdk-cli-wrapper.DefaultCdkOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/commands/destroy.ts",
        "line": 6
      },
      "name": "DestroyOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Only destroy the given stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/destroy.ts",
            "line": 19
          },
          "name": "exclusively",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not ask for permission before destroying stacks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/destroy.ts",
            "line": 12
          },
          "name": "force",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/commands/destroy:DestroyOptions"
    },
    "cdk-cli-wrapper.Environment": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "deprecated": "Use raw property bags instead (object literals, `Map<String,Object>`, etc... )",
        "stability": "deprecated",
        "summary": "Additional environment variables to set in the execution environment."
      },
      "fqn": "cdk-cli-wrapper.Environment",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cdk-wrapper.ts",
        "line": 77
      },
      "name": "Environment",
      "symbolId": "lib/cdk-wrapper:Environment"
    },
    "cdk-cli-wrapper.ICdk": {
      "assembly": "cdk-cli-wrapper",
      "docs": {
        "stability": "experimental",
        "summary": "AWS CDK CLI operations."
      },
      "fqn": "cdk-cli-wrapper.ICdk",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cdk-wrapper.ts",
        "line": 7
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "cdk deploy."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 12
          },
          "name": "deploy",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.DeployOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "cdk destroy."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 22
          },
          "name": "destroy",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.DestroyOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "cdk list."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 27
          },
          "name": "list",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.ListOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "cdk synth."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 17
          },
          "name": "synth",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.SynthOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "cdk synth fast."
          },
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 32
          },
          "name": "synthFast",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "cdk-cli-wrapper.SynthFastOptions"
              }
            }
          ]
        }
      ],
      "name": "ICdk",
      "symbolId": "lib/cdk-wrapper:ICdk"
    },
    "cdk-cli-wrapper.ListOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for cdk list."
      },
      "fqn": "cdk-cli-wrapper.ListOptions",
      "interfaces": [
        "cdk-cli-wrapper.DefaultCdkOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/commands/list.ts",
        "line": 6
      },
      "name": "ListOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Display environment information for each stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/list.ts",
            "line": 12
          },
          "name": "long",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/commands/list:ListOptions"
    },
    "cdk-cli-wrapper.RequireApproval": {
      "assembly": "cdk-cli-wrapper",
      "docs": {
        "stability": "experimental",
        "summary": "In what scenarios should the CLI ask for approval."
      },
      "fqn": "cdk-cli-wrapper.RequireApproval",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/commands/common.ts",
        "line": 4
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Never ask for approval."
          },
          "name": "NEVER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Prompt for approval for any type  of change to the stack."
          },
          "name": "ANYCHANGE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Only prompt for approval if there are security related changes."
          },
          "name": "BROADENING"
        }
      ],
      "name": "RequireApproval",
      "symbolId": "lib/commands/common:RequireApproval"
    },
    "cdk-cli-wrapper.StackActivityProgress": {
      "assembly": "cdk-cli-wrapper",
      "docs": {
        "stability": "experimental",
        "summary": "Supported display modes for stack deployment activity."
      },
      "fqn": "cdk-cli-wrapper.StackActivityProgress",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/commands/deploy.ts",
        "line": 113
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Displays a progress bar with only the events for the resource currently being deployed."
          },
          "name": "BAR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Displays complete history with all CloudFormation stack events."
          },
          "name": "EVENTS"
        }
      ],
      "name": "StackActivityProgress",
      "symbolId": "lib/commands/deploy:StackActivityProgress"
    },
    "cdk-cli-wrapper.SynthFastOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for synthing and bypassing the CDK CLI."
      },
      "fqn": "cdk-cli-wrapper.SynthFastOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cdk-wrapper.ts",
        "line": 38
      },
      "name": "SynthFastOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "e.g. \"node 'bin/my-app.ts'\"\nor 'go run main.go'",
            "stability": "experimental",
            "summary": "The command to use to execute the app. This is typically the same thing that normally gets passed to `--app`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 47
          },
          "name": "execCmd",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context",
            "stability": "experimental",
            "summary": "Additional context."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 61
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional env",
            "stability": "experimental",
            "summary": "Additional environment variables to set in the execution environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 69
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "cdk.out",
            "stability": "experimental",
            "summary": "Emits the synthesized cloud assembly into a directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cdk-wrapper.ts",
            "line": 54
          },
          "name": "output",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cdk-wrapper:SynthFastOptions"
    },
    "cdk-cli-wrapper.SynthOptions": {
      "assembly": "cdk-cli-wrapper",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to use with cdk synth."
      },
      "fqn": "cdk-cli-wrapper.SynthOptions",
      "interfaces": [
        "cdk-cli-wrapper.DefaultCdkOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/commands/synth.ts",
        "line": 6
      },
      "name": "SynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Only synthesize the given stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/synth.ts",
            "line": 27
          },
          "name": "exclusively",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false;",
            "stability": "experimental",
            "summary": "Do not output CloudFormation Template to stdout."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/synth.ts",
            "line": 20
          },
          "name": "quiet",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true;",
            "stability": "experimental",
            "summary": "After synthesis, validate stacks with the \"validateOnSynth\" attribute set (can also be controlled with CDK_VALIDATION)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/commands/synth.ts",
            "line": 14
          },
          "name": "validation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/commands/synth:SynthOptions"
    }
  },
  "version": "0.0.0",
  "fingerprint": "7DPD0yMgHZTMx1AEyOkTee0ioLeClu0VVOoQhq0450o="
}