import { Environment, SynthesizedStack } from '@aws-cdk/cx-api';
import { deployStack, DeployStackResult } from './deploy-stack';
import { SDK } from './util/sdk';

// tslint:disable:max-line-length

export const BUCKET_NAME_OUTPUT = 'BucketName';
export const BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';

/**
 * Possible customizations for the CDK Bootstrap stack.
 */
export interface BootstrapEnvironmentProps {
  /**
   * The name to be given to the CDK Bootstrap bucket.
   *
   * @default a name is generated by CloudFormation.
   */
  readonly bucketName?: string;

  /**
   * The ID of an existing KMS key to be used for encrypting items in the bucket.
   *
   * @default the default KMS key for S3 will be used.
   */
  readonly kmsKeyId?: string;
}

export async function bootstrapEnvironment(environment: Environment, aws: SDK, toolkitStackName: string, roleArn: string | undefined, props: BootstrapEnvironmentProps = {}): Promise<DeployStackResult> {
  const synthesizedStack: SynthesizedStack = {
    environment,
    metadata: {},
    template: {
      Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
      Resources: {
        StagingBucket: {
          Type: 'AWS::S3::Bucket',
          Properties: {
            AccessControl: 'Private',
            BucketEncryption: {
              ServerSideEncryptionConfiguration: [{
                ServerSideEncryptionByDefault: {
                  SSEAlgorithm: 'aws:kms',
                  KMSMasterKeyID: props.kmsKeyId,
                }
              }]
            }
          }
        }
      },
      Outputs: {
        [BUCKET_NAME_OUTPUT]: {
          Description: "The name of the S3 bucket owned by the CDK toolkit stack",
          Value: { Ref: "StagingBucket" }
        },
        [BUCKET_DOMAIN_NAME_OUTPUT]: {
          Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
          Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] }
        }
      }
    },
    name: toolkitStackName,
  };
  if (props.bucketName) {
    synthesizedStack.template.Resources.StagingBucket.Properties.BucketName = props.bucketName;
  }
  return await deployStack({ stack: synthesizedStack, sdk: aws, roleArn });
}
