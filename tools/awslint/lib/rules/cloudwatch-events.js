"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_1 = require("../linter");
const construct_1 = require("./construct");
const core_types_1 = require("./core-types");
exports.eventsLinter = new linter_1.Linter(assembly => assembly.classes
    .filter(t => core_types_1.CoreTypes.isConstructClass(t))
    .map(construct => new EventsReflection(construct)));
class EventsReflection extends construct_1.ConstructReflection {
    get directEventMethods() {
        return this.classType.allMethods.filter(isDirectEventMethod);
    }
    get cloudTrailEventMethods() {
        return this.classType.allMethods.filter(isCloudTrailEventMethod);
    }
}
exports.EventsReflection = EventsReflection;
const ON_EVENT_OPTIONS_FQN = '@aws-cdk/aws-events.OnEventOptions';
const EVENT_RULE_FQN = '@aws-cdk/aws-events.Rule';
exports.eventsLinter.add({
    code: 'events-in-interface',
    message: `'onXxx()' methods should also be defined on construct interface`,
    eval: e => {
        for (const method of e.ctx.directEventMethods.concat(e.ctx.cloudTrailEventMethods)) {
            e.assert(!e.ctx.interfaceType || e.ctx.interfaceType.allMethods.some(m => m.name === method.name), `${e.ctx.fqn}.${method.name}`);
        }
    }
});
exports.eventsLinter.add({
    code: 'events-generic',
    message: `if there are specific 'onXxx()' methods, there should also be a generic 'onEvent()' method`,
    eval: e => {
        e.assert(e.ctx.directEventMethods.length === 0 || e.ctx.classType.allMethods.some(m => m.name === 'onEvent'), e.ctx.fqn);
    }
});
exports.eventsLinter.add({
    code: 'events-generic-cloudtrail',
    message: `if there are specific 'onCloudTrailXxx()' methods, there should also be a generic 'onCloudTrailEvent()' method`,
    eval: e => {
        e.assert(e.ctx.cloudTrailEventMethods.length === 0 || e.ctx.classType.allMethods.some(m => m.name === 'onCloudTrailEvent'), e.ctx.fqn);
    }
});
exports.eventsLinter.add({
    code: 'events-method-signature',
    message: `all 'onXxx()' methods should have the CloudWatch Events signature (id: string, options: events.OnEventOptions = {}) => events.Rule`,
    eval: e => {
        for (const method of e.ctx.directEventMethods) {
            e.assertSignature(method, {
                parameters: [
                    { type: 'string' },
                    { type: ON_EVENT_OPTIONS_FQN, subtypeAllowed: true, optional: true },
                ],
                returns: EVENT_RULE_FQN
            });
        }
    }
});
function isDirectEventMethod(m) {
    return m.name.startsWith('on') && !m.name.startsWith('onCloudTrail');
}
function isCloudTrailEventMethod(m) {
    return m.name.startsWith('onCloudTrail');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWR3YXRjaC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG91ZHdhdGNoLWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHNDQUFtQztBQUNuQywyQ0FBa0Q7QUFDbEQsNkNBQXlDO0FBRTVCLFFBQUEsWUFBWSxHQUFHLElBQUksZUFBTSxDQUFtQixRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPO0tBQ2xGLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEQsTUFBYSxnQkFBaUIsU0FBUSwrQkFBbUI7SUFDdkQsSUFBVyxrQkFBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBVyxzQkFBc0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBQ0Y7QUFSRCw0Q0FRQztBQUVELE1BQU0sb0JBQW9CLEdBQUcsb0NBQW9DLENBQUM7QUFDbEUsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUM7QUFFbEQsb0JBQVksQ0FBQyxHQUFHLENBQUM7SUFDZixJQUFJLEVBQUUscUJBQXFCO0lBQzNCLE9BQU8sRUFBRSxpRUFBaUU7SUFDMUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ1IsS0FBSyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7WUFDbEYsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ25JO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILG9CQUFZLENBQUMsR0FBRyxDQUFDO0lBQ2YsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QixPQUFPLEVBQUUsNEZBQTRGO0lBQ3JHLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0gsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILG9CQUFZLENBQUMsR0FBRyxDQUFDO0lBQ2YsSUFBSSxFQUFFLDJCQUEyQjtJQUNqQyxPQUFPLEVBQUUsZ0hBQWdIO0lBQ3pILElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6SSxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsb0JBQVksQ0FBQyxHQUFHLENBQUM7SUFDZixJQUFJLEVBQUUseUJBQXlCO0lBQy9CLE9BQU8sRUFBRSxvSUFBb0k7SUFDN0ksSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ1IsS0FBSyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFO1lBQzdDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFO2dCQUN4QixVQUFVLEVBQUU7b0JBQ1YsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO29CQUNsQixFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7aUJBQ3JFO2dCQUNELE9BQU8sRUFBRSxjQUFjO2FBQ3hCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILFNBQVMsbUJBQW1CLENBQUMsQ0FBaUI7SUFDNUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFFRCxTQUFTLHVCQUF1QixDQUFDLENBQWlCO0lBQ2hELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJlZmxlY3QgZnJvbSAnanNpaS1yZWZsZWN0JztcbmltcG9ydCB7IExpbnRlciB9IGZyb20gJy4uL2xpbnRlcic7XG5pbXBvcnQgeyBDb25zdHJ1Y3RSZWZsZWN0aW9uIH0gZnJvbSAnLi9jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgQ29yZVR5cGVzIH0gZnJvbSAnLi9jb3JlLXR5cGVzJztcblxuZXhwb3J0IGNvbnN0IGV2ZW50c0xpbnRlciA9IG5ldyBMaW50ZXI8RXZlbnRzUmVmbGVjdGlvbj4oYXNzZW1ibHkgPT4gYXNzZW1ibHkuY2xhc3Nlc1xuICAuZmlsdGVyKHQgPT4gQ29yZVR5cGVzLmlzQ29uc3RydWN0Q2xhc3ModCkpXG4gIC5tYXAoY29uc3RydWN0ID0+IG5ldyBFdmVudHNSZWZsZWN0aW9uKGNvbnN0cnVjdCkpKTtcblxuZXhwb3J0IGNsYXNzIEV2ZW50c1JlZmxlY3Rpb24gZXh0ZW5kcyBDb25zdHJ1Y3RSZWZsZWN0aW9uIHtcbiAgcHVibGljIGdldCBkaXJlY3RFdmVudE1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xhc3NUeXBlLmFsbE1ldGhvZHMuZmlsdGVyKGlzRGlyZWN0RXZlbnRNZXRob2QpO1xuICB9XG5cbiAgcHVibGljIGdldCBjbG91ZFRyYWlsRXZlbnRNZXRob2RzKCkge1xuICAgIHJldHVybiB0aGlzLmNsYXNzVHlwZS5hbGxNZXRob2RzLmZpbHRlcihpc0Nsb3VkVHJhaWxFdmVudE1ldGhvZCk7XG4gIH1cbn1cblxuY29uc3QgT05fRVZFTlRfT1BUSU9OU19GUU4gPSAnQGF3cy1jZGsvYXdzLWV2ZW50cy5PbkV2ZW50T3B0aW9ucyc7XG5jb25zdCBFVkVOVF9SVUxFX0ZRTiA9ICdAYXdzLWNkay9hd3MtZXZlbnRzLlJ1bGUnO1xuXG5ldmVudHNMaW50ZXIuYWRkKHtcbiAgY29kZTogJ2V2ZW50cy1pbi1pbnRlcmZhY2UnLFxuICBtZXNzYWdlOiBgJ29uWHh4KCknIG1ldGhvZHMgc2hvdWxkIGFsc28gYmUgZGVmaW5lZCBvbiBjb25zdHJ1Y3QgaW50ZXJmYWNlYCxcbiAgZXZhbDogZSA9PiB7XG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgZS5jdHguZGlyZWN0RXZlbnRNZXRob2RzLmNvbmNhdChlLmN0eC5jbG91ZFRyYWlsRXZlbnRNZXRob2RzKSkge1xuICAgICAgZS5hc3NlcnQoIWUuY3R4LmludGVyZmFjZVR5cGUgfHwgZS5jdHguaW50ZXJmYWNlVHlwZS5hbGxNZXRob2RzLnNvbWUobSA9PiBtLm5hbWUgPT09IG1ldGhvZC5uYW1lKSwgYCR7ZS5jdHguZnFufS4ke21ldGhvZC5uYW1lfWApO1xuICAgIH1cbiAgfVxufSk7XG5cbmV2ZW50c0xpbnRlci5hZGQoe1xuICBjb2RlOiAnZXZlbnRzLWdlbmVyaWMnLFxuICBtZXNzYWdlOiBgaWYgdGhlcmUgYXJlIHNwZWNpZmljICdvblh4eCgpJyBtZXRob2RzLCB0aGVyZSBzaG91bGQgYWxzbyBiZSBhIGdlbmVyaWMgJ29uRXZlbnQoKScgbWV0aG9kYCxcbiAgZXZhbDogZSA9PiB7XG4gICAgZS5hc3NlcnQoZS5jdHguZGlyZWN0RXZlbnRNZXRob2RzLmxlbmd0aCA9PT0gMCB8fCBlLmN0eC5jbGFzc1R5cGUuYWxsTWV0aG9kcy5zb21lKG0gPT4gbS5uYW1lID09PSAnb25FdmVudCcpLCBlLmN0eC5mcW4pO1xuICB9XG59KTtcblxuZXZlbnRzTGludGVyLmFkZCh7XG4gIGNvZGU6ICdldmVudHMtZ2VuZXJpYy1jbG91ZHRyYWlsJyxcbiAgbWVzc2FnZTogYGlmIHRoZXJlIGFyZSBzcGVjaWZpYyAnb25DbG91ZFRyYWlsWHh4KCknIG1ldGhvZHMsIHRoZXJlIHNob3VsZCBhbHNvIGJlIGEgZ2VuZXJpYyAnb25DbG91ZFRyYWlsRXZlbnQoKScgbWV0aG9kYCxcbiAgZXZhbDogZSA9PiB7XG4gICAgZS5hc3NlcnQoZS5jdHguY2xvdWRUcmFpbEV2ZW50TWV0aG9kcy5sZW5ndGggPT09IDAgfHwgZS5jdHguY2xhc3NUeXBlLmFsbE1ldGhvZHMuc29tZShtID0+IG0ubmFtZSA9PT0gJ29uQ2xvdWRUcmFpbEV2ZW50JyksIGUuY3R4LmZxbik7XG4gIH1cbn0pO1xuXG5ldmVudHNMaW50ZXIuYWRkKHtcbiAgY29kZTogJ2V2ZW50cy1tZXRob2Qtc2lnbmF0dXJlJyxcbiAgbWVzc2FnZTogYGFsbCAnb25YeHgoKScgbWV0aG9kcyBzaG91bGQgaGF2ZSB0aGUgQ2xvdWRXYXRjaCBFdmVudHMgc2lnbmF0dXJlIChpZDogc3RyaW5nLCBvcHRpb25zOiBldmVudHMuT25FdmVudE9wdGlvbnMgPSB7fSkgPT4gZXZlbnRzLlJ1bGVgLFxuICBldmFsOiBlID0+IHtcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBlLmN0eC5kaXJlY3RFdmVudE1ldGhvZHMpIHtcbiAgICAgIGUuYXNzZXJ0U2lnbmF0dXJlKG1ldGhvZCwge1xuICAgICAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICAgICAgeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgIHsgdHlwZTogT05fRVZFTlRfT1BUSU9OU19GUU4sIHN1YnR5cGVBbGxvd2VkOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9LFxuICAgICAgICBdLFxuICAgICAgICByZXR1cm5zOiBFVkVOVF9SVUxFX0ZRTlxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gaXNEaXJlY3RFdmVudE1ldGhvZChtOiByZWZsZWN0Lk1ldGhvZCkge1xuICByZXR1cm4gbS5uYW1lLnN0YXJ0c1dpdGgoJ29uJykgJiYgISBtLm5hbWUuc3RhcnRzV2l0aCgnb25DbG91ZFRyYWlsJyk7XG59XG5cbmZ1bmN0aW9uIGlzQ2xvdWRUcmFpbEV2ZW50TWV0aG9kKG06IHJlZmxlY3QuTWV0aG9kKSB7XG4gIHJldHVybiBtLm5hbWUuc3RhcnRzV2l0aCgnb25DbG91ZFRyYWlsJyk7XG59XG4iXX0=