"use strict";
/**
 * Jest/Nodeunit compatibility shim
 *
 * Use this to mass-convert Nodeunit tests to Jest tests.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeunitShim = exports.Test = void 0;
/**
 * Compatibility shim test
 */
class Test {
    constructor(cb) {
        this.cb = cb;
    }
    equal(a, b, _message) {
        expect(a).toEqual(b);
    }
    notEqual(a, b, _message) {
        expect(a).not.toEqual(b);
    }
    equals(a, b, _message) {
        expect(a).toEqual(b);
    }
    strictEqual(a, b, _message) {
        expect(a).toEqual(b);
    }
    deepEqual(a, b, _message) {
        expect(a).toEqual(b);
    }
    notDeepEqual(a, b, _message) {
        expect(a).not.toEqual(b);
    }
    ok(a, _message) {
        expect(a).toBeTruthy();
    }
    same(a, b) {
        expect(a).toBe(b);
    }
    throws(block, error, _message) {
        expect(block).toThrow(error);
    }
    doesNotThrow(block, error, _message) {
        expect(block).not.toThrow(error);
    }
    done() {
        this.cb();
    }
}
exports.Test = Test;
function nodeunitShim(exports) {
    if (exports.setUp) {
        beforeEach(() => {
            return new Promise(ok => {
                exports.setUp(ok);
            });
        });
    }
    if (exports.tearDown) {
        afterEach(() => {
            return new Promise(ok => {
                exports.tearDown(ok);
            });
        });
    }
    for (const [testName, testObj] of Object.entries(exports)) {
        if (testName === 'setUp' || testName === 'tearDown') {
            continue;
        }
        if (typeof testObj === 'object') {
            // It's a suite
            describe(testName, () => {
                nodeunitShim(testObj);
            });
        }
        else {
            // It's a test
            test(testName, () => new Promise(ok => {
                testObj(new Test(ok));
            }));
        }
    }
}
exports.nodeunitShim = nodeunitShim;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7O0FBRUg7O0dBRUc7QUFDSCxNQUFhLElBQUk7SUFDZixZQUE2QixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUMzQyxDQUFDO0lBRU0sS0FBSyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsUUFBaUI7UUFDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sUUFBUSxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsUUFBaUI7UUFDL0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLFFBQWlCO1FBQzdDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLFFBQWlCO1FBQ2xELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFNBQVMsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLFFBQWlCO1FBQ2hELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFlBQVksQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLFFBQWlCO1FBQ25ELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxFQUFFLENBQUMsQ0FBTSxFQUFFLFFBQWlCO1FBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU0sSUFBSSxDQUFDLENBQU0sRUFBRSxDQUFNO1FBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFnQixFQUFFLEtBQTBDLEVBQUUsUUFBaUI7UUFDM0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQWdCLEVBQUUsS0FBMEMsRUFBRSxRQUFpQjtRQUNqRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQS9DRCxvQkErQ0M7QUFFRCxTQUFnQixZQUFZLENBQUMsT0FBNEI7SUFDdkQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNwQixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN6RCxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUFFLFNBQVM7U0FBRTtRQUVsRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMvQixlQUFlO1lBQ2YsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ3RCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxjQUFjO1lBQ2QsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNMO0tBQ0Y7QUFDSCxDQUFDO0FBOUJELG9DQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSmVzdC9Ob2RldW5pdCBjb21wYXRpYmlsaXR5IHNoaW1cbiAqXG4gKiBVc2UgdGhpcyB0byBtYXNzLWNvbnZlcnQgTm9kZXVuaXQgdGVzdHMgdG8gSmVzdCB0ZXN0cy5cbiAqL1xuXG4vKipcbiAqIENvbXBhdGliaWxpdHkgc2hpbSB0ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBUZXN0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjYjogKCkgPT4gdm9pZCkge1xuICB9XG5cbiAgcHVibGljIGVxdWFsKGE6IGFueSwgYjogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhKS50b0VxdWFsKGIpO1xuICB9XG5cbiAgcHVibGljIG5vdEVxdWFsKGE6IGFueSwgYjogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhKS5ub3QudG9FcXVhbChiKTtcbiAgfVxuXG4gIHB1YmxpYyBlcXVhbHMoYTogYW55LCBiOiBhbnksIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGEpLnRvRXF1YWwoYik7XG4gIH1cblxuICBwdWJsaWMgc3RyaWN0RXF1YWwoYTogYW55LCBiOiBhbnksIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGEpLnRvRXF1YWwoYik7XG4gIH1cblxuICBwdWJsaWMgZGVlcEVxdWFsKGE6IGFueSwgYjogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhKS50b0VxdWFsKGIpO1xuICB9XG5cbiAgcHVibGljIG5vdERlZXBFcXVhbChhOiBhbnksIGI6IGFueSwgX21lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICBleHBlY3QoYSkubm90LnRvRXF1YWwoYik7XG4gIH1cblxuICBwdWJsaWMgb2soYTogYW55LCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChhKS50b0JlVHJ1dGh5KCk7XG4gIH1cblxuICBwdWJsaWMgc2FtZShhOiBhbnksIGI6IGFueSkge1xuICAgIGV4cGVjdChhKS50b0JlKGIpO1xuICB9XG5cbiAgcHVibGljIHRocm93cyhibG9jazogKCkgPT4gYW55LCBlcnJvcj86IHN0cmluZyB8IFJlZ0V4cCB8IEVycm9yQ29uc3RydWN0b3IsIF9tZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgZXhwZWN0KGJsb2NrKS50b1Rocm93KGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBkb2VzTm90VGhyb3coYmxvY2s6ICgpID0+IGFueSwgZXJyb3I/OiBzdHJpbmcgfCBSZWdFeHAgfCBFcnJvckNvbnN0cnVjdG9yLCBfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGV4cGVjdChibG9jaykubm90LnRvVGhyb3coZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGRvbmUoKSB7XG4gICAgdGhpcy5jYigpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub2RldW5pdFNoaW0oZXhwb3J0czogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICBpZiAoZXhwb3J0cy5zZXRVcCkge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKG9rID0+IHtcbiAgICAgICAgZXhwb3J0cy5zZXRVcChvayk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBpZiAoZXhwb3J0cy50ZWFyRG93bikge1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2Uob2sgPT4ge1xuICAgICAgICBleHBvcnRzLnRlYXJEb3duKG9rKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZvciAoY29uc3QgW3Rlc3ROYW1lLCB0ZXN0T2JqXSBvZiBPYmplY3QuZW50cmllcyhleHBvcnRzKSkge1xuICAgIGlmICh0ZXN0TmFtZSA9PT0gJ3NldFVwJyB8fCB0ZXN0TmFtZSA9PT0gJ3RlYXJEb3duJykgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiB0ZXN0T2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gSXQncyBhIHN1aXRlXG4gICAgICBkZXNjcmliZSh0ZXN0TmFtZSwgKCkgPT4ge1xuICAgICAgICBub2RldW5pdFNoaW0odGVzdE9iaik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSXQncyBhIHRlc3RcbiAgICAgIHRlc3QodGVzdE5hbWUsICgpID0+IG5ldyBQcm9taXNlKG9rID0+IHtcbiAgICAgICAgdGVzdE9iaihuZXcgVGVzdChvaykpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxufVxuXG50eXBlIEVycm9yQ29uc3RydWN0b3IgPSBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFcnJvcjtcbiJdfQ==