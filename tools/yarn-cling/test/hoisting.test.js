"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hoisting_1 = require("../lib/hoisting");
test('nonconflicting tree gets flattened', () => {
    // GIVEN
    const tree = {
        stringutil: {
            version: '1.0.0',
            dependencies: {
                leftpad: { version: '2.0.0' }
            },
        },
        numutil: {
            version: '3.0.0',
            dependencies: {
                isodd: { version: '4.0.0' }
            },
        },
    };
    // WHEN
    hoisting_1.hoistDependencies(tree);
    // THEN
    expect(tree).toEqual({
        stringutil: { version: '1.0.0' },
        leftpad: { version: '2.0.0' },
        numutil: { version: '3.0.0' },
        isodd: { version: '4.0.0' },
    });
});
test('matching versions get deduped', () => {
    // GIVEN
    const tree = {
        stringutil: {
            version: '1.0.0',
            dependencies: {
                leftpad: { version: '2.0.0' }
            },
        },
        numutil: {
            version: '3.0.0',
            dependencies: {
                leftpad: { version: '2.0.0' },
                isodd: { version: '4.0.0' }
            },
        },
    };
    // WHEN
    hoisting_1.hoistDependencies(tree);
    // THEN
    expect(tree).toEqual({
        stringutil: { version: '1.0.0' },
        leftpad: { version: '2.0.0' },
        numutil: { version: '3.0.0' },
        isodd: { version: '4.0.0' },
    });
});
test('conflicting versions get left in place', () => {
    // GIVEN
    const tree = {
        stringutil: {
            version: '1.0.0',
            dependencies: {
                leftpad: { version: '2.0.0' }
            },
        },
        numutil: {
            version: '3.0.0',
            dependencies: {
                leftpad: { version: '5.0.0' },
                isodd: { version: '4.0.0' }
            },
        },
    };
    // WHEN
    hoisting_1.hoistDependencies(tree);
    // THEN
    expect(tree).toEqual({
        stringutil: { version: '1.0.0' },
        leftpad: { version: '2.0.0' },
        numutil: {
            version: '3.0.0',
            dependencies: {
                leftpad: { version: '5.0.0' },
            },
        },
        isodd: { version: '4.0.0' },
    });
});
test('dependencies of deduped packages are not hoisted into useless positions', () => {
    // GIVEN
    const tree = {
        stringutil: {
            version: '1.0.0',
            dependencies: {
                leftpad: {
                    version: '2.0.0',
                    dependencies: {
                        spacemaker: { version: '3.0.0' },
                    }
                }
            },
        },
        leftpad: {
            version: '2.0.0',
            dependencies: {
                spacemaker: { version: '3.0.0' },
            }
        },
        spacemaker: { version: '4.0.0' }
    };
    // WHEN
    hoisting_1.hoistDependencies(tree);
    // THEN
    expect(tree).toEqual({
        stringutil: { version: '1.0.0' },
        leftpad: {
            version: '2.0.0',
            dependencies: {
                spacemaker: { version: '3.0.0' }
            }
        },
        spacemaker: { version: '4.0.0' },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9pc3RpbmcudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvaXN0aW5nLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBb0Q7QUFLcEQsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxRQUFRO0lBQ1IsTUFBTSxJQUFJLEdBQVM7UUFDakIsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLE9BQU87WUFDaEIsWUFBWSxFQUFFO2dCQUNaLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7YUFDOUI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFlBQVksRUFBRTtnQkFDWixLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFO2FBQzVCO1NBQ0Y7S0FDRixDQUFDO0lBRUYsT0FBTztJQUNQLDRCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXhCLE9BQU87SUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ25CLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7UUFDaEMsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTtRQUM3QixPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFO1FBQzdCLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUU7S0FDNUIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLFFBQVE7SUFDUixNQUFNLElBQUksR0FBUztRQUNqQixVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsT0FBTztZQUNoQixZQUFZLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTthQUM5QjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsT0FBTyxF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Q0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9pc3REZXBlbmRlbmNpZXMgfSBmcm9tIFwiLi4vbGliL2hvaXN0aW5nXCI7XG5pbXBvcnQgeyBQYWNrYWdlTG9ja1BhY2thZ2UgfSBmcm9tIFwiLi4vbGliL3R5cGVzXCI7XG5cbnR5cGUgVHJlZSA9IFJlY29yZDxzdHJpbmcsIFBhY2thZ2VMb2NrUGFja2FnZT47XG5cbnRlc3QoJ25vbmNvbmZsaWN0aW5nIHRyZWUgZ2V0cyBmbGF0dGVuZWQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHRyZWU6IFRyZWUgPSB7XG4gICAgc3RyaW5ndXRpbDoge1xuICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBsZWZ0cGFkOiB7IHZlcnNpb246ICcyLjAuMCcgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIG51bXV0aWw6IHtcbiAgICAgIHZlcnNpb246ICczLjAuMCcsXG4gICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgaXNvZGQ6IHsgdmVyc2lvbjogJzQuMC4wJyB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgLy8gV0hFTlxuICBob2lzdERlcGVuZGVuY2llcyh0cmVlKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdCh0cmVlKS50b0VxdWFsKHtcbiAgICBzdHJpbmd1dGlsOiB7IHZlcnNpb246ICcxLjAuMCcgfSxcbiAgICBsZWZ0cGFkOiB7IHZlcnNpb246ICcyLjAuMCcgfSxcbiAgICBudW11dGlsOiB7IHZlcnNpb246ICczLjAuMCcgfSxcbiAgICBpc29kZDogeyB2ZXJzaW9uOiAnNC4wLjAnIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ21hdGNoaW5nIHZlcnNpb25zIGdldCBkZWR1cGVkJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCB0cmVlOiBUcmVlID0ge1xuICAgIHN0cmluZ3V0aWw6IHtcbiAgICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgbGVmdHBhZDogeyB2ZXJzaW9uOiAnMi4wLjAnIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICBudW11dGlsOiB7XG4gICAgICB2ZXJzaW9uOiAnMy4wLjAnLFxuICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgIGxlZnRwYWQ6IHsgdmVyc2lvbjogJzIuMC4wJyB9LFxuICAgICAgICBpc29kZDogeyB2ZXJzaW9uOiAnNC4wLjAnIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICAvLyBXSEVOXG4gIGhvaXN0RGVwZW5kZW5jaWVzKHRyZWUpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHRyZWUpLnRvRXF1YWwoe1xuICAgIHN0cmluZ3V0aWw6IHsgdmVyc2lvbjogJzEuMC4wJyB9LFxuICAgIGxlZnRwYWQ6IHsgdmVyc2lvbjogJzIuMC4wJyB9LFxuICAgIG51bXV0aWw6IHsgdmVyc2lvbjogJzMuMC4wJyB9LFxuICAgIGlzb2RkOiB7IHZlcnNpb246ICc0LjAuMCcgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnY29uZmxpY3RpbmcgdmVyc2lvbnMgZ2V0IGxlZnQgaW4gcGxhY2UnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHRyZWU6IFRyZWUgPSB7XG4gICAgc3RyaW5ndXRpbDoge1xuICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBsZWZ0cGFkOiB7IHZlcnNpb246ICcyLjAuMCcgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIG51bXV0aWw6IHtcbiAgICAgIHZlcnNpb246ICczLjAuMCcsXG4gICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgbGVmdHBhZDogeyB2ZXJzaW9uOiAnNS4wLjAnIH0sXG4gICAgICAgIGlzb2RkOiB7IHZlcnNpb246ICc0LjAuMCcgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIC8vIFdIRU5cbiAgaG9pc3REZXBlbmRlbmNpZXModHJlZSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QodHJlZSkudG9FcXVhbCh7XG4gICAgc3RyaW5ndXRpbDogeyB2ZXJzaW9uOiAnMS4wLjAnIH0sXG4gICAgbGVmdHBhZDogeyB2ZXJzaW9uOiAnMi4wLjAnIH0sXG4gICAgbnVtdXRpbDoge1xuICAgICAgdmVyc2lvbjogJzMuMC4wJyxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBsZWZ0cGFkOiB7IHZlcnNpb246ICc1LjAuMCcgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBpc29kZDogeyB2ZXJzaW9uOiAnNC4wLjAnIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ2RlcGVuZGVuY2llcyBvZiBkZWR1cGVkIHBhY2thZ2VzIGFyZSBub3QgaG9pc3RlZCBpbnRvIHVzZWxlc3MgcG9zaXRpb25zJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuXG4gIGNvbnN0IHRyZWU6IFRyZWUgPSB7XG4gICAgc3RyaW5ndXRpbDoge1xuICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBsZWZ0cGFkOiB7XG4gICAgICAgICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgICAgIHNwYWNlbWFrZXI6IHsgdmVyc2lvbjogJzMuMC4wJyB9LFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIGxlZnRwYWQ6IHtcbiAgICAgIHZlcnNpb246ICcyLjAuMCcsXG4gICAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgc3BhY2VtYWtlcjogeyB2ZXJzaW9uOiAnMy4wLjAnIH0sXG4gICAgICB9XG4gICAgfSxcbiAgICBzcGFjZW1ha2VyOiB7IHZlcnNpb246ICc0LjAuMCcgfVxuICB9O1xuXG4gIC8vIFdIRU5cbiAgaG9pc3REZXBlbmRlbmNpZXModHJlZSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QodHJlZSkudG9FcXVhbCh7XG4gICAgc3RyaW5ndXRpbDogeyB2ZXJzaW9uOiAnMS4wLjAnIH0sXG4gICAgbGVmdHBhZDoge1xuICAgICAgdmVyc2lvbjogJzIuMC4wJyxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBzcGFjZW1ha2VyOiB7IHZlcnNpb246ICczLjAuMCcgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3BhY2VtYWtlcjogeyB2ZXJzaW9uOiAnNC4wLjAnIH0sXG4gIH0pO1xufSk7Il19