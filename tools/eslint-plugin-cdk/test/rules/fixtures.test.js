"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const fs = require("fs-extra");
const path = require("path");
const rulesDirPlugin = require('eslint-plugin-rulesdir');
rulesDirPlugin.RULES_DIR = path.join(__dirname, '../../lib/rules');
let linter;
const outputRoot = path.join(process.cwd(), '.test-output');
fs.mkdirpSync(outputRoot);
const fixturesRoot = path.join(__dirname, 'fixtures');
fs.readdirSync(fixturesRoot).filter(f => fs.lstatSync(path.join(fixturesRoot, f)).isDirectory()).forEach(d => {
    describe(d, () => {
        const fixturesDir = path.join(fixturesRoot, d);
        beforeAll(() => {
            linter = new eslint_1.ESLint({
                baseConfig: {
                    parser: '@typescript-eslint/parser',
                },
                overrideConfigFile: path.join(fixturesDir, 'eslintrc.js'),
                rulePaths: [
                    path.join(__dirname, '../../lib/rules'),
                ],
                fix: true,
            });
        });
        const outputDir = path.join(outputRoot, d);
        fs.mkdirpSync(outputDir);
        const fixtureFiles = fs.readdirSync(fixturesDir).filter(f => f.endsWith('.ts') && !f.endsWith('.expected.ts'));
        fixtureFiles.forEach(f => {
            test(f, async (done) => {
                const actualFile = await lintAndFix(path.join(fixturesDir, f), outputDir);
                const expectedFile = path.join(fixturesDir, `${path.basename(f, '.ts')}.expected.ts`);
                if (!fs.existsSync(expectedFile)) {
                    done.fail(`Expected file not found. Generated output at ${actualFile}`);
                }
                const actual = await fs.readFile(actualFile, { encoding: 'utf8' });
                const expected = await fs.readFile(expectedFile, { encoding: 'utf8' });
                if (actual !== expected) {
                    done.fail(`Linted file did not match expectations. Expected: ${expectedFile}. Actual: ${actualFile}`);
                }
                done();
            });
        });
    });
});
async function lintAndFix(file, outputDir) {
    const newPath = path.join(outputDir, path.basename(file));
    let result = await linter.lintFiles(file);
    const hasFixes = result.find(r => typeof (r.output) === 'string') !== undefined;
    if (hasFixes) {
        await eslint_1.ESLint.outputFixes(result.map(r => {
            r.filePath = newPath;
            return r;
        }));
    }
    else {
        // If there are no fixes, copy the input file as output
        await fs.copyFile(file, newPath);
    }
    return newPath;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpeHR1cmVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBZ0M7QUFDaEMsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUU3QixNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN6RCxjQUFjLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFFbkUsSUFBSSxNQUFjLENBQUM7QUFFbkIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDNUQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUUxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUV0RCxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMzRyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUNmLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRS9DLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUM7Z0JBQ2xCLFVBQVUsRUFBRTtvQkFDVixNQUFNLEVBQUUsMkJBQTJCO2lCQUNwQztnQkFDRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsSUFB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QUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVNMaW50IH0gZnJvbSAnZXNsaW50JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IHJ1bGVzRGlyUGx1Z2luID0gcmVxdWlyZSgnZXNsaW50LXBsdWdpbi1ydWxlc2RpcicpO1xucnVsZXNEaXJQbHVnaW4uUlVMRVNfRElSID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2xpYi9ydWxlcycpO1xuXG5sZXQgbGludGVyOiBFU0xpbnQ7XG5cbmNvbnN0IG91dHB1dFJvb3QgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJy50ZXN0LW91dHB1dCcpO1xuZnMubWtkaXJwU3luYyhvdXRwdXRSb290KTtcblxuY29uc3QgZml4dHVyZXNSb290ID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJyk7XG5cbmZzLnJlYWRkaXJTeW5jKGZpeHR1cmVzUm9vdCkuZmlsdGVyKGYgPT4gZnMubHN0YXRTeW5jKHBhdGguam9pbihmaXh0dXJlc1Jvb3QsIGYpKS5pc0RpcmVjdG9yeSgpKS5mb3JFYWNoKGQgPT4ge1xuICBkZXNjcmliZShkLCAoKSA9PiB7XG4gICAgY29uc3QgZml4dHVyZXNEaXIgPSBwYXRoLmpvaW4oZml4dHVyZXNSb290LCBkKTtcblxuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICBsaW50ZXIgPSBuZXcgRVNMaW50KHtcbiAgICAgICAgYmFzZUNvbmZpZzoge1xuICAgICAgICAgIHBhcnNlcjogJ0B0eXBlc2NyaXB0LWVzbGludC9wYXJzZXInLFxuICAgICAgICB9LFxuICAgICAgICBvdmVycmlkZUNvbmZpZ0ZpbGU6IHBhdGguam9pbihmaXh0dXJlc0RpciwgJ2VzbGludHJjLmpzJyksXG4gICAgICAgIHJ1bGVQYXRoczogW1xuICAgICAgICAgIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9saWIvcnVsZXMnKSxcbiAgICAgICAgXSxcbiAgICAgICAgZml4OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvdXRwdXREaXIgPSBwYXRoLmpvaW4ob3V0cHV0Um9vdCwgZCk7XG4gICAgZnMubWtkaXJwU3luYyhvdXRwdXREaXIpO1xuXG4gICAgY29uc3QgZml4dHVyZUZpbGVzID0gZnMucmVhZGRpclN5bmMoZml4dHVyZXNEaXIpLmZpbHRlcihmID0+IGYuZW5kc1dpdGgoJy50cycpICYmICFmLmVuZHNXaXRoKCcuZXhwZWN0ZWQudHMnKSk7XG5cbiAgICBmaXh0dXJlRmlsZXMuZm9yRWFjaChmID0+IHtcbiAgICAgIHRlc3QoZiwgYXN5bmMgKGRvbmUpID0+IHtcbiAgICAgICAgY29uc3QgYWN0dWFsRmlsZSA9IGF3YWl0IGxpbnRBbmRGaXgocGF0aC5qb2luKGZpeHR1cmVzRGlyLCBmKSwgb3V0cHV0RGlyKTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRGaWxlID0gcGF0aC5qb2luKGZpeHR1cmVzRGlyLCBgJHtwYXRoLmJhc2VuYW1lKGYsICcudHMnKX0uZXhwZWN0ZWQudHNgKTtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGV4cGVjdGVkRmlsZSkpIHtcbiAgICAgICAgICBkb25lLmZhaWwoYEV4cGVjdGVkIGZpbGUgbm90IGZvdW5kLiBHZW5lcmF0ZWQgb3V0cHV0IGF0ICR7YWN0dWFsRmlsZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBmcy5yZWFkRmlsZShhY3R1YWxGaWxlLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkID0gYXdhaXQgZnMucmVhZEZpbGUoZXhwZWN0ZWRGaWxlLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgICAgZG9uZS5mYWlsKGBMaW50ZWQgZmlsZSBkaWQgbm90IG1hdGNoIGV4cGVjdGF0aW9ucy4gRXhwZWN0ZWQ6ICR7ZXhwZWN0ZWRGaWxlfS4gQWN0dWFsOiAke2FjdHVhbEZpbGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGxpbnRBbmRGaXgoZmlsZTogc3RyaW5nLCBvdXRwdXREaXI6IHN0cmluZykge1xuICBjb25zdCBuZXdQYXRoID0gcGF0aC5qb2luKG91dHB1dERpciwgcGF0aC5iYXNlbmFtZShmaWxlKSlcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IGxpbnRlci5saW50RmlsZXMoZmlsZSk7XG4gIGNvbnN0IGhhc0ZpeGVzID0gcmVzdWx0LmZpbmQociA9PiB0eXBlb2Yoci5vdXRwdXQpID09PSAnc3RyaW5nJykgIT09IHVuZGVmaW5lZDtcbiAgaWYgKGhhc0ZpeGVzKSB7XG4gICAgYXdhaXQgRVNMaW50Lm91dHB1dEZpeGVzKHJlc3VsdC5tYXAociA9PiB7XG4gICAgICByLmZpbGVQYXRoID0gbmV3UGF0aDtcbiAgICAgIHJldHVybiByO1xuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZml4ZXMsIGNvcHkgdGhlIGlucHV0IGZpbGUgYXMgb3V0cHV0XG4gICAgYXdhaXQgZnMuY29weUZpbGUoZmlsZSwgbmV3UGF0aCk7XG4gIH1cbiAgcmV0dXJuIG5ld1BhdGg7XG59XG4iXX0=