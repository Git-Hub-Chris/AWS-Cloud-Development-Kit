import fs = require('fs');
import path = require('path');

/**
 * Return the package JSON for the current package
 */
export function currentPackageJson(): any {
    return require(path.join(process.cwd(), 'package.json'));
}

/**
 * Return the CDK build options
 */
export function cdkBuildOptions(): CDKBuildOptions {
    // These could have been in a separate cdk-build.json but for
    // now it's easiest to just read them from the package JSON.
    // Our package directories are littered with .json files enough
    // already.
    return currentPackageJson()["cdk-build"] || {};
}

/**
 * Whether this is a jsii package
 */
export function isJsii(): boolean {
    return currentPackageJson().jsii;
}

/**
 * Return the unit test files for this package
 */
export function unitTestFiles(): string[] {
    let stat;
    try {
        stat = fs.statSync('test');
    } catch (e) {
        return [];
    }

    if (!stat.isDirectory()) { return []; }

    return fs.readdirSync('test').filter(f => f.startsWith('test.') && f.endsWith('.js'));
}

/**
 * The text that is in the test file if the test was an autogenerated no-op test
 */
const AUTOGENERATED_TEST_MARKER = 'No tests are specified for this package.';

/**
 * Return whether the only tests that exist are autogenerated
 */
export function hasOnlyAutogeneratedTests(): boolean {
    const tests = unitTestFiles();
    const packageName = path.basename(process.cwd());

    return (tests.length === 1
        && tests[0] === `test/test.${packageName}.js`
        && fs.readFileSync(tests[0], { encoding: 'utf-8' }).indexOf(AUTOGENERATED_TEST_MARKER) !== -1);
}

/**
 * Return the compiler for this package (either tsc or jsii)
 */
export function packageCompiler() {
    return isJsii() ? 'jsii' : 'tsc';
}

export interface CDKBuildOptions {
    /**
     * What CloudFormation scope to generate resources for, if any
     */
    cloudformation?: string;
}